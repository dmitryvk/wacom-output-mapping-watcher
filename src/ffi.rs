/* automatically generated by rust-bindgen */

pub enum Struct_xcb_connection_t { }
pub type xcb_connection_t = Struct_xcb_connection_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub data: *mut ::libc::c_void,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_generic_iterator_t = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_generic_reply_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub pad: [uint32_t; 7usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_generic_event_t = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub pad1: uint16_t,
    pub pad: [uint32_t; 5usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_ge_event_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
    pub resource_id: uint32_t,
    pub minor_code: uint16_t,
    pub major_code: uint8_t,
    pub pad0: uint8_t,
    pub pad: [uint32_t; 5usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_generic_error_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_void_cookie_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_char2b_t {
    pub byte1: uint8_t,
    pub byte2: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_char2b_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_char2b_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_char2b_t = Struct_xcb_char2b_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_char2b_iterator_t {
    pub data: *mut xcb_char2b_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_char2b_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_char2b_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_char2b_iterator_t = Struct_xcb_char2b_iterator_t;
pub type xcb_window_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_window_iterator_t {
    pub data: *mut xcb_window_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_window_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_window_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_window_iterator_t = Struct_xcb_window_iterator_t;
pub type xcb_pixmap_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_pixmap_iterator_t {
    pub data: *mut xcb_pixmap_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_pixmap_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_pixmap_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_pixmap_iterator_t = Struct_xcb_pixmap_iterator_t;
pub type xcb_cursor_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_cursor_iterator_t {
    pub data: *mut xcb_cursor_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_cursor_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_cursor_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_cursor_iterator_t = Struct_xcb_cursor_iterator_t;
pub type xcb_font_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_font_iterator_t {
    pub data: *mut xcb_font_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_font_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_font_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_font_iterator_t = Struct_xcb_font_iterator_t;
pub type xcb_gcontext_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_gcontext_iterator_t {
    pub data: *mut xcb_gcontext_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_gcontext_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_gcontext_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_gcontext_iterator_t = Struct_xcb_gcontext_iterator_t;
pub type xcb_colormap_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_colormap_iterator_t {
    pub data: *mut xcb_colormap_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_colormap_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_colormap_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_colormap_iterator_t = Struct_xcb_colormap_iterator_t;
pub type xcb_atom_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_atom_iterator_t {
    pub data: *mut xcb_atom_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_atom_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_atom_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_atom_iterator_t = Struct_xcb_atom_iterator_t;
pub type xcb_drawable_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_drawable_iterator_t {
    pub data: *mut xcb_drawable_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_drawable_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_drawable_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_drawable_iterator_t = Struct_xcb_drawable_iterator_t;
pub type xcb_fontable_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_fontable_iterator_t {
    pub data: *mut xcb_fontable_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_fontable_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_fontable_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_fontable_iterator_t = Struct_xcb_fontable_iterator_t;
pub type xcb_visualid_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_visualid_iterator_t {
    pub data: *mut xcb_visualid_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_visualid_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_visualid_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_visualid_iterator_t = Struct_xcb_visualid_iterator_t;
pub type xcb_timestamp_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_timestamp_iterator_t {
    pub data: *mut xcb_timestamp_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_timestamp_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_timestamp_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_timestamp_iterator_t = Struct_xcb_timestamp_iterator_t;
pub type xcb_keysym_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_keysym_iterator_t {
    pub data: *mut xcb_keysym_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_keysym_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_keysym_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_keysym_iterator_t = Struct_xcb_keysym_iterator_t;
pub type xcb_keycode_t = uint8_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_keycode_iterator_t {
    pub data: *mut xcb_keycode_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_keycode_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_keycode_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_keycode_iterator_t = Struct_xcb_keycode_iterator_t;
pub type xcb_button_t = uint8_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_button_iterator_t {
    pub data: *mut xcb_button_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_button_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_button_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_button_iterator_t = Struct_xcb_button_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_point_t {
    pub x: int16_t,
    pub y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_point_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_point_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_point_t = Struct_xcb_point_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_point_iterator_t {
    pub data: *mut xcb_point_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_point_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_point_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_point_iterator_t = Struct_xcb_point_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_rectangle_t {
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_rectangle_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_rectangle_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_rectangle_t = Struct_xcb_rectangle_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_rectangle_iterator_t {
    pub data: *mut xcb_rectangle_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_rectangle_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_rectangle_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_rectangle_iterator_t = Struct_xcb_rectangle_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_arc_t {
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub angle1: int16_t,
    pub angle2: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_arc_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_arc_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_arc_t = Struct_xcb_arc_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_arc_iterator_t {
    pub data: *mut xcb_arc_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_arc_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_arc_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_arc_iterator_t = Struct_xcb_arc_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_format_t {
    pub depth: uint8_t,
    pub bits_per_pixel: uint8_t,
    pub scanline_pad: uint8_t,
    pub pad0: [uint8_t; 5usize],
}
impl ::std::clone::Clone for Struct_xcb_format_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_format_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_format_t = Struct_xcb_format_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_format_iterator_t {
    pub data: *mut xcb_format_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_format_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_format_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_format_iterator_t = Struct_xcb_format_iterator_t;
pub type Enum_xcb_visual_class_t = ::libc::c_uint;
pub const XCB_VISUAL_CLASS_STATIC_GRAY: ::libc::c_uint = 0;
pub const XCB_VISUAL_CLASS_GRAY_SCALE: ::libc::c_uint = 1;
pub const XCB_VISUAL_CLASS_STATIC_COLOR: ::libc::c_uint = 2;
pub const XCB_VISUAL_CLASS_PSEUDO_COLOR: ::libc::c_uint = 3;
pub const XCB_VISUAL_CLASS_TRUE_COLOR: ::libc::c_uint = 4;
pub const XCB_VISUAL_CLASS_DIRECT_COLOR: ::libc::c_uint = 5;
pub type xcb_visual_class_t = Enum_xcb_visual_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_visualtype_t {
    pub visual_id: xcb_visualid_t,
    pub _class: uint8_t,
    pub bits_per_rgb_value: uint8_t,
    pub colormap_entries: uint16_t,
    pub red_mask: uint32_t,
    pub green_mask: uint32_t,
    pub blue_mask: uint32_t,
    pub pad0: [uint8_t; 4usize],
}
impl ::std::clone::Clone for Struct_xcb_visualtype_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_visualtype_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_visualtype_t = Struct_xcb_visualtype_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_visualtype_iterator_t {
    pub data: *mut xcb_visualtype_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_visualtype_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_visualtype_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_visualtype_iterator_t = Struct_xcb_visualtype_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_depth_t {
    pub depth: uint8_t,
    pub pad0: uint8_t,
    pub visuals_len: uint16_t,
    pub pad1: [uint8_t; 4usize],
}
impl ::std::clone::Clone for Struct_xcb_depth_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_depth_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_depth_t = Struct_xcb_depth_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_depth_iterator_t {
    pub data: *mut xcb_depth_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_depth_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_depth_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_depth_iterator_t = Struct_xcb_depth_iterator_t;
pub type Enum_xcb_event_mask_t = ::libc::c_uint;
pub const XCB_EVENT_MASK_NO_EVENT: ::libc::c_uint = 0;
pub const XCB_EVENT_MASK_KEY_PRESS: ::libc::c_uint = 1;
pub const XCB_EVENT_MASK_KEY_RELEASE: ::libc::c_uint = 2;
pub const XCB_EVENT_MASK_BUTTON_PRESS: ::libc::c_uint = 4;
pub const XCB_EVENT_MASK_BUTTON_RELEASE: ::libc::c_uint = 8;
pub const XCB_EVENT_MASK_ENTER_WINDOW: ::libc::c_uint = 16;
pub const XCB_EVENT_MASK_LEAVE_WINDOW: ::libc::c_uint = 32;
pub const XCB_EVENT_MASK_POINTER_MOTION: ::libc::c_uint = 64;
pub const XCB_EVENT_MASK_POINTER_MOTION_HINT: ::libc::c_uint = 128;
pub const XCB_EVENT_MASK_BUTTON_1_MOTION: ::libc::c_uint = 256;
pub const XCB_EVENT_MASK_BUTTON_2_MOTION: ::libc::c_uint = 512;
pub const XCB_EVENT_MASK_BUTTON_3_MOTION: ::libc::c_uint = 1024;
pub const XCB_EVENT_MASK_BUTTON_4_MOTION: ::libc::c_uint = 2048;
pub const XCB_EVENT_MASK_BUTTON_5_MOTION: ::libc::c_uint = 4096;
pub const XCB_EVENT_MASK_BUTTON_MOTION: ::libc::c_uint = 8192;
pub const XCB_EVENT_MASK_KEYMAP_STATE: ::libc::c_uint = 16384;
pub const XCB_EVENT_MASK_EXPOSURE: ::libc::c_uint = 32768;
pub const XCB_EVENT_MASK_VISIBILITY_CHANGE: ::libc::c_uint = 65536;
pub const XCB_EVENT_MASK_STRUCTURE_NOTIFY: ::libc::c_uint = 131072;
pub const XCB_EVENT_MASK_RESIZE_REDIRECT: ::libc::c_uint = 262144;
pub const XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY: ::libc::c_uint = 524288;
pub const XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT: ::libc::c_uint = 1048576;
pub const XCB_EVENT_MASK_FOCUS_CHANGE: ::libc::c_uint = 2097152;
pub const XCB_EVENT_MASK_PROPERTY_CHANGE: ::libc::c_uint = 4194304;
pub const XCB_EVENT_MASK_COLOR_MAP_CHANGE: ::libc::c_uint = 8388608;
pub const XCB_EVENT_MASK_OWNER_GRAB_BUTTON: ::libc::c_uint = 16777216;
pub type xcb_event_mask_t = Enum_xcb_event_mask_t;
pub type Enum_xcb_backing_store_t = ::libc::c_uint;
pub const XCB_BACKING_STORE_NOT_USEFUL: ::libc::c_uint = 0;
pub const XCB_BACKING_STORE_WHEN_MAPPED: ::libc::c_uint = 1;
pub const XCB_BACKING_STORE_ALWAYS: ::libc::c_uint = 2;
pub type xcb_backing_store_t = Enum_xcb_backing_store_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_screen_t {
    pub root: xcb_window_t,
    pub default_colormap: xcb_colormap_t,
    pub white_pixel: uint32_t,
    pub black_pixel: uint32_t,
    pub current_input_masks: uint32_t,
    pub width_in_pixels: uint16_t,
    pub height_in_pixels: uint16_t,
    pub width_in_millimeters: uint16_t,
    pub height_in_millimeters: uint16_t,
    pub min_installed_maps: uint16_t,
    pub max_installed_maps: uint16_t,
    pub root_visual: xcb_visualid_t,
    pub backing_stores: uint8_t,
    pub save_unders: uint8_t,
    pub root_depth: uint8_t,
    pub allowed_depths_len: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_screen_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_screen_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_screen_t = Struct_xcb_screen_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_screen_iterator_t {
    pub data: *mut xcb_screen_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_screen_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_screen_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_screen_iterator_t = Struct_xcb_screen_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_setup_request_t {
    pub byte_order: uint8_t,
    pub pad0: uint8_t,
    pub protocol_major_version: uint16_t,
    pub protocol_minor_version: uint16_t,
    pub authorization_protocol_name_len: uint16_t,
    pub authorization_protocol_data_len: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_setup_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_setup_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_setup_request_t = Struct_xcb_setup_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_setup_request_iterator_t {
    pub data: *mut xcb_setup_request_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_setup_request_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_setup_request_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_setup_request_iterator_t = Struct_xcb_setup_request_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_setup_failed_t {
    pub status: uint8_t,
    pub reason_len: uint8_t,
    pub protocol_major_version: uint16_t,
    pub protocol_minor_version: uint16_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_setup_failed_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_setup_failed_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_setup_failed_t = Struct_xcb_setup_failed_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_setup_failed_iterator_t {
    pub data: *mut xcb_setup_failed_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_setup_failed_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_setup_failed_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_setup_failed_iterator_t = Struct_xcb_setup_failed_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_setup_authenticate_t {
    pub status: uint8_t,
    pub pad0: [uint8_t; 5usize],
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_setup_authenticate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_setup_authenticate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_setup_authenticate_t = Struct_xcb_setup_authenticate_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_setup_authenticate_iterator_t {
    pub data: *mut xcb_setup_authenticate_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_setup_authenticate_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_setup_authenticate_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_setup_authenticate_iterator_t =
    Struct_xcb_setup_authenticate_iterator_t;
pub type Enum_xcb_image_order_t = ::libc::c_uint;
pub const XCB_IMAGE_ORDER_LSB_FIRST: ::libc::c_uint = 0;
pub const XCB_IMAGE_ORDER_MSB_FIRST: ::libc::c_uint = 1;
pub type xcb_image_order_t = Enum_xcb_image_order_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_setup_t {
    pub status: uint8_t,
    pub pad0: uint8_t,
    pub protocol_major_version: uint16_t,
    pub protocol_minor_version: uint16_t,
    pub length: uint16_t,
    pub release_number: uint32_t,
    pub resource_id_base: uint32_t,
    pub resource_id_mask: uint32_t,
    pub motion_buffer_size: uint32_t,
    pub vendor_len: uint16_t,
    pub maximum_request_length: uint16_t,
    pub roots_len: uint8_t,
    pub pixmap_formats_len: uint8_t,
    pub image_byte_order: uint8_t,
    pub bitmap_format_bit_order: uint8_t,
    pub bitmap_format_scanline_unit: uint8_t,
    pub bitmap_format_scanline_pad: uint8_t,
    pub min_keycode: xcb_keycode_t,
    pub max_keycode: xcb_keycode_t,
    pub pad1: [uint8_t; 4usize],
}
impl ::std::clone::Clone for Struct_xcb_setup_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_setup_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_setup_t = Struct_xcb_setup_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_setup_iterator_t {
    pub data: *mut xcb_setup_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_setup_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_setup_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_setup_iterator_t = Struct_xcb_setup_iterator_t;
pub type Enum_xcb_mod_mask_t = ::libc::c_uint;
pub const XCB_MOD_MASK_SHIFT: ::libc::c_uint = 1;
pub const XCB_MOD_MASK_LOCK: ::libc::c_uint = 2;
pub const XCB_MOD_MASK_CONTROL: ::libc::c_uint = 4;
pub const XCB_MOD_MASK_1: ::libc::c_uint = 8;
pub const XCB_MOD_MASK_2: ::libc::c_uint = 16;
pub const XCB_MOD_MASK_3: ::libc::c_uint = 32;
pub const XCB_MOD_MASK_4: ::libc::c_uint = 64;
pub const XCB_MOD_MASK_5: ::libc::c_uint = 128;
pub const XCB_MOD_MASK_ANY: ::libc::c_uint = 32768;
pub type xcb_mod_mask_t = Enum_xcb_mod_mask_t;
pub type Enum_xcb_key_but_mask_t = ::libc::c_uint;
pub const XCB_KEY_BUT_MASK_SHIFT: ::libc::c_uint = 1;
pub const XCB_KEY_BUT_MASK_LOCK: ::libc::c_uint = 2;
pub const XCB_KEY_BUT_MASK_CONTROL: ::libc::c_uint = 4;
pub const XCB_KEY_BUT_MASK_MOD_1: ::libc::c_uint = 8;
pub const XCB_KEY_BUT_MASK_MOD_2: ::libc::c_uint = 16;
pub const XCB_KEY_BUT_MASK_MOD_3: ::libc::c_uint = 32;
pub const XCB_KEY_BUT_MASK_MOD_4: ::libc::c_uint = 64;
pub const XCB_KEY_BUT_MASK_MOD_5: ::libc::c_uint = 128;
pub const XCB_KEY_BUT_MASK_BUTTON_1: ::libc::c_uint = 256;
pub const XCB_KEY_BUT_MASK_BUTTON_2: ::libc::c_uint = 512;
pub const XCB_KEY_BUT_MASK_BUTTON_3: ::libc::c_uint = 1024;
pub const XCB_KEY_BUT_MASK_BUTTON_4: ::libc::c_uint = 2048;
pub const XCB_KEY_BUT_MASK_BUTTON_5: ::libc::c_uint = 4096;
pub type xcb_key_but_mask_t = Enum_xcb_key_but_mask_t;
pub type Enum_xcb_window_enum_t = ::libc::c_uint;
pub const XCB_WINDOW_NONE: ::libc::c_uint = 0;
pub type xcb_window_enum_t = Enum_xcb_window_enum_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_key_press_event_t {
    pub response_type: uint8_t,
    pub detail: xcb_keycode_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub same_screen: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_key_press_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_key_press_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_key_press_event_t = Struct_xcb_key_press_event_t;
pub type xcb_key_release_event_t = xcb_key_press_event_t;
pub type Enum_xcb_button_mask_t = ::libc::c_uint;
pub const XCB_BUTTON_MASK_1: ::libc::c_uint = 256;
pub const XCB_BUTTON_MASK_2: ::libc::c_uint = 512;
pub const XCB_BUTTON_MASK_3: ::libc::c_uint = 1024;
pub const XCB_BUTTON_MASK_4: ::libc::c_uint = 2048;
pub const XCB_BUTTON_MASK_5: ::libc::c_uint = 4096;
pub const XCB_BUTTON_MASK_ANY: ::libc::c_uint = 32768;
pub type xcb_button_mask_t = Enum_xcb_button_mask_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_button_press_event_t {
    pub response_type: uint8_t,
    pub detail: xcb_button_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub same_screen: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_button_press_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_button_press_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_button_press_event_t = Struct_xcb_button_press_event_t;
pub type xcb_button_release_event_t = xcb_button_press_event_t;
pub type Enum_xcb_motion_t = ::libc::c_uint;
pub const XCB_MOTION_NORMAL: ::libc::c_uint = 0;
pub const XCB_MOTION_HINT: ::libc::c_uint = 1;
pub type xcb_motion_t = Enum_xcb_motion_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_motion_notify_event_t {
    pub response_type: uint8_t,
    pub detail: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub same_screen: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_motion_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_motion_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_motion_notify_event_t = Struct_xcb_motion_notify_event_t;
pub type Enum_xcb_notify_detail_t = ::libc::c_uint;
pub const XCB_NOTIFY_DETAIL_ANCESTOR: ::libc::c_uint = 0;
pub const XCB_NOTIFY_DETAIL_VIRTUAL: ::libc::c_uint = 1;
pub const XCB_NOTIFY_DETAIL_INFERIOR: ::libc::c_uint = 2;
pub const XCB_NOTIFY_DETAIL_NONLINEAR: ::libc::c_uint = 3;
pub const XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL: ::libc::c_uint = 4;
pub const XCB_NOTIFY_DETAIL_POINTER: ::libc::c_uint = 5;
pub const XCB_NOTIFY_DETAIL_POINTER_ROOT: ::libc::c_uint = 6;
pub const XCB_NOTIFY_DETAIL_NONE: ::libc::c_uint = 7;
pub type xcb_notify_detail_t = Enum_xcb_notify_detail_t;
pub type Enum_xcb_notify_mode_t = ::libc::c_uint;
pub const XCB_NOTIFY_MODE_NORMAL: ::libc::c_uint = 0;
pub const XCB_NOTIFY_MODE_GRAB: ::libc::c_uint = 1;
pub const XCB_NOTIFY_MODE_UNGRAB: ::libc::c_uint = 2;
pub const XCB_NOTIFY_MODE_WHILE_GRABBED: ::libc::c_uint = 3;
pub type xcb_notify_mode_t = Enum_xcb_notify_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_enter_notify_event_t {
    pub response_type: uint8_t,
    pub detail: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub mode: uint8_t,
    pub same_screen_focus: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_enter_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_enter_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_enter_notify_event_t = Struct_xcb_enter_notify_event_t;
pub type xcb_leave_notify_event_t = xcb_enter_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_focus_in_event_t {
    pub response_type: uint8_t,
    pub detail: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub mode: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_focus_in_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_focus_in_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_focus_in_event_t = Struct_xcb_focus_in_event_t;
pub type xcb_focus_out_event_t = xcb_focus_in_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_keymap_notify_event_t {
    pub response_type: uint8_t,
    pub keys: [uint8_t; 31usize],
}
impl ::std::clone::Clone for Struct_xcb_keymap_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_keymap_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_keymap_notify_event_t = Struct_xcb_keymap_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_expose_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub x: uint16_t,
    pub y: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub count: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_expose_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_expose_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_expose_event_t = Struct_xcb_expose_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_graphics_exposure_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub drawable: xcb_drawable_t,
    pub x: uint16_t,
    pub y: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub minor_opcode: uint16_t,
    pub count: uint16_t,
    pub major_opcode: uint8_t,
    pub pad1: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_graphics_exposure_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_graphics_exposure_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_graphics_exposure_event_t = Struct_xcb_graphics_exposure_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_no_exposure_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub drawable: xcb_drawable_t,
    pub minor_opcode: uint16_t,
    pub major_opcode: uint8_t,
    pub pad1: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_no_exposure_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_no_exposure_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_no_exposure_event_t = Struct_xcb_no_exposure_event_t;
pub type Enum_xcb_visibility_t = ::libc::c_uint;
pub const XCB_VISIBILITY_UNOBSCURED: ::libc::c_uint = 0;
pub const XCB_VISIBILITY_PARTIALLY_OBSCURED: ::libc::c_uint = 1;
pub const XCB_VISIBILITY_FULLY_OBSCURED: ::libc::c_uint = 2;
pub type xcb_visibility_t = Enum_xcb_visibility_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_visibility_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub state: uint8_t,
    pub pad1: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_visibility_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_visibility_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_visibility_notify_event_t = Struct_xcb_visibility_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_create_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub override_redirect: uint8_t,
    pub pad1: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_create_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_create_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_create_notify_event_t = Struct_xcb_create_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_destroy_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_destroy_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_destroy_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_destroy_notify_event_t = Struct_xcb_destroy_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_unmap_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub from_configure: uint8_t,
    pub pad1: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_unmap_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_unmap_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_unmap_notify_event_t = Struct_xcb_unmap_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_map_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub override_redirect: uint8_t,
    pub pad1: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_map_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_map_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_map_notify_event_t = Struct_xcb_map_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_map_request_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_map_request_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_map_request_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_map_request_event_t = Struct_xcb_map_request_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_reparent_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub override_redirect: uint8_t,
    pub pad1: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_reparent_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_reparent_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_reparent_notify_event_t = Struct_xcb_reparent_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_configure_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub above_sibling: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub override_redirect: uint8_t,
    pub pad1: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_configure_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_configure_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_configure_notify_event_t = Struct_xcb_configure_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_configure_request_event_t {
    pub response_type: uint8_t,
    pub stack_mode: uint8_t,
    pub sequence: uint16_t,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
    pub sibling: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub value_mask: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_configure_request_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_configure_request_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_configure_request_event_t = Struct_xcb_configure_request_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_gravity_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_gravity_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_gravity_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_gravity_notify_event_t = Struct_xcb_gravity_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_resize_request_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_resize_request_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_resize_request_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_resize_request_event_t = Struct_xcb_resize_request_event_t;
pub type Enum_xcb_place_t = ::libc::c_uint;
pub const XCB_PLACE_ON_TOP: ::libc::c_uint = 0;
pub const XCB_PLACE_ON_BOTTOM: ::libc::c_uint = 1;
pub type xcb_place_t = Enum_xcb_place_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_circulate_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub pad1: [uint8_t; 4usize],
    pub place: uint8_t,
    pub pad2: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_circulate_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_circulate_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_circulate_notify_event_t = Struct_xcb_circulate_notify_event_t;
pub type xcb_circulate_request_event_t = xcb_circulate_notify_event_t;
pub type Enum_xcb_property_t = ::libc::c_uint;
pub const XCB_PROPERTY_NEW_VALUE: ::libc::c_uint = 0;
pub const XCB_PROPERTY_DELETE: ::libc::c_uint = 1;
pub type xcb_property_t = Enum_xcb_property_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_property_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub atom: xcb_atom_t,
    pub time: xcb_timestamp_t,
    pub state: uint8_t,
    pub pad1: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_property_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_property_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_property_notify_event_t = Struct_xcb_property_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_selection_clear_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_selection_clear_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_selection_clear_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_selection_clear_event_t = Struct_xcb_selection_clear_event_t;
pub type Enum_xcb_time_t = ::libc::c_uint;
pub const XCB_TIME_CURRENT_TIME: ::libc::c_uint = 0;
pub type xcb_time_t = Enum_xcb_time_t;
pub type Enum_xcb_atom_enum_t = ::libc::c_uint;
pub const XCB_ATOM_NONE: ::libc::c_uint = 0;
pub const XCB_ATOM_ANY: ::libc::c_uint = 0;
pub const XCB_ATOM_PRIMARY: ::libc::c_uint = 1;
pub const XCB_ATOM_SECONDARY: ::libc::c_uint = 2;
pub const XCB_ATOM_ARC: ::libc::c_uint = 3;
pub const XCB_ATOM_ATOM: ::libc::c_uint = 4;
pub const XCB_ATOM_BITMAP: ::libc::c_uint = 5;
pub const XCB_ATOM_CARDINAL: ::libc::c_uint = 6;
pub const XCB_ATOM_COLORMAP: ::libc::c_uint = 7;
pub const XCB_ATOM_CURSOR: ::libc::c_uint = 8;
pub const XCB_ATOM_CUT_BUFFER0: ::libc::c_uint = 9;
pub const XCB_ATOM_CUT_BUFFER1: ::libc::c_uint = 10;
pub const XCB_ATOM_CUT_BUFFER2: ::libc::c_uint = 11;
pub const XCB_ATOM_CUT_BUFFER3: ::libc::c_uint = 12;
pub const XCB_ATOM_CUT_BUFFER4: ::libc::c_uint = 13;
pub const XCB_ATOM_CUT_BUFFER5: ::libc::c_uint = 14;
pub const XCB_ATOM_CUT_BUFFER6: ::libc::c_uint = 15;
pub const XCB_ATOM_CUT_BUFFER7: ::libc::c_uint = 16;
pub const XCB_ATOM_DRAWABLE: ::libc::c_uint = 17;
pub const XCB_ATOM_FONT: ::libc::c_uint = 18;
pub const XCB_ATOM_INTEGER: ::libc::c_uint = 19;
pub const XCB_ATOM_PIXMAP: ::libc::c_uint = 20;
pub const XCB_ATOM_POINT: ::libc::c_uint = 21;
pub const XCB_ATOM_RECTANGLE: ::libc::c_uint = 22;
pub const XCB_ATOM_RESOURCE_MANAGER: ::libc::c_uint = 23;
pub const XCB_ATOM_RGB_COLOR_MAP: ::libc::c_uint = 24;
pub const XCB_ATOM_RGB_BEST_MAP: ::libc::c_uint = 25;
pub const XCB_ATOM_RGB_BLUE_MAP: ::libc::c_uint = 26;
pub const XCB_ATOM_RGB_DEFAULT_MAP: ::libc::c_uint = 27;
pub const XCB_ATOM_RGB_GRAY_MAP: ::libc::c_uint = 28;
pub const XCB_ATOM_RGB_GREEN_MAP: ::libc::c_uint = 29;
pub const XCB_ATOM_RGB_RED_MAP: ::libc::c_uint = 30;
pub const XCB_ATOM_STRING: ::libc::c_uint = 31;
pub const XCB_ATOM_VISUALID: ::libc::c_uint = 32;
pub const XCB_ATOM_WINDOW: ::libc::c_uint = 33;
pub const XCB_ATOM_WM_COMMAND: ::libc::c_uint = 34;
pub const XCB_ATOM_WM_HINTS: ::libc::c_uint = 35;
pub const XCB_ATOM_WM_CLIENT_MACHINE: ::libc::c_uint = 36;
pub const XCB_ATOM_WM_ICON_NAME: ::libc::c_uint = 37;
pub const XCB_ATOM_WM_ICON_SIZE: ::libc::c_uint = 38;
pub const XCB_ATOM_WM_NAME: ::libc::c_uint = 39;
pub const XCB_ATOM_WM_NORMAL_HINTS: ::libc::c_uint = 40;
pub const XCB_ATOM_WM_SIZE_HINTS: ::libc::c_uint = 41;
pub const XCB_ATOM_WM_ZOOM_HINTS: ::libc::c_uint = 42;
pub const XCB_ATOM_MIN_SPACE: ::libc::c_uint = 43;
pub const XCB_ATOM_NORM_SPACE: ::libc::c_uint = 44;
pub const XCB_ATOM_MAX_SPACE: ::libc::c_uint = 45;
pub const XCB_ATOM_END_SPACE: ::libc::c_uint = 46;
pub const XCB_ATOM_SUPERSCRIPT_X: ::libc::c_uint = 47;
pub const XCB_ATOM_SUPERSCRIPT_Y: ::libc::c_uint = 48;
pub const XCB_ATOM_SUBSCRIPT_X: ::libc::c_uint = 49;
pub const XCB_ATOM_SUBSCRIPT_Y: ::libc::c_uint = 50;
pub const XCB_ATOM_UNDERLINE_POSITION: ::libc::c_uint = 51;
pub const XCB_ATOM_UNDERLINE_THICKNESS: ::libc::c_uint = 52;
pub const XCB_ATOM_STRIKEOUT_ASCENT: ::libc::c_uint = 53;
pub const XCB_ATOM_STRIKEOUT_DESCENT: ::libc::c_uint = 54;
pub const XCB_ATOM_ITALIC_ANGLE: ::libc::c_uint = 55;
pub const XCB_ATOM_X_HEIGHT: ::libc::c_uint = 56;
pub const XCB_ATOM_QUAD_WIDTH: ::libc::c_uint = 57;
pub const XCB_ATOM_WEIGHT: ::libc::c_uint = 58;
pub const XCB_ATOM_POINT_SIZE: ::libc::c_uint = 59;
pub const XCB_ATOM_RESOLUTION: ::libc::c_uint = 60;
pub const XCB_ATOM_COPYRIGHT: ::libc::c_uint = 61;
pub const XCB_ATOM_NOTICE: ::libc::c_uint = 62;
pub const XCB_ATOM_FONT_NAME: ::libc::c_uint = 63;
pub const XCB_ATOM_FAMILY_NAME: ::libc::c_uint = 64;
pub const XCB_ATOM_FULL_NAME: ::libc::c_uint = 65;
pub const XCB_ATOM_CAP_HEIGHT: ::libc::c_uint = 66;
pub const XCB_ATOM_WM_CLASS: ::libc::c_uint = 67;
pub const XCB_ATOM_WM_TRANSIENT_FOR: ::libc::c_uint = 68;
pub type xcb_atom_enum_t = Enum_xcb_atom_enum_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_selection_request_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub owner: xcb_window_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_selection_request_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_selection_request_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_selection_request_event_t = Struct_xcb_selection_request_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_selection_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_selection_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_selection_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_selection_notify_event_t = Struct_xcb_selection_notify_event_t;
pub type Enum_xcb_colormap_state_t = ::libc::c_uint;
pub const XCB_COLORMAP_STATE_UNINSTALLED: ::libc::c_uint = 0;
pub const XCB_COLORMAP_STATE_INSTALLED: ::libc::c_uint = 1;
pub type xcb_colormap_state_t = Enum_xcb_colormap_state_t;
pub type Enum_xcb_colormap_enum_t = ::libc::c_uint;
pub const XCB_COLORMAP_NONE: ::libc::c_uint = 0;
pub type xcb_colormap_enum_t = Enum_xcb_colormap_enum_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_colormap_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub colormap: xcb_colormap_t,
    pub _new: uint8_t,
    pub state: uint8_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_colormap_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_colormap_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_colormap_notify_event_t = Struct_xcb_colormap_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_xcb_client_message_data_t {
    pub _bindgen_data_: [u32; 5usize],
}
impl Union_xcb_client_message_data_t {
    pub unsafe fn data8(&mut self) -> *mut [uint8_t; 20usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn data16(&mut self) -> *mut [uint16_t; 10usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn data32(&mut self) -> *mut [uint32_t; 5usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_xcb_client_message_data_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_xcb_client_message_data_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_client_message_data_t = Union_xcb_client_message_data_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_client_message_data_iterator_t {
    pub data: *mut xcb_client_message_data_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_client_message_data_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_client_message_data_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_client_message_data_iterator_t =
    Struct_xcb_client_message_data_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_client_message_event_t {
    pub response_type: uint8_t,
    pub format: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub _type: xcb_atom_t,
    pub data: xcb_client_message_data_t,
}
impl ::std::clone::Clone for Struct_xcb_client_message_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_client_message_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_client_message_event_t = Struct_xcb_client_message_event_t;
pub type Enum_xcb_mapping_t = ::libc::c_uint;
pub const XCB_MAPPING_MODIFIER: ::libc::c_uint = 0;
pub const XCB_MAPPING_KEYBOARD: ::libc::c_uint = 1;
pub const XCB_MAPPING_POINTER: ::libc::c_uint = 2;
pub type xcb_mapping_t = Enum_xcb_mapping_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_mapping_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub request: uint8_t,
    pub first_keycode: xcb_keycode_t,
    pub count: uint8_t,
    pub pad1: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_mapping_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_mapping_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_mapping_notify_event_t = Struct_xcb_mapping_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_ge_generic_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub pad0: [uint8_t; 22usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_ge_generic_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_ge_generic_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_ge_generic_event_t = Struct_xcb_ge_generic_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_request_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
    pub bad_value: uint32_t,
    pub minor_opcode: uint16_t,
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_request_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_request_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_request_error_t = Struct_xcb_request_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_value_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
    pub bad_value: uint32_t,
    pub minor_opcode: uint16_t,
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_value_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_value_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_value_error_t = Struct_xcb_value_error_t;
pub type xcb_window_error_t = xcb_value_error_t;
pub type xcb_pixmap_error_t = xcb_value_error_t;
pub type xcb_atom_error_t = xcb_value_error_t;
pub type xcb_cursor_error_t = xcb_value_error_t;
pub type xcb_font_error_t = xcb_value_error_t;
pub type xcb_match_error_t = xcb_request_error_t;
pub type xcb_drawable_error_t = xcb_value_error_t;
pub type xcb_access_error_t = xcb_request_error_t;
pub type xcb_alloc_error_t = xcb_request_error_t;
pub type xcb_colormap_error_t = xcb_value_error_t;
pub type xcb_g_context_error_t = xcb_value_error_t;
pub type xcb_id_choice_error_t = xcb_value_error_t;
pub type xcb_name_error_t = xcb_request_error_t;
pub type xcb_length_error_t = xcb_request_error_t;
pub type xcb_implementation_error_t = xcb_request_error_t;
pub type Enum_xcb_window_class_t = ::libc::c_uint;
pub const XCB_WINDOW_CLASS_COPY_FROM_PARENT: ::libc::c_uint = 0;
pub const XCB_WINDOW_CLASS_INPUT_OUTPUT: ::libc::c_uint = 1;
pub const XCB_WINDOW_CLASS_INPUT_ONLY: ::libc::c_uint = 2;
pub type xcb_window_class_t = Enum_xcb_window_class_t;
pub type Enum_xcb_cw_t = ::libc::c_uint;
pub const XCB_CW_BACK_PIXMAP: ::libc::c_uint = 1;
pub const XCB_CW_BACK_PIXEL: ::libc::c_uint = 2;
pub const XCB_CW_BORDER_PIXMAP: ::libc::c_uint = 4;
pub const XCB_CW_BORDER_PIXEL: ::libc::c_uint = 8;
pub const XCB_CW_BIT_GRAVITY: ::libc::c_uint = 16;
pub const XCB_CW_WIN_GRAVITY: ::libc::c_uint = 32;
pub const XCB_CW_BACKING_STORE: ::libc::c_uint = 64;
pub const XCB_CW_BACKING_PLANES: ::libc::c_uint = 128;
pub const XCB_CW_BACKING_PIXEL: ::libc::c_uint = 256;
pub const XCB_CW_OVERRIDE_REDIRECT: ::libc::c_uint = 512;
pub const XCB_CW_SAVE_UNDER: ::libc::c_uint = 1024;
pub const XCB_CW_EVENT_MASK: ::libc::c_uint = 2048;
pub const XCB_CW_DONT_PROPAGATE: ::libc::c_uint = 4096;
pub const XCB_CW_COLORMAP: ::libc::c_uint = 8192;
pub const XCB_CW_CURSOR: ::libc::c_uint = 16384;
pub type xcb_cw_t = Enum_xcb_cw_t;
pub type Enum_xcb_back_pixmap_t = ::libc::c_uint;
pub const XCB_BACK_PIXMAP_NONE: ::libc::c_uint = 0;
pub const XCB_BACK_PIXMAP_PARENT_RELATIVE: ::libc::c_uint = 1;
pub type xcb_back_pixmap_t = Enum_xcb_back_pixmap_t;
pub type Enum_xcb_gravity_t = ::libc::c_uint;
pub const XCB_GRAVITY_BIT_FORGET: ::libc::c_uint = 0;
pub const XCB_GRAVITY_WIN_UNMAP: ::libc::c_uint = 0;
pub const XCB_GRAVITY_NORTH_WEST: ::libc::c_uint = 1;
pub const XCB_GRAVITY_NORTH: ::libc::c_uint = 2;
pub const XCB_GRAVITY_NORTH_EAST: ::libc::c_uint = 3;
pub const XCB_GRAVITY_WEST: ::libc::c_uint = 4;
pub const XCB_GRAVITY_CENTER: ::libc::c_uint = 5;
pub const XCB_GRAVITY_EAST: ::libc::c_uint = 6;
pub const XCB_GRAVITY_SOUTH_WEST: ::libc::c_uint = 7;
pub const XCB_GRAVITY_SOUTH: ::libc::c_uint = 8;
pub const XCB_GRAVITY_SOUTH_EAST: ::libc::c_uint = 9;
pub const XCB_GRAVITY_STATIC: ::libc::c_uint = 10;
pub type xcb_gravity_t = Enum_xcb_gravity_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_create_window_request_t {
    pub major_opcode: uint8_t,
    pub depth: uint8_t,
    pub length: uint16_t,
    pub wid: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub _class: uint16_t,
    pub visual: xcb_visualid_t,
    pub value_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_create_window_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_create_window_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_create_window_request_t = Struct_xcb_create_window_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_window_attributes_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub value_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_change_window_attributes_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_change_window_attributes_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_window_attributes_request_t =
    Struct_xcb_change_window_attributes_request_t;
pub type Enum_xcb_map_state_t = ::libc::c_uint;
pub const XCB_MAP_STATE_UNMAPPED: ::libc::c_uint = 0;
pub const XCB_MAP_STATE_UNVIEWABLE: ::libc::c_uint = 1;
pub const XCB_MAP_STATE_VIEWABLE: ::libc::c_uint = 2;
pub type xcb_map_state_t = Enum_xcb_map_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_window_attributes_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_window_attributes_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_window_attributes_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_window_attributes_cookie_t =
    Struct_xcb_get_window_attributes_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_window_attributes_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_get_window_attributes_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_window_attributes_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_window_attributes_request_t =
    Struct_xcb_get_window_attributes_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_window_attributes_reply_t {
    pub response_type: uint8_t,
    pub backing_store: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub visual: xcb_visualid_t,
    pub _class: uint16_t,
    pub bit_gravity: uint8_t,
    pub win_gravity: uint8_t,
    pub backing_planes: uint32_t,
    pub backing_pixel: uint32_t,
    pub save_under: uint8_t,
    pub map_is_installed: uint8_t,
    pub map_state: uint8_t,
    pub override_redirect: uint8_t,
    pub colormap: xcb_colormap_t,
    pub all_event_masks: uint32_t,
    pub your_event_mask: uint32_t,
    pub do_not_propagate_mask: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_get_window_attributes_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_window_attributes_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_window_attributes_reply_t =
    Struct_xcb_get_window_attributes_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_destroy_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_destroy_window_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_destroy_window_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_destroy_window_request_t = Struct_xcb_destroy_window_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_destroy_subwindows_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_destroy_subwindows_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_destroy_subwindows_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_destroy_subwindows_request_t =
    Struct_xcb_destroy_subwindows_request_t;
pub type Enum_xcb_set_mode_t = ::libc::c_uint;
pub const XCB_SET_MODE_INSERT: ::libc::c_uint = 0;
pub const XCB_SET_MODE_DELETE: ::libc::c_uint = 1;
pub type xcb_set_mode_t = Enum_xcb_set_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_save_set_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_change_save_set_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_change_save_set_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_save_set_request_t = Struct_xcb_change_save_set_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_reparent_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_reparent_window_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_reparent_window_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_reparent_window_request_t = Struct_xcb_reparent_window_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_map_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_map_window_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_map_window_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_map_window_request_t = Struct_xcb_map_window_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_map_subwindows_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_map_subwindows_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_map_subwindows_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_map_subwindows_request_t = Struct_xcb_map_subwindows_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_unmap_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_unmap_window_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_unmap_window_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_unmap_window_request_t = Struct_xcb_unmap_window_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_unmap_subwindows_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_unmap_subwindows_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_unmap_subwindows_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_unmap_subwindows_request_t =
    Struct_xcb_unmap_subwindows_request_t;
pub type Enum_xcb_config_window_t = ::libc::c_uint;
pub const XCB_CONFIG_WINDOW_X: ::libc::c_uint = 1;
pub const XCB_CONFIG_WINDOW_Y: ::libc::c_uint = 2;
pub const XCB_CONFIG_WINDOW_WIDTH: ::libc::c_uint = 4;
pub const XCB_CONFIG_WINDOW_HEIGHT: ::libc::c_uint = 8;
pub const XCB_CONFIG_WINDOW_BORDER_WIDTH: ::libc::c_uint = 16;
pub const XCB_CONFIG_WINDOW_SIBLING: ::libc::c_uint = 32;
pub const XCB_CONFIG_WINDOW_STACK_MODE: ::libc::c_uint = 64;
pub type xcb_config_window_t = Enum_xcb_config_window_t;
pub type Enum_xcb_stack_mode_t = ::libc::c_uint;
pub const XCB_STACK_MODE_ABOVE: ::libc::c_uint = 0;
pub const XCB_STACK_MODE_BELOW: ::libc::c_uint = 1;
pub const XCB_STACK_MODE_TOP_IF: ::libc::c_uint = 2;
pub const XCB_STACK_MODE_BOTTOM_IF: ::libc::c_uint = 3;
pub const XCB_STACK_MODE_OPPOSITE: ::libc::c_uint = 4;
pub type xcb_stack_mode_t = Enum_xcb_stack_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_configure_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub value_mask: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_configure_window_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_configure_window_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_configure_window_request_t =
    Struct_xcb_configure_window_request_t;
pub type Enum_xcb_circulate_t = ::libc::c_uint;
pub const XCB_CIRCULATE_RAISE_LOWEST: ::libc::c_uint = 0;
pub const XCB_CIRCULATE_LOWER_HIGHEST: ::libc::c_uint = 1;
pub type xcb_circulate_t = Enum_xcb_circulate_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_circulate_window_request_t {
    pub major_opcode: uint8_t,
    pub direction: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_circulate_window_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_circulate_window_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_circulate_window_request_t =
    Struct_xcb_circulate_window_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_geometry_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_geometry_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_geometry_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_geometry_cookie_t = Struct_xcb_get_geometry_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_geometry_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
}
impl ::std::clone::Clone for Struct_xcb_get_geometry_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_geometry_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_geometry_request_t = Struct_xcb_get_geometry_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_geometry_reply_t {
    pub response_type: uint8_t,
    pub depth: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub root: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_get_geometry_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_geometry_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_geometry_reply_t = Struct_xcb_get_geometry_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_tree_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_query_tree_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_tree_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_tree_cookie_t = Struct_xcb_query_tree_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_tree_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_query_tree_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_tree_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_tree_request_t = Struct_xcb_query_tree_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_tree_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub root: xcb_window_t,
    pub parent: xcb_window_t,
    pub children_len: uint16_t,
    pub pad1: [uint8_t; 14usize],
}
impl ::std::clone::Clone for Struct_xcb_query_tree_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_tree_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_tree_reply_t = Struct_xcb_query_tree_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_intern_atom_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_intern_atom_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_intern_atom_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_intern_atom_cookie_t = Struct_xcb_intern_atom_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_intern_atom_request_t {
    pub major_opcode: uint8_t,
    pub only_if_exists: uint8_t,
    pub length: uint16_t,
    pub name_len: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_intern_atom_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_intern_atom_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_intern_atom_request_t = Struct_xcb_intern_atom_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_intern_atom_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub atom: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_intern_atom_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_intern_atom_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_intern_atom_reply_t = Struct_xcb_intern_atom_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_atom_name_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_atom_name_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_atom_name_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_atom_name_cookie_t = Struct_xcb_get_atom_name_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_atom_name_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub atom: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_get_atom_name_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_atom_name_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_atom_name_request_t = Struct_xcb_get_atom_name_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_atom_name_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_get_atom_name_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_atom_name_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_atom_name_reply_t = Struct_xcb_get_atom_name_reply_t;
pub type Enum_xcb_prop_mode_t = ::libc::c_uint;
pub const XCB_PROP_MODE_REPLACE: ::libc::c_uint = 0;
pub const XCB_PROP_MODE_PREPEND: ::libc::c_uint = 1;
pub const XCB_PROP_MODE_APPEND: ::libc::c_uint = 2;
pub type xcb_prop_mode_t = Enum_xcb_prop_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_property_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub format: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub data_len: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_change_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_change_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_property_request_t = Struct_xcb_change_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_delete_property_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_delete_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_delete_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_delete_property_request_t = Struct_xcb_delete_property_request_t;
pub type Enum_xcb_get_property_type_t = ::libc::c_uint;
pub const XCB_GET_PROPERTY_TYPE_ANY: ::libc::c_uint = 0;
pub type xcb_get_property_type_t = Enum_xcb_get_property_type_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_property_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_property_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_property_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_property_cookie_t = Struct_xcb_get_property_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_property_request_t {
    pub major_opcode: uint8_t,
    pub _delete: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub long_offset: uint32_t,
    pub long_length: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_get_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_property_request_t = Struct_xcb_get_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_property_reply_t {
    pub response_type: uint8_t,
    pub format: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub _type: xcb_atom_t,
    pub bytes_after: uint32_t,
    pub value_len: uint32_t,
    pub pad0: [uint8_t; 12usize],
}
impl ::std::clone::Clone for Struct_xcb_get_property_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_property_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_property_reply_t = Struct_xcb_get_property_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_properties_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_list_properties_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_properties_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_properties_cookie_t = Struct_xcb_list_properties_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_properties_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_list_properties_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_properties_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_properties_request_t = Struct_xcb_list_properties_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_properties_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub atoms_len: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_list_properties_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_properties_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_properties_reply_t = Struct_xcb_list_properties_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_selection_owner_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
    pub time: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_set_selection_owner_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_selection_owner_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_selection_owner_request_t =
    Struct_xcb_set_selection_owner_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_selection_owner_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_selection_owner_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_selection_owner_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_selection_owner_cookie_t =
    Struct_xcb_get_selection_owner_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_selection_owner_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub selection: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_get_selection_owner_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_selection_owner_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_selection_owner_request_t =
    Struct_xcb_get_selection_owner_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_selection_owner_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub owner: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_get_selection_owner_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_selection_owner_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_selection_owner_reply_t =
    Struct_xcb_get_selection_owner_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_convert_selection_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
    pub time: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_convert_selection_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_convert_selection_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_convert_selection_request_t =
    Struct_xcb_convert_selection_request_t;
pub type Enum_xcb_send_event_dest_t = ::libc::c_uint;
pub const XCB_SEND_EVENT_DEST_POINTER_WINDOW: ::libc::c_uint = 0;
pub const XCB_SEND_EVENT_DEST_ITEM_FOCUS: ::libc::c_uint = 1;
pub type xcb_send_event_dest_t = Enum_xcb_send_event_dest_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_send_event_request_t {
    pub major_opcode: uint8_t,
    pub propagate: uint8_t,
    pub length: uint16_t,
    pub destination: xcb_window_t,
    pub event_mask: uint32_t,
    pub event: [::libc::c_char; 32usize],
}
impl ::std::clone::Clone for Struct_xcb_send_event_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_send_event_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_send_event_request_t = Struct_xcb_send_event_request_t;
pub type Enum_xcb_grab_mode_t = ::libc::c_uint;
pub const XCB_GRAB_MODE_SYNC: ::libc::c_uint = 0;
pub const XCB_GRAB_MODE_ASYNC: ::libc::c_uint = 1;
pub type xcb_grab_mode_t = Enum_xcb_grab_mode_t;
pub type Enum_xcb_grab_status_t = ::libc::c_uint;
pub const XCB_GRAB_STATUS_SUCCESS: ::libc::c_uint = 0;
pub const XCB_GRAB_STATUS_ALREADY_GRABBED: ::libc::c_uint = 1;
pub const XCB_GRAB_STATUS_INVALID_TIME: ::libc::c_uint = 2;
pub const XCB_GRAB_STATUS_NOT_VIEWABLE: ::libc::c_uint = 3;
pub const XCB_GRAB_STATUS_FROZEN: ::libc::c_uint = 4;
pub type xcb_grab_status_t = Enum_xcb_grab_status_t;
pub type Enum_xcb_cursor_enum_t = ::libc::c_uint;
pub const XCB_CURSOR_NONE: ::libc::c_uint = 0;
pub type xcb_cursor_enum_t = Enum_xcb_cursor_enum_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_pointer_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_grab_pointer_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_pointer_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_pointer_cookie_t = Struct_xcb_grab_pointer_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_pointer_request_t {
    pub major_opcode: uint8_t,
    pub owner_events: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub event_mask: uint16_t,
    pub pointer_mode: uint8_t,
    pub keyboard_mode: uint8_t,
    pub confine_to: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub time: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_grab_pointer_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_pointer_request_t = Struct_xcb_grab_pointer_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_pointer_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_grab_pointer_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_pointer_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_pointer_reply_t = Struct_xcb_grab_pointer_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_ungrab_pointer_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_ungrab_pointer_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_ungrab_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_ungrab_pointer_request_t = Struct_xcb_ungrab_pointer_request_t;
pub type Enum_xcb_button_index_t = ::libc::c_uint;
pub const XCB_BUTTON_INDEX_ANY: ::libc::c_uint = 0;
pub const XCB_BUTTON_INDEX_1: ::libc::c_uint = 1;
pub const XCB_BUTTON_INDEX_2: ::libc::c_uint = 2;
pub const XCB_BUTTON_INDEX_3: ::libc::c_uint = 3;
pub const XCB_BUTTON_INDEX_4: ::libc::c_uint = 4;
pub const XCB_BUTTON_INDEX_5: ::libc::c_uint = 5;
pub type xcb_button_index_t = Enum_xcb_button_index_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_button_request_t {
    pub major_opcode: uint8_t,
    pub owner_events: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub event_mask: uint16_t,
    pub pointer_mode: uint8_t,
    pub keyboard_mode: uint8_t,
    pub confine_to: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub button: uint8_t,
    pub pad0: uint8_t,
    pub modifiers: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_grab_button_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_button_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_button_request_t = Struct_xcb_grab_button_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_ungrab_button_request_t {
    pub major_opcode: uint8_t,
    pub button: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub modifiers: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_ungrab_button_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_ungrab_button_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_ungrab_button_request_t = Struct_xcb_ungrab_button_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_active_pointer_grab_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cursor: xcb_cursor_t,
    pub time: xcb_timestamp_t,
    pub event_mask: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_change_active_pointer_grab_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_change_active_pointer_grab_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_active_pointer_grab_request_t =
    Struct_xcb_change_active_pointer_grab_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_keyboard_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_grab_keyboard_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_keyboard_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_keyboard_cookie_t = Struct_xcb_grab_keyboard_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_keyboard_request_t {
    pub major_opcode: uint8_t,
    pub owner_events: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub pointer_mode: uint8_t,
    pub keyboard_mode: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_grab_keyboard_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_keyboard_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_keyboard_request_t = Struct_xcb_grab_keyboard_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_keyboard_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_grab_keyboard_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_keyboard_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_keyboard_reply_t = Struct_xcb_grab_keyboard_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_ungrab_keyboard_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_ungrab_keyboard_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_ungrab_keyboard_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_ungrab_keyboard_request_t = Struct_xcb_ungrab_keyboard_request_t;
pub type Enum_xcb_grab_t = ::libc::c_uint;
pub const XCB_GRAB_ANY: ::libc::c_uint = 0;
pub type xcb_grab_t = Enum_xcb_grab_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_key_request_t {
    pub major_opcode: uint8_t,
    pub owner_events: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub modifiers: uint16_t,
    pub key: xcb_keycode_t,
    pub pointer_mode: uint8_t,
    pub keyboard_mode: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_grab_key_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_key_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_key_request_t = Struct_xcb_grab_key_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_ungrab_key_request_t {
    pub major_opcode: uint8_t,
    pub key: xcb_keycode_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub modifiers: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_ungrab_key_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_ungrab_key_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_ungrab_key_request_t = Struct_xcb_ungrab_key_request_t;
pub type Enum_xcb_allow_t = ::libc::c_uint;
pub const XCB_ALLOW_ASYNC_POINTER: ::libc::c_uint = 0;
pub const XCB_ALLOW_SYNC_POINTER: ::libc::c_uint = 1;
pub const XCB_ALLOW_REPLAY_POINTER: ::libc::c_uint = 2;
pub const XCB_ALLOW_ASYNC_KEYBOARD: ::libc::c_uint = 3;
pub const XCB_ALLOW_SYNC_KEYBOARD: ::libc::c_uint = 4;
pub const XCB_ALLOW_REPLAY_KEYBOARD: ::libc::c_uint = 5;
pub const XCB_ALLOW_ASYNC_BOTH: ::libc::c_uint = 6;
pub const XCB_ALLOW_SYNC_BOTH: ::libc::c_uint = 7;
pub type xcb_allow_t = Enum_xcb_allow_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_allow_events_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_allow_events_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_allow_events_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_allow_events_request_t = Struct_xcb_allow_events_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_grab_server_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_grab_server_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_grab_server_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_grab_server_request_t = Struct_xcb_grab_server_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_ungrab_server_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_ungrab_server_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_ungrab_server_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_ungrab_server_request_t = Struct_xcb_ungrab_server_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_pointer_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_query_pointer_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_pointer_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_pointer_cookie_t = Struct_xcb_query_pointer_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_pointer_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_query_pointer_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_pointer_request_t = Struct_xcb_query_pointer_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_pointer_reply_t {
    pub response_type: uint8_t,
    pub same_screen: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub root: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub win_x: int16_t,
    pub win_y: int16_t,
    pub mask: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_query_pointer_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_pointer_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_pointer_reply_t = Struct_xcb_query_pointer_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_timecoord_t {
    pub time: xcb_timestamp_t,
    pub x: int16_t,
    pub y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_timecoord_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_timecoord_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_timecoord_t = Struct_xcb_timecoord_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_timecoord_iterator_t {
    pub data: *mut xcb_timecoord_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_timecoord_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_timecoord_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_timecoord_iterator_t = Struct_xcb_timecoord_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_motion_events_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_motion_events_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_motion_events_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_motion_events_cookie_t =
    Struct_xcb_get_motion_events_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_motion_events_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub start: xcb_timestamp_t,
    pub stop: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_get_motion_events_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_motion_events_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_motion_events_request_t =
    Struct_xcb_get_motion_events_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_motion_events_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub events_len: uint32_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_get_motion_events_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_motion_events_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_motion_events_reply_t = Struct_xcb_get_motion_events_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_translate_coordinates_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_translate_coordinates_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_translate_coordinates_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_translate_coordinates_cookie_t =
    Struct_xcb_translate_coordinates_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_translate_coordinates_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_window: xcb_window_t,
    pub dst_window: xcb_window_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_translate_coordinates_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_translate_coordinates_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_translate_coordinates_request_t =
    Struct_xcb_translate_coordinates_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_translate_coordinates_reply_t {
    pub response_type: uint8_t,
    pub same_screen: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub child: xcb_window_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_translate_coordinates_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_translate_coordinates_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_translate_coordinates_reply_t =
    Struct_xcb_translate_coordinates_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_warp_pointer_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_window: xcb_window_t,
    pub dst_window: xcb_window_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
    pub src_width: uint16_t,
    pub src_height: uint16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_warp_pointer_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_warp_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_warp_pointer_request_t = Struct_xcb_warp_pointer_request_t;
pub type Enum_xcb_input_focus_t = ::libc::c_uint;
pub const XCB_INPUT_FOCUS_NONE: ::libc::c_uint = 0;
pub const XCB_INPUT_FOCUS_POINTER_ROOT: ::libc::c_uint = 1;
pub const XCB_INPUT_FOCUS_PARENT: ::libc::c_uint = 2;
pub const XCB_INPUT_FOCUS_FOLLOW_KEYBOARD: ::libc::c_uint = 3;
pub type xcb_input_focus_t = Enum_xcb_input_focus_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_input_focus_request_t {
    pub major_opcode: uint8_t,
    pub revert_to: uint8_t,
    pub length: uint16_t,
    pub focus: xcb_window_t,
    pub time: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_set_input_focus_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_input_focus_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_input_focus_request_t = Struct_xcb_set_input_focus_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_input_focus_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_input_focus_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_input_focus_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_input_focus_cookie_t = Struct_xcb_get_input_focus_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_input_focus_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_get_input_focus_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_input_focus_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_input_focus_request_t = Struct_xcb_get_input_focus_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_input_focus_reply_t {
    pub response_type: uint8_t,
    pub revert_to: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub focus: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_get_input_focus_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_input_focus_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_input_focus_reply_t = Struct_xcb_get_input_focus_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_keymap_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_query_keymap_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_keymap_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_keymap_cookie_t = Struct_xcb_query_keymap_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_keymap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_query_keymap_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_keymap_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_keymap_request_t = Struct_xcb_query_keymap_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_keymap_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub keys: [uint8_t; 32usize],
}
impl ::std::clone::Clone for Struct_xcb_query_keymap_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_keymap_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_keymap_reply_t = Struct_xcb_query_keymap_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_open_font_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub fid: xcb_font_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_open_font_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_open_font_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_open_font_request_t = Struct_xcb_open_font_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_close_font_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub font: xcb_font_t,
}
impl ::std::clone::Clone for Struct_xcb_close_font_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_close_font_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_close_font_request_t = Struct_xcb_close_font_request_t;
pub type Enum_xcb_font_draw_t = ::libc::c_uint;
pub const XCB_FONT_DRAW_LEFT_TO_RIGHT: ::libc::c_uint = 0;
pub const XCB_FONT_DRAW_RIGHT_TO_LEFT: ::libc::c_uint = 1;
pub type xcb_font_draw_t = Enum_xcb_font_draw_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_fontprop_t {
    pub name: xcb_atom_t,
    pub value: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_fontprop_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_fontprop_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_fontprop_t = Struct_xcb_fontprop_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_fontprop_iterator_t {
    pub data: *mut xcb_fontprop_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_fontprop_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_fontprop_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_fontprop_iterator_t = Struct_xcb_fontprop_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_charinfo_t {
    pub left_side_bearing: int16_t,
    pub right_side_bearing: int16_t,
    pub character_width: int16_t,
    pub ascent: int16_t,
    pub descent: int16_t,
    pub attributes: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_charinfo_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_charinfo_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_charinfo_t = Struct_xcb_charinfo_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_charinfo_iterator_t {
    pub data: *mut xcb_charinfo_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_charinfo_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_charinfo_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_charinfo_iterator_t = Struct_xcb_charinfo_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_font_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_query_font_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_font_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_font_cookie_t = Struct_xcb_query_font_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_font_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub font: xcb_fontable_t,
}
impl ::std::clone::Clone for Struct_xcb_query_font_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_font_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_font_request_t = Struct_xcb_query_font_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_font_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub min_bounds: xcb_charinfo_t,
    pub pad1: [uint8_t; 4usize],
    pub max_bounds: xcb_charinfo_t,
    pub pad2: [uint8_t; 4usize],
    pub min_char_or_byte2: uint16_t,
    pub max_char_or_byte2: uint16_t,
    pub default_char: uint16_t,
    pub properties_len: uint16_t,
    pub draw_direction: uint8_t,
    pub min_byte1: uint8_t,
    pub max_byte1: uint8_t,
    pub all_chars_exist: uint8_t,
    pub font_ascent: int16_t,
    pub font_descent: int16_t,
    pub char_infos_len: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_query_font_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_font_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_font_reply_t = Struct_xcb_query_font_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_text_extents_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_query_text_extents_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_text_extents_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_text_extents_cookie_t =
    Struct_xcb_query_text_extents_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_text_extents_request_t {
    pub major_opcode: uint8_t,
    pub odd_length: uint8_t,
    pub length: uint16_t,
    pub font: xcb_fontable_t,
}
impl ::std::clone::Clone for Struct_xcb_query_text_extents_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_text_extents_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_text_extents_request_t =
    Struct_xcb_query_text_extents_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_text_extents_reply_t {
    pub response_type: uint8_t,
    pub draw_direction: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub font_ascent: int16_t,
    pub font_descent: int16_t,
    pub overall_ascent: int16_t,
    pub overall_descent: int16_t,
    pub overall_width: int32_t,
    pub overall_left: int32_t,
    pub overall_right: int32_t,
}
impl ::std::clone::Clone for Struct_xcb_query_text_extents_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_text_extents_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_text_extents_reply_t =
    Struct_xcb_query_text_extents_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_str_t {
    pub name_len: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_str_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_str_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_str_t = Struct_xcb_str_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_str_iterator_t {
    pub data: *mut xcb_str_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_str_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_str_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_str_iterator_t = Struct_xcb_str_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_fonts_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_list_fonts_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_fonts_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_fonts_cookie_t = Struct_xcb_list_fonts_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_fonts_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub max_names: uint16_t,
    pub pattern_len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_list_fonts_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_fonts_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_fonts_request_t = Struct_xcb_list_fonts_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_fonts_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub names_len: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_list_fonts_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_fonts_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_fonts_reply_t = Struct_xcb_list_fonts_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_fonts_with_info_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_list_fonts_with_info_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_fonts_with_info_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_fonts_with_info_cookie_t =
    Struct_xcb_list_fonts_with_info_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_fonts_with_info_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub max_names: uint16_t,
    pub pattern_len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_list_fonts_with_info_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_fonts_with_info_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_fonts_with_info_request_t =
    Struct_xcb_list_fonts_with_info_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_fonts_with_info_reply_t {
    pub response_type: uint8_t,
    pub name_len: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub min_bounds: xcb_charinfo_t,
    pub pad0: [uint8_t; 4usize],
    pub max_bounds: xcb_charinfo_t,
    pub pad1: [uint8_t; 4usize],
    pub min_char_or_byte2: uint16_t,
    pub max_char_or_byte2: uint16_t,
    pub default_char: uint16_t,
    pub properties_len: uint16_t,
    pub draw_direction: uint8_t,
    pub min_byte1: uint8_t,
    pub max_byte1: uint8_t,
    pub all_chars_exist: uint8_t,
    pub font_ascent: int16_t,
    pub font_descent: int16_t,
    pub replies_hint: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_list_fonts_with_info_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_fonts_with_info_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_fonts_with_info_reply_t =
    Struct_xcb_list_fonts_with_info_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_font_path_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub font_qty: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_set_font_path_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_font_path_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_font_path_request_t = Struct_xcb_set_font_path_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_font_path_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_font_path_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_font_path_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_font_path_cookie_t = Struct_xcb_get_font_path_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_font_path_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_get_font_path_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_font_path_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_font_path_request_t = Struct_xcb_get_font_path_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_font_path_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub path_len: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_get_font_path_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_font_path_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_font_path_reply_t = Struct_xcb_get_font_path_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_create_pixmap_request_t {
    pub major_opcode: uint8_t,
    pub depth: uint8_t,
    pub length: uint16_t,
    pub pid: xcb_pixmap_t,
    pub drawable: xcb_drawable_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_create_pixmap_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_create_pixmap_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_create_pixmap_request_t = Struct_xcb_create_pixmap_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_free_pixmap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub pixmap: xcb_pixmap_t,
}
impl ::std::clone::Clone for Struct_xcb_free_pixmap_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_free_pixmap_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_free_pixmap_request_t = Struct_xcb_free_pixmap_request_t;
pub type Enum_xcb_gc_t = ::libc::c_uint;
pub const XCB_GC_FUNCTION: ::libc::c_uint = 1;
pub const XCB_GC_PLANE_MASK: ::libc::c_uint = 2;
pub const XCB_GC_FOREGROUND: ::libc::c_uint = 4;
pub const XCB_GC_BACKGROUND: ::libc::c_uint = 8;
pub const XCB_GC_LINE_WIDTH: ::libc::c_uint = 16;
pub const XCB_GC_LINE_STYLE: ::libc::c_uint = 32;
pub const XCB_GC_CAP_STYLE: ::libc::c_uint = 64;
pub const XCB_GC_JOIN_STYLE: ::libc::c_uint = 128;
pub const XCB_GC_FILL_STYLE: ::libc::c_uint = 256;
pub const XCB_GC_FILL_RULE: ::libc::c_uint = 512;
pub const XCB_GC_TILE: ::libc::c_uint = 1024;
pub const XCB_GC_STIPPLE: ::libc::c_uint = 2048;
pub const XCB_GC_TILE_STIPPLE_ORIGIN_X: ::libc::c_uint = 4096;
pub const XCB_GC_TILE_STIPPLE_ORIGIN_Y: ::libc::c_uint = 8192;
pub const XCB_GC_FONT: ::libc::c_uint = 16384;
pub const XCB_GC_SUBWINDOW_MODE: ::libc::c_uint = 32768;
pub const XCB_GC_GRAPHICS_EXPOSURES: ::libc::c_uint = 65536;
pub const XCB_GC_CLIP_ORIGIN_X: ::libc::c_uint = 131072;
pub const XCB_GC_CLIP_ORIGIN_Y: ::libc::c_uint = 262144;
pub const XCB_GC_CLIP_MASK: ::libc::c_uint = 524288;
pub const XCB_GC_DASH_OFFSET: ::libc::c_uint = 1048576;
pub const XCB_GC_DASH_LIST: ::libc::c_uint = 2097152;
pub const XCB_GC_ARC_MODE: ::libc::c_uint = 4194304;
pub type xcb_gc_t = Enum_xcb_gc_t;
pub type Enum_xcb_gx_t = ::libc::c_uint;
pub const XCB_GX_CLEAR: ::libc::c_uint = 0;
pub const XCB_GX_AND: ::libc::c_uint = 1;
pub const XCB_GX_AND_REVERSE: ::libc::c_uint = 2;
pub const XCB_GX_COPY: ::libc::c_uint = 3;
pub const XCB_GX_AND_INVERTED: ::libc::c_uint = 4;
pub const XCB_GX_NOOP: ::libc::c_uint = 5;
pub const XCB_GX_XOR: ::libc::c_uint = 6;
pub const XCB_GX_OR: ::libc::c_uint = 7;
pub const XCB_GX_NOR: ::libc::c_uint = 8;
pub const XCB_GX_EQUIV: ::libc::c_uint = 9;
pub const XCB_GX_INVERT: ::libc::c_uint = 10;
pub const XCB_GX_OR_REVERSE: ::libc::c_uint = 11;
pub const XCB_GX_COPY_INVERTED: ::libc::c_uint = 12;
pub const XCB_GX_OR_INVERTED: ::libc::c_uint = 13;
pub const XCB_GX_NAND: ::libc::c_uint = 14;
pub const XCB_GX_SET: ::libc::c_uint = 15;
pub type xcb_gx_t = Enum_xcb_gx_t;
pub type Enum_xcb_line_style_t = ::libc::c_uint;
pub const XCB_LINE_STYLE_SOLID: ::libc::c_uint = 0;
pub const XCB_LINE_STYLE_ON_OFF_DASH: ::libc::c_uint = 1;
pub const XCB_LINE_STYLE_DOUBLE_DASH: ::libc::c_uint = 2;
pub type xcb_line_style_t = Enum_xcb_line_style_t;
pub type Enum_xcb_cap_style_t = ::libc::c_uint;
pub const XCB_CAP_STYLE_NOT_LAST: ::libc::c_uint = 0;
pub const XCB_CAP_STYLE_BUTT: ::libc::c_uint = 1;
pub const XCB_CAP_STYLE_ROUND: ::libc::c_uint = 2;
pub const XCB_CAP_STYLE_PROJECTING: ::libc::c_uint = 3;
pub type xcb_cap_style_t = Enum_xcb_cap_style_t;
pub type Enum_xcb_join_style_t = ::libc::c_uint;
pub const XCB_JOIN_STYLE_MITER: ::libc::c_uint = 0;
pub const XCB_JOIN_STYLE_ROUND: ::libc::c_uint = 1;
pub const XCB_JOIN_STYLE_BEVEL: ::libc::c_uint = 2;
pub type xcb_join_style_t = Enum_xcb_join_style_t;
pub type Enum_xcb_fill_style_t = ::libc::c_uint;
pub const XCB_FILL_STYLE_SOLID: ::libc::c_uint = 0;
pub const XCB_FILL_STYLE_TILED: ::libc::c_uint = 1;
pub const XCB_FILL_STYLE_STIPPLED: ::libc::c_uint = 2;
pub const XCB_FILL_STYLE_OPAQUE_STIPPLED: ::libc::c_uint = 3;
pub type xcb_fill_style_t = Enum_xcb_fill_style_t;
pub type Enum_xcb_fill_rule_t = ::libc::c_uint;
pub const XCB_FILL_RULE_EVEN_ODD: ::libc::c_uint = 0;
pub const XCB_FILL_RULE_WINDING: ::libc::c_uint = 1;
pub type xcb_fill_rule_t = Enum_xcb_fill_rule_t;
pub type Enum_xcb_subwindow_mode_t = ::libc::c_uint;
pub const XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN: ::libc::c_uint = 0;
pub const XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS: ::libc::c_uint = 1;
pub type xcb_subwindow_mode_t = Enum_xcb_subwindow_mode_t;
pub type Enum_xcb_arc_mode_t = ::libc::c_uint;
pub const XCB_ARC_MODE_CHORD: ::libc::c_uint = 0;
pub const XCB_ARC_MODE_PIE_SLICE: ::libc::c_uint = 1;
pub type xcb_arc_mode_t = Enum_xcb_arc_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_create_gc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cid: xcb_gcontext_t,
    pub drawable: xcb_drawable_t,
    pub value_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_create_gc_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_create_gc_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_create_gc_request_t = Struct_xcb_create_gc_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_gc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
    pub value_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_change_gc_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_change_gc_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_gc_request_t = Struct_xcb_change_gc_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_copy_gc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_gc: xcb_gcontext_t,
    pub dst_gc: xcb_gcontext_t,
    pub value_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_copy_gc_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_copy_gc_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_copy_gc_request_t = Struct_xcb_copy_gc_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_dashes_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
    pub dash_offset: uint16_t,
    pub dashes_len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_set_dashes_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_dashes_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_dashes_request_t = Struct_xcb_set_dashes_request_t;
pub type Enum_xcb_clip_ordering_t = ::libc::c_uint;
pub const XCB_CLIP_ORDERING_UNSORTED: ::libc::c_uint = 0;
pub const XCB_CLIP_ORDERING_Y_SORTED: ::libc::c_uint = 1;
pub const XCB_CLIP_ORDERING_YX_SORTED: ::libc::c_uint = 2;
pub const XCB_CLIP_ORDERING_YX_BANDED: ::libc::c_uint = 3;
pub type xcb_clip_ordering_t = Enum_xcb_clip_ordering_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_clip_rectangles_request_t {
    pub major_opcode: uint8_t,
    pub ordering: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
    pub clip_x_origin: int16_t,
    pub clip_y_origin: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_set_clip_rectangles_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_clip_rectangles_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_clip_rectangles_request_t =
    Struct_xcb_set_clip_rectangles_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_free_gc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_free_gc_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_free_gc_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_free_gc_request_t = Struct_xcb_free_gc_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_clear_area_request_t {
    pub major_opcode: uint8_t,
    pub exposures: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_clear_area_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_clear_area_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_clear_area_request_t = Struct_xcb_clear_area_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_copy_area_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_drawable: xcb_drawable_t,
    pub dst_drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_copy_area_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_copy_area_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_copy_area_request_t = Struct_xcb_copy_area_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_copy_plane_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_drawable: xcb_drawable_t,
    pub dst_drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub bit_plane: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_copy_plane_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_copy_plane_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_copy_plane_request_t = Struct_xcb_copy_plane_request_t;
pub type Enum_xcb_coord_mode_t = ::libc::c_uint;
pub const XCB_COORD_MODE_ORIGIN: ::libc::c_uint = 0;
pub const XCB_COORD_MODE_PREVIOUS: ::libc::c_uint = 1;
pub type xcb_coord_mode_t = Enum_xcb_coord_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_point_request_t {
    pub major_opcode: uint8_t,
    pub coordinate_mode: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_point_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_point_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_point_request_t = Struct_xcb_poly_point_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_line_request_t {
    pub major_opcode: uint8_t,
    pub coordinate_mode: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_line_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_line_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_line_request_t = Struct_xcb_poly_line_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_segment_t {
    pub x1: int16_t,
    pub y1: int16_t,
    pub x2: int16_t,
    pub y2: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_segment_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_segment_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_segment_t = Struct_xcb_segment_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_segment_iterator_t {
    pub data: *mut xcb_segment_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_segment_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_segment_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_segment_iterator_t = Struct_xcb_segment_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_segment_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_segment_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_segment_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_segment_request_t = Struct_xcb_poly_segment_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_rectangle_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_rectangle_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_rectangle_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_rectangle_request_t = Struct_xcb_poly_rectangle_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_arc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_arc_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_arc_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_arc_request_t = Struct_xcb_poly_arc_request_t;
pub type Enum_xcb_poly_shape_t = ::libc::c_uint;
pub const XCB_POLY_SHAPE_COMPLEX: ::libc::c_uint = 0;
pub const XCB_POLY_SHAPE_NONCONVEX: ::libc::c_uint = 1;
pub const XCB_POLY_SHAPE_CONVEX: ::libc::c_uint = 2;
pub type xcb_poly_shape_t = Enum_xcb_poly_shape_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_fill_poly_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub shape: uint8_t,
    pub coordinate_mode: uint8_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_fill_poly_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_fill_poly_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_fill_poly_request_t = Struct_xcb_fill_poly_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_fill_rectangle_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_fill_rectangle_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_fill_rectangle_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_fill_rectangle_request_t =
    Struct_xcb_poly_fill_rectangle_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_fill_arc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_fill_arc_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_fill_arc_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_fill_arc_request_t = Struct_xcb_poly_fill_arc_request_t;
pub type Enum_xcb_image_format_t = ::libc::c_uint;
pub const XCB_IMAGE_FORMAT_XY_BITMAP: ::libc::c_uint = 0;
pub const XCB_IMAGE_FORMAT_XY_PIXMAP: ::libc::c_uint = 1;
pub const XCB_IMAGE_FORMAT_Z_PIXMAP: ::libc::c_uint = 2;
pub type xcb_image_format_t = Enum_xcb_image_format_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_put_image_request_t {
    pub major_opcode: uint8_t,
    pub format: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
    pub left_pad: uint8_t,
    pub depth: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_put_image_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_put_image_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_put_image_request_t = Struct_xcb_put_image_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_image_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_image_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_image_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_image_cookie_t = Struct_xcb_get_image_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_image_request_t {
    pub major_opcode: uint8_t,
    pub format: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub plane_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_get_image_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_image_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_image_request_t = Struct_xcb_get_image_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_image_reply_t {
    pub response_type: uint8_t,
    pub depth: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub visual: xcb_visualid_t,
    pub pad0: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_get_image_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_image_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_image_reply_t = Struct_xcb_get_image_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_text_8_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: int16_t,
    pub y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_text_8_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_text_8_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_text_8_request_t = Struct_xcb_poly_text_8_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_poly_text_16_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: int16_t,
    pub y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_poly_text_16_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_poly_text_16_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_poly_text_16_request_t = Struct_xcb_poly_text_16_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_image_text_8_request_t {
    pub major_opcode: uint8_t,
    pub string_len: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: int16_t,
    pub y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_image_text_8_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_image_text_8_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_image_text_8_request_t = Struct_xcb_image_text_8_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_image_text_16_request_t {
    pub major_opcode: uint8_t,
    pub string_len: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: int16_t,
    pub y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_image_text_16_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_image_text_16_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_image_text_16_request_t = Struct_xcb_image_text_16_request_t;
pub type Enum_xcb_colormap_alloc_t = ::libc::c_uint;
pub const XCB_COLORMAP_ALLOC_NONE: ::libc::c_uint = 0;
pub const XCB_COLORMAP_ALLOC_ALL: ::libc::c_uint = 1;
pub type xcb_colormap_alloc_t = Enum_xcb_colormap_alloc_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_create_colormap_request_t {
    pub major_opcode: uint8_t,
    pub alloc: uint8_t,
    pub length: uint16_t,
    pub mid: xcb_colormap_t,
    pub window: xcb_window_t,
    pub visual: xcb_visualid_t,
}
impl ::std::clone::Clone for Struct_xcb_create_colormap_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_create_colormap_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_create_colormap_request_t = Struct_xcb_create_colormap_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_free_colormap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
impl ::std::clone::Clone for Struct_xcb_free_colormap_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_free_colormap_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_free_colormap_request_t = Struct_xcb_free_colormap_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_copy_colormap_and_free_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub mid: xcb_colormap_t,
    pub src_cmap: xcb_colormap_t,
}
impl ::std::clone::Clone for Struct_xcb_copy_colormap_and_free_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_copy_colormap_and_free_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_copy_colormap_and_free_request_t =
    Struct_xcb_copy_colormap_and_free_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_install_colormap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
impl ::std::clone::Clone for Struct_xcb_install_colormap_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_install_colormap_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_install_colormap_request_t =
    Struct_xcb_install_colormap_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_uninstall_colormap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
impl ::std::clone::Clone for Struct_xcb_uninstall_colormap_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_uninstall_colormap_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_uninstall_colormap_request_t =
    Struct_xcb_uninstall_colormap_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_installed_colormaps_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_list_installed_colormaps_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_installed_colormaps_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_installed_colormaps_cookie_t =
    Struct_xcb_list_installed_colormaps_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_installed_colormaps_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_list_installed_colormaps_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_installed_colormaps_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_installed_colormaps_request_t =
    Struct_xcb_list_installed_colormaps_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_installed_colormaps_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub cmaps_len: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_list_installed_colormaps_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_installed_colormaps_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_installed_colormaps_reply_t =
    Struct_xcb_list_installed_colormaps_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_cookie_t = Struct_xcb_alloc_color_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_request_t = Struct_xcb_alloc_color_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub pad1: [uint8_t; 2usize],
    pub pixel: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_reply_t = Struct_xcb_alloc_color_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_named_color_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_alloc_named_color_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_named_color_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_named_color_cookie_t =
    Struct_xcb_alloc_named_color_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_named_color_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_alloc_named_color_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_named_color_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_named_color_request_t =
    Struct_xcb_alloc_named_color_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_named_color_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pixel: uint32_t,
    pub exact_red: uint16_t,
    pub exact_green: uint16_t,
    pub exact_blue: uint16_t,
    pub visual_red: uint16_t,
    pub visual_green: uint16_t,
    pub visual_blue: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_alloc_named_color_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_named_color_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_named_color_reply_t = Struct_xcb_alloc_named_color_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_cells_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_cells_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_cells_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_cells_cookie_t =
    Struct_xcb_alloc_color_cells_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_cells_request_t {
    pub major_opcode: uint8_t,
    pub contiguous: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub colors: uint16_t,
    pub planes: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_cells_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_cells_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_cells_request_t =
    Struct_xcb_alloc_color_cells_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_cells_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pixels_len: uint16_t,
    pub masks_len: uint16_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_cells_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_cells_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_cells_reply_t = Struct_xcb_alloc_color_cells_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_planes_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_planes_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_planes_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_planes_cookie_t =
    Struct_xcb_alloc_color_planes_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_planes_request_t {
    pub major_opcode: uint8_t,
    pub contiguous: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub colors: uint16_t,
    pub reds: uint16_t,
    pub greens: uint16_t,
    pub blues: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_planes_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_planes_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_planes_request_t =
    Struct_xcb_alloc_color_planes_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_alloc_color_planes_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pixels_len: uint16_t,
    pub pad1: [uint8_t; 2usize],
    pub red_mask: uint32_t,
    pub green_mask: uint32_t,
    pub blue_mask: uint32_t,
    pub pad2: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_xcb_alloc_color_planes_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_alloc_color_planes_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_alloc_color_planes_reply_t =
    Struct_xcb_alloc_color_planes_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_free_colors_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub plane_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_free_colors_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_free_colors_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_free_colors_request_t = Struct_xcb_free_colors_request_t;
pub type Enum_xcb_color_flag_t = ::libc::c_uint;
pub const XCB_COLOR_FLAG_RED: ::libc::c_uint = 1;
pub const XCB_COLOR_FLAG_GREEN: ::libc::c_uint = 2;
pub const XCB_COLOR_FLAG_BLUE: ::libc::c_uint = 4;
pub type xcb_color_flag_t = Enum_xcb_color_flag_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_coloritem_t {
    pub pixel: uint32_t,
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub flags: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_coloritem_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_coloritem_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_coloritem_t = Struct_xcb_coloritem_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_coloritem_iterator_t {
    pub data: *mut xcb_coloritem_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_coloritem_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_coloritem_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_coloritem_iterator_t = Struct_xcb_coloritem_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_store_colors_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
impl ::std::clone::Clone for Struct_xcb_store_colors_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_store_colors_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_store_colors_request_t = Struct_xcb_store_colors_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_store_named_color_request_t {
    pub major_opcode: uint8_t,
    pub flags: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub pixel: uint32_t,
    pub name_len: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_store_named_color_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_store_named_color_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_store_named_color_request_t =
    Struct_xcb_store_named_color_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_rgb_t {
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_rgb_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_rgb_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_rgb_t = Struct_xcb_rgb_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_rgb_iterator_t {
    pub data: *mut xcb_rgb_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_rgb_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_rgb_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_rgb_iterator_t = Struct_xcb_rgb_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_colors_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_query_colors_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_colors_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_colors_cookie_t = Struct_xcb_query_colors_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_colors_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
impl ::std::clone::Clone for Struct_xcb_query_colors_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_colors_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_colors_request_t = Struct_xcb_query_colors_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_colors_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub colors_len: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_query_colors_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_colors_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_colors_reply_t = Struct_xcb_query_colors_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_lookup_color_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_lookup_color_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_lookup_color_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_lookup_color_cookie_t = Struct_xcb_lookup_color_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_lookup_color_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_lookup_color_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_lookup_color_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_lookup_color_request_t = Struct_xcb_lookup_color_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_lookup_color_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub exact_red: uint16_t,
    pub exact_green: uint16_t,
    pub exact_blue: uint16_t,
    pub visual_red: uint16_t,
    pub visual_green: uint16_t,
    pub visual_blue: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_lookup_color_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_lookup_color_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_lookup_color_reply_t = Struct_xcb_lookup_color_reply_t;
pub type Enum_xcb_pixmap_enum_t = ::libc::c_uint;
pub const XCB_PIXMAP_NONE: ::libc::c_uint = 0;
pub type xcb_pixmap_enum_t = Enum_xcb_pixmap_enum_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_create_cursor_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cid: xcb_cursor_t,
    pub source: xcb_pixmap_t,
    pub mask: xcb_pixmap_t,
    pub fore_red: uint16_t,
    pub fore_green: uint16_t,
    pub fore_blue: uint16_t,
    pub back_red: uint16_t,
    pub back_green: uint16_t,
    pub back_blue: uint16_t,
    pub x: uint16_t,
    pub y: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_create_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_create_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_create_cursor_request_t = Struct_xcb_create_cursor_request_t;
pub type Enum_xcb_font_enum_t = ::libc::c_uint;
pub const XCB_FONT_NONE: ::libc::c_uint = 0;
pub type xcb_font_enum_t = Enum_xcb_font_enum_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_create_glyph_cursor_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cid: xcb_cursor_t,
    pub source_font: xcb_font_t,
    pub mask_font: xcb_font_t,
    pub source_char: uint16_t,
    pub mask_char: uint16_t,
    pub fore_red: uint16_t,
    pub fore_green: uint16_t,
    pub fore_blue: uint16_t,
    pub back_red: uint16_t,
    pub back_green: uint16_t,
    pub back_blue: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_create_glyph_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_create_glyph_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_create_glyph_cursor_request_t =
    Struct_xcb_create_glyph_cursor_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_free_cursor_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cursor: xcb_cursor_t,
}
impl ::std::clone::Clone for Struct_xcb_free_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_free_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_free_cursor_request_t = Struct_xcb_free_cursor_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_recolor_cursor_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cursor: xcb_cursor_t,
    pub fore_red: uint16_t,
    pub fore_green: uint16_t,
    pub fore_blue: uint16_t,
    pub back_red: uint16_t,
    pub back_green: uint16_t,
    pub back_blue: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_recolor_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_recolor_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_recolor_cursor_request_t = Struct_xcb_recolor_cursor_request_t;
pub type Enum_xcb_query_shape_of_t = ::libc::c_uint;
pub const XCB_QUERY_SHAPE_OF_LARGEST_CURSOR: ::libc::c_uint = 0;
pub const XCB_QUERY_SHAPE_OF_FASTEST_TILE: ::libc::c_uint = 1;
pub const XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE: ::libc::c_uint = 2;
pub type xcb_query_shape_of_t = Enum_xcb_query_shape_of_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_best_size_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_query_best_size_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_best_size_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_best_size_cookie_t = Struct_xcb_query_best_size_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_best_size_request_t {
    pub major_opcode: uint8_t,
    pub _class: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_query_best_size_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_best_size_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_best_size_request_t = Struct_xcb_query_best_size_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_best_size_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_query_best_size_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_best_size_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_best_size_reply_t = Struct_xcb_query_best_size_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_extension_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_query_extension_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_extension_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_extension_cookie_t = Struct_xcb_query_extension_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_extension_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_query_extension_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_extension_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_extension_request_t = Struct_xcb_query_extension_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_query_extension_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub present: uint8_t,
    pub major_opcode: uint8_t,
    pub first_event: uint8_t,
    pub first_error: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_query_extension_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_query_extension_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_query_extension_reply_t = Struct_xcb_query_extension_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_extensions_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_list_extensions_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_extensions_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_extensions_cookie_t = Struct_xcb_list_extensions_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_extensions_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_list_extensions_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_extensions_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_extensions_request_t = Struct_xcb_list_extensions_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_extensions_reply_t {
    pub response_type: uint8_t,
    pub names_len: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pad0: [uint8_t; 24usize],
}
impl ::std::clone::Clone for Struct_xcb_list_extensions_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_extensions_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_extensions_reply_t = Struct_xcb_list_extensions_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_keyboard_mapping_request_t {
    pub major_opcode: uint8_t,
    pub keycode_count: uint8_t,
    pub length: uint16_t,
    pub first_keycode: xcb_keycode_t,
    pub keysyms_per_keycode: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_change_keyboard_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_change_keyboard_mapping_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_keyboard_mapping_request_t =
    Struct_xcb_change_keyboard_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_keyboard_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_keyboard_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_keyboard_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_keyboard_mapping_cookie_t =
    Struct_xcb_get_keyboard_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_keyboard_mapping_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub first_keycode: xcb_keycode_t,
    pub count: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_get_keyboard_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_keyboard_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_keyboard_mapping_request_t =
    Struct_xcb_get_keyboard_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_keyboard_mapping_reply_t {
    pub response_type: uint8_t,
    pub keysyms_per_keycode: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pad0: [uint8_t; 24usize],
}
impl ::std::clone::Clone for Struct_xcb_get_keyboard_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_keyboard_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_keyboard_mapping_reply_t =
    Struct_xcb_get_keyboard_mapping_reply_t;
pub type Enum_xcb_kb_t = ::libc::c_uint;
pub const XCB_KB_KEY_CLICK_PERCENT: ::libc::c_uint = 1;
pub const XCB_KB_BELL_PERCENT: ::libc::c_uint = 2;
pub const XCB_KB_BELL_PITCH: ::libc::c_uint = 4;
pub const XCB_KB_BELL_DURATION: ::libc::c_uint = 8;
pub const XCB_KB_LED: ::libc::c_uint = 16;
pub const XCB_KB_LED_MODE: ::libc::c_uint = 32;
pub const XCB_KB_KEY: ::libc::c_uint = 64;
pub const XCB_KB_AUTO_REPEAT_MODE: ::libc::c_uint = 128;
pub type xcb_kb_t = Enum_xcb_kb_t;
pub type Enum_xcb_led_mode_t = ::libc::c_uint;
pub const XCB_LED_MODE_OFF: ::libc::c_uint = 0;
pub const XCB_LED_MODE_ON: ::libc::c_uint = 1;
pub type xcb_led_mode_t = Enum_xcb_led_mode_t;
pub type Enum_xcb_auto_repeat_mode_t = ::libc::c_uint;
pub const XCB_AUTO_REPEAT_MODE_OFF: ::libc::c_uint = 0;
pub const XCB_AUTO_REPEAT_MODE_ON: ::libc::c_uint = 1;
pub const XCB_AUTO_REPEAT_MODE_DEFAULT: ::libc::c_uint = 2;
pub type xcb_auto_repeat_mode_t = Enum_xcb_auto_repeat_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_keyboard_control_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub value_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_change_keyboard_control_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_change_keyboard_control_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_keyboard_control_request_t =
    Struct_xcb_change_keyboard_control_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_keyboard_control_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_keyboard_control_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_keyboard_control_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_keyboard_control_cookie_t =
    Struct_xcb_get_keyboard_control_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_keyboard_control_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_get_keyboard_control_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_keyboard_control_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_keyboard_control_request_t =
    Struct_xcb_get_keyboard_control_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_keyboard_control_reply_t {
    pub response_type: uint8_t,
    pub global_auto_repeat: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub led_mask: uint32_t,
    pub key_click_percent: uint8_t,
    pub bell_percent: uint8_t,
    pub bell_pitch: uint16_t,
    pub bell_duration: uint16_t,
    pub pad0: [uint8_t; 2usize],
    pub auto_repeats: [uint8_t; 32usize],
}
impl ::std::clone::Clone for Struct_xcb_get_keyboard_control_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_keyboard_control_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_keyboard_control_reply_t =
    Struct_xcb_get_keyboard_control_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_bell_request_t {
    pub major_opcode: uint8_t,
    pub percent: int8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_bell_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_bell_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_bell_request_t = Struct_xcb_bell_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_pointer_control_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub acceleration_numerator: int16_t,
    pub acceleration_denominator: int16_t,
    pub threshold: int16_t,
    pub do_acceleration: uint8_t,
    pub do_threshold: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_change_pointer_control_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_change_pointer_control_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_pointer_control_request_t =
    Struct_xcb_change_pointer_control_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_pointer_control_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_pointer_control_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_pointer_control_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_pointer_control_cookie_t =
    Struct_xcb_get_pointer_control_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_pointer_control_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_get_pointer_control_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_pointer_control_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_pointer_control_request_t =
    Struct_xcb_get_pointer_control_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_pointer_control_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub acceleration_numerator: uint16_t,
    pub acceleration_denominator: uint16_t,
    pub threshold: uint16_t,
    pub pad1: [uint8_t; 18usize],
}
impl ::std::clone::Clone for Struct_xcb_get_pointer_control_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_pointer_control_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_pointer_control_reply_t =
    Struct_xcb_get_pointer_control_reply_t;
pub type Enum_xcb_blanking_t = ::libc::c_uint;
pub const XCB_BLANKING_NOT_PREFERRED: ::libc::c_uint = 0;
pub const XCB_BLANKING_PREFERRED: ::libc::c_uint = 1;
pub const XCB_BLANKING_DEFAULT: ::libc::c_uint = 2;
pub type xcb_blanking_t = Enum_xcb_blanking_t;
pub type Enum_xcb_exposures_t = ::libc::c_uint;
pub const XCB_EXPOSURES_NOT_ALLOWED: ::libc::c_uint = 0;
pub const XCB_EXPOSURES_ALLOWED: ::libc::c_uint = 1;
pub const XCB_EXPOSURES_DEFAULT: ::libc::c_uint = 2;
pub type xcb_exposures_t = Enum_xcb_exposures_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_screen_saver_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub timeout: int16_t,
    pub interval: int16_t,
    pub prefer_blanking: uint8_t,
    pub allow_exposures: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_set_screen_saver_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_screen_saver_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_screen_saver_request_t =
    Struct_xcb_set_screen_saver_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_screen_saver_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_screen_saver_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_screen_saver_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_screen_saver_cookie_t = Struct_xcb_get_screen_saver_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_screen_saver_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_get_screen_saver_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_screen_saver_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_screen_saver_request_t =
    Struct_xcb_get_screen_saver_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_screen_saver_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timeout: uint16_t,
    pub interval: uint16_t,
    pub prefer_blanking: uint8_t,
    pub allow_exposures: uint8_t,
    pub pad1: [uint8_t; 18usize],
}
impl ::std::clone::Clone for Struct_xcb_get_screen_saver_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_screen_saver_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_screen_saver_reply_t = Struct_xcb_get_screen_saver_reply_t;
pub type Enum_xcb_host_mode_t = ::libc::c_uint;
pub const XCB_HOST_MODE_INSERT: ::libc::c_uint = 0;
pub const XCB_HOST_MODE_DELETE: ::libc::c_uint = 1;
pub type xcb_host_mode_t = Enum_xcb_host_mode_t;
pub type Enum_xcb_family_t = ::libc::c_uint;
pub const XCB_FAMILY_INTERNET: ::libc::c_uint = 0;
pub const XCB_FAMILY_DECNET: ::libc::c_uint = 1;
pub const XCB_FAMILY_CHAOS: ::libc::c_uint = 2;
pub const XCB_FAMILY_SERVER_INTERPRETED: ::libc::c_uint = 5;
pub const XCB_FAMILY_INTERNET_6: ::libc::c_uint = 6;
pub type xcb_family_t = Enum_xcb_family_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_change_hosts_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
    pub family: uint8_t,
    pub pad0: uint8_t,
    pub address_len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_change_hosts_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_change_hosts_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_change_hosts_request_t = Struct_xcb_change_hosts_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_host_t {
    pub family: uint8_t,
    pub pad0: uint8_t,
    pub address_len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_host_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_host_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_host_t = Struct_xcb_host_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_host_iterator_t {
    pub data: *mut xcb_host_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_host_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_host_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_host_iterator_t = Struct_xcb_host_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_hosts_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_list_hosts_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_hosts_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_hosts_cookie_t = Struct_xcb_list_hosts_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_hosts_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_list_hosts_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_hosts_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_hosts_request_t = Struct_xcb_list_hosts_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_list_hosts_reply_t {
    pub response_type: uint8_t,
    pub mode: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub hosts_len: uint16_t,
    pub pad0: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_list_hosts_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_list_hosts_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_list_hosts_reply_t = Struct_xcb_list_hosts_reply_t;
pub type Enum_xcb_access_control_t = ::libc::c_uint;
pub const XCB_ACCESS_CONTROL_DISABLE: ::libc::c_uint = 0;
pub const XCB_ACCESS_CONTROL_ENABLE: ::libc::c_uint = 1;
pub type xcb_access_control_t = Enum_xcb_access_control_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_access_control_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_set_access_control_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_access_control_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_access_control_request_t =
    Struct_xcb_set_access_control_request_t;
pub type Enum_xcb_close_down_t = ::libc::c_uint;
pub const XCB_CLOSE_DOWN_DESTROY_ALL: ::libc::c_uint = 0;
pub const XCB_CLOSE_DOWN_RETAIN_PERMANENT: ::libc::c_uint = 1;
pub const XCB_CLOSE_DOWN_RETAIN_TEMPORARY: ::libc::c_uint = 2;
pub type xcb_close_down_t = Enum_xcb_close_down_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_close_down_mode_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_set_close_down_mode_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_close_down_mode_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_close_down_mode_request_t =
    Struct_xcb_set_close_down_mode_request_t;
pub type Enum_xcb_kill_t = ::libc::c_uint;
pub const XCB_KILL_ALL_TEMPORARY: ::libc::c_uint = 0;
pub type xcb_kill_t = Enum_xcb_kill_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_kill_client_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub resource: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_kill_client_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_kill_client_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_kill_client_request_t = Struct_xcb_kill_client_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_rotate_properties_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub atoms_len: uint16_t,
    pub delta: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_rotate_properties_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_rotate_properties_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_rotate_properties_request_t =
    Struct_xcb_rotate_properties_request_t;
pub type Enum_xcb_screen_saver_t = ::libc::c_uint;
pub const XCB_SCREEN_SAVER_RESET: ::libc::c_uint = 0;
pub const XCB_SCREEN_SAVER_ACTIVE: ::libc::c_uint = 1;
pub type xcb_screen_saver_t = Enum_xcb_screen_saver_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_force_screen_saver_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_force_screen_saver_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_force_screen_saver_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_force_screen_saver_request_t =
    Struct_xcb_force_screen_saver_request_t;
pub type Enum_xcb_mapping_status_t = ::libc::c_uint;
pub const XCB_MAPPING_STATUS_SUCCESS: ::libc::c_uint = 0;
pub const XCB_MAPPING_STATUS_BUSY: ::libc::c_uint = 1;
pub const XCB_MAPPING_STATUS_FAILURE: ::libc::c_uint = 2;
pub type xcb_mapping_status_t = Enum_xcb_mapping_status_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_pointer_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_set_pointer_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_pointer_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_pointer_mapping_cookie_t =
    Struct_xcb_set_pointer_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_pointer_mapping_request_t {
    pub major_opcode: uint8_t,
    pub map_len: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_set_pointer_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_pointer_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_pointer_mapping_request_t =
    Struct_xcb_set_pointer_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_pointer_mapping_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_set_pointer_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_pointer_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_pointer_mapping_reply_t =
    Struct_xcb_set_pointer_mapping_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_pointer_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_pointer_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_pointer_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_pointer_mapping_cookie_t =
    Struct_xcb_get_pointer_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_pointer_mapping_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_get_pointer_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_pointer_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_pointer_mapping_request_t =
    Struct_xcb_get_pointer_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_pointer_mapping_reply_t {
    pub response_type: uint8_t,
    pub map_len: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pad0: [uint8_t; 24usize],
}
impl ::std::clone::Clone for Struct_xcb_get_pointer_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_pointer_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_pointer_mapping_reply_t =
    Struct_xcb_get_pointer_mapping_reply_t;
pub type Enum_xcb_map_index_t = ::libc::c_uint;
pub const XCB_MAP_INDEX_SHIFT: ::libc::c_uint = 0;
pub const XCB_MAP_INDEX_LOCK: ::libc::c_uint = 1;
pub const XCB_MAP_INDEX_CONTROL: ::libc::c_uint = 2;
pub const XCB_MAP_INDEX_1: ::libc::c_uint = 3;
pub const XCB_MAP_INDEX_2: ::libc::c_uint = 4;
pub const XCB_MAP_INDEX_3: ::libc::c_uint = 5;
pub const XCB_MAP_INDEX_4: ::libc::c_uint = 6;
pub const XCB_MAP_INDEX_5: ::libc::c_uint = 7;
pub type xcb_map_index_t = Enum_xcb_map_index_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_modifier_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_set_modifier_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_modifier_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_modifier_mapping_cookie_t =
    Struct_xcb_set_modifier_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_modifier_mapping_request_t {
    pub major_opcode: uint8_t,
    pub keycodes_per_modifier: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_set_modifier_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_modifier_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_modifier_mapping_request_t =
    Struct_xcb_set_modifier_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_set_modifier_mapping_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_set_modifier_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_set_modifier_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_set_modifier_mapping_reply_t =
    Struct_xcb_set_modifier_mapping_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_modifier_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_get_modifier_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_modifier_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_modifier_mapping_cookie_t =
    Struct_xcb_get_modifier_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_modifier_mapping_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_get_modifier_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_modifier_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_modifier_mapping_request_t =
    Struct_xcb_get_modifier_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_get_modifier_mapping_reply_t {
    pub response_type: uint8_t,
    pub keycodes_per_modifier: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pad0: [uint8_t; 24usize],
}
impl ::std::clone::Clone for Struct_xcb_get_modifier_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_get_modifier_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_get_modifier_mapping_reply_t =
    Struct_xcb_get_modifier_mapping_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_no_operation_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_no_operation_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_no_operation_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_no_operation_request_t = Struct_xcb_no_operation_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_auth_info_t {
    pub namelen: ::libc::c_int,
    pub name: *mut ::libc::c_char,
    pub datalen: ::libc::c_int,
    pub data: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_xcb_auth_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_auth_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_auth_info_t = Struct_xcb_auth_info_t;
pub enum Struct_xcb_special_event { }
pub type xcb_special_event_t = Struct_xcb_special_event;
pub type xcb_extension_t = Struct_xcb_extension_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_extension_t {
    pub name: *const ::libc::c_char,
    pub global_id: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_extension_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_extension_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub count: size_t,
    pub ext: *mut xcb_extension_t,
    pub opcode: uint8_t,
    pub isvoid: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_protocol_request_t = Struct_Unnamed7;
pub type Enum_xcb_send_request_flags_t = ::libc::c_uint;
pub const XCB_REQUEST_CHECKED: ::libc::c_uint = 1;
pub const XCB_REQUEST_RAW: ::libc::c_uint = 2;
pub const XCB_REQUEST_DISCARD_REPLY: ::libc::c_uint = 4;
pub const XCB_REQUEST_REPLY_FDS: ::libc::c_uint = 8;
pub type Enum_xcb_render_pict_type_t = ::libc::c_uint;
pub const XCB_RENDER_PICT_TYPE_INDEXED: ::libc::c_uint = 0;
pub const XCB_RENDER_PICT_TYPE_DIRECT: ::libc::c_uint = 1;
pub type xcb_render_pict_type_t = Enum_xcb_render_pict_type_t;
pub type Enum_xcb_render_picture_enum_t = ::libc::c_uint;
pub const XCB_RENDER_PICTURE_NONE: ::libc::c_uint = 0;
pub type xcb_render_picture_enum_t = Enum_xcb_render_picture_enum_t;
pub type Enum_xcb_render_pict_op_t = ::libc::c_uint;
pub const XCB_RENDER_PICT_OP_CLEAR: ::libc::c_uint = 0;
pub const XCB_RENDER_PICT_OP_SRC: ::libc::c_uint = 1;
pub const XCB_RENDER_PICT_OP_DST: ::libc::c_uint = 2;
pub const XCB_RENDER_PICT_OP_OVER: ::libc::c_uint = 3;
pub const XCB_RENDER_PICT_OP_OVER_REVERSE: ::libc::c_uint = 4;
pub const XCB_RENDER_PICT_OP_IN: ::libc::c_uint = 5;
pub const XCB_RENDER_PICT_OP_IN_REVERSE: ::libc::c_uint = 6;
pub const XCB_RENDER_PICT_OP_OUT: ::libc::c_uint = 7;
pub const XCB_RENDER_PICT_OP_OUT_REVERSE: ::libc::c_uint = 8;
pub const XCB_RENDER_PICT_OP_ATOP: ::libc::c_uint = 9;
pub const XCB_RENDER_PICT_OP_ATOP_REVERSE: ::libc::c_uint = 10;
pub const XCB_RENDER_PICT_OP_XOR: ::libc::c_uint = 11;
pub const XCB_RENDER_PICT_OP_ADD: ::libc::c_uint = 12;
pub const XCB_RENDER_PICT_OP_SATURATE: ::libc::c_uint = 13;
pub const XCB_RENDER_PICT_OP_DISJOINT_CLEAR: ::libc::c_uint = 16;
pub const XCB_RENDER_PICT_OP_DISJOINT_SRC: ::libc::c_uint = 17;
pub const XCB_RENDER_PICT_OP_DISJOINT_DST: ::libc::c_uint = 18;
pub const XCB_RENDER_PICT_OP_DISJOINT_OVER: ::libc::c_uint = 19;
pub const XCB_RENDER_PICT_OP_DISJOINT_OVER_REVERSE: ::libc::c_uint = 20;
pub const XCB_RENDER_PICT_OP_DISJOINT_IN: ::libc::c_uint = 21;
pub const XCB_RENDER_PICT_OP_DISJOINT_IN_REVERSE: ::libc::c_uint = 22;
pub const XCB_RENDER_PICT_OP_DISJOINT_OUT: ::libc::c_uint = 23;
pub const XCB_RENDER_PICT_OP_DISJOINT_OUT_REVERSE: ::libc::c_uint = 24;
pub const XCB_RENDER_PICT_OP_DISJOINT_ATOP: ::libc::c_uint = 25;
pub const XCB_RENDER_PICT_OP_DISJOINT_ATOP_REVERSE: ::libc::c_uint = 26;
pub const XCB_RENDER_PICT_OP_DISJOINT_XOR: ::libc::c_uint = 27;
pub const XCB_RENDER_PICT_OP_CONJOINT_CLEAR: ::libc::c_uint = 32;
pub const XCB_RENDER_PICT_OP_CONJOINT_SRC: ::libc::c_uint = 33;
pub const XCB_RENDER_PICT_OP_CONJOINT_DST: ::libc::c_uint = 34;
pub const XCB_RENDER_PICT_OP_CONJOINT_OVER: ::libc::c_uint = 35;
pub const XCB_RENDER_PICT_OP_CONJOINT_OVER_REVERSE: ::libc::c_uint = 36;
pub const XCB_RENDER_PICT_OP_CONJOINT_IN: ::libc::c_uint = 37;
pub const XCB_RENDER_PICT_OP_CONJOINT_IN_REVERSE: ::libc::c_uint = 38;
pub const XCB_RENDER_PICT_OP_CONJOINT_OUT: ::libc::c_uint = 39;
pub const XCB_RENDER_PICT_OP_CONJOINT_OUT_REVERSE: ::libc::c_uint = 40;
pub const XCB_RENDER_PICT_OP_CONJOINT_ATOP: ::libc::c_uint = 41;
pub const XCB_RENDER_PICT_OP_CONJOINT_ATOP_REVERSE: ::libc::c_uint = 42;
pub const XCB_RENDER_PICT_OP_CONJOINT_XOR: ::libc::c_uint = 43;
pub const XCB_RENDER_PICT_OP_MULTIPLY: ::libc::c_uint = 48;
pub const XCB_RENDER_PICT_OP_SCREEN: ::libc::c_uint = 49;
pub const XCB_RENDER_PICT_OP_OVERLAY: ::libc::c_uint = 50;
pub const XCB_RENDER_PICT_OP_DARKEN: ::libc::c_uint = 51;
pub const XCB_RENDER_PICT_OP_LIGHTEN: ::libc::c_uint = 52;
pub const XCB_RENDER_PICT_OP_COLOR_DODGE: ::libc::c_uint = 53;
pub const XCB_RENDER_PICT_OP_COLOR_BURN: ::libc::c_uint = 54;
pub const XCB_RENDER_PICT_OP_HARD_LIGHT: ::libc::c_uint = 55;
pub const XCB_RENDER_PICT_OP_SOFT_LIGHT: ::libc::c_uint = 56;
pub const XCB_RENDER_PICT_OP_DIFFERENCE: ::libc::c_uint = 57;
pub const XCB_RENDER_PICT_OP_EXCLUSION: ::libc::c_uint = 58;
pub const XCB_RENDER_PICT_OP_HSL_HUE: ::libc::c_uint = 59;
pub const XCB_RENDER_PICT_OP_HSL_SATURATION: ::libc::c_uint = 60;
pub const XCB_RENDER_PICT_OP_HSL_COLOR: ::libc::c_uint = 61;
pub const XCB_RENDER_PICT_OP_HSL_LUMINOSITY: ::libc::c_uint = 62;
pub type xcb_render_pict_op_t = Enum_xcb_render_pict_op_t;
pub type Enum_xcb_render_poly_edge_t = ::libc::c_uint;
pub const XCB_RENDER_POLY_EDGE_SHARP: ::libc::c_uint = 0;
pub const XCB_RENDER_POLY_EDGE_SMOOTH: ::libc::c_uint = 1;
pub type xcb_render_poly_edge_t = Enum_xcb_render_poly_edge_t;
pub type Enum_xcb_render_poly_mode_t = ::libc::c_uint;
pub const XCB_RENDER_POLY_MODE_PRECISE: ::libc::c_uint = 0;
pub const XCB_RENDER_POLY_MODE_IMPRECISE: ::libc::c_uint = 1;
pub type xcb_render_poly_mode_t = Enum_xcb_render_poly_mode_t;
pub type Enum_xcb_render_cp_t = ::libc::c_uint;
pub const XCB_RENDER_CP_REPEAT: ::libc::c_uint = 1;
pub const XCB_RENDER_CP_ALPHA_MAP: ::libc::c_uint = 2;
pub const XCB_RENDER_CP_ALPHA_X_ORIGIN: ::libc::c_uint = 4;
pub const XCB_RENDER_CP_ALPHA_Y_ORIGIN: ::libc::c_uint = 8;
pub const XCB_RENDER_CP_CLIP_X_ORIGIN: ::libc::c_uint = 16;
pub const XCB_RENDER_CP_CLIP_Y_ORIGIN: ::libc::c_uint = 32;
pub const XCB_RENDER_CP_CLIP_MASK: ::libc::c_uint = 64;
pub const XCB_RENDER_CP_GRAPHICS_EXPOSURE: ::libc::c_uint = 128;
pub const XCB_RENDER_CP_SUBWINDOW_MODE: ::libc::c_uint = 256;
pub const XCB_RENDER_CP_POLY_EDGE: ::libc::c_uint = 512;
pub const XCB_RENDER_CP_POLY_MODE: ::libc::c_uint = 1024;
pub const XCB_RENDER_CP_DITHER: ::libc::c_uint = 2048;
pub const XCB_RENDER_CP_COMPONENT_ALPHA: ::libc::c_uint = 4096;
pub type xcb_render_cp_t = Enum_xcb_render_cp_t;
pub type Enum_xcb_render_sub_pixel_t = ::libc::c_uint;
pub const XCB_RENDER_SUB_PIXEL_UNKNOWN: ::libc::c_uint = 0;
pub const XCB_RENDER_SUB_PIXEL_HORIZONTAL_RGB: ::libc::c_uint = 1;
pub const XCB_RENDER_SUB_PIXEL_HORIZONTAL_BGR: ::libc::c_uint = 2;
pub const XCB_RENDER_SUB_PIXEL_VERTICAL_RGB: ::libc::c_uint = 3;
pub const XCB_RENDER_SUB_PIXEL_VERTICAL_BGR: ::libc::c_uint = 4;
pub const XCB_RENDER_SUB_PIXEL_NONE: ::libc::c_uint = 5;
pub type xcb_render_sub_pixel_t = Enum_xcb_render_sub_pixel_t;
pub type Enum_xcb_render_repeat_t = ::libc::c_uint;
pub const XCB_RENDER_REPEAT_NONE: ::libc::c_uint = 0;
pub const XCB_RENDER_REPEAT_NORMAL: ::libc::c_uint = 1;
pub const XCB_RENDER_REPEAT_PAD: ::libc::c_uint = 2;
pub const XCB_RENDER_REPEAT_REFLECT: ::libc::c_uint = 3;
pub type xcb_render_repeat_t = Enum_xcb_render_repeat_t;
pub type xcb_render_glyph_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_glyph_iterator_t {
    pub data: *mut xcb_render_glyph_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_glyph_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_glyph_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_glyph_iterator_t = Struct_xcb_render_glyph_iterator_t;
pub type xcb_render_glyphset_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_glyphset_iterator_t {
    pub data: *mut xcb_render_glyphset_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_glyphset_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_glyphset_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_glyphset_iterator_t =
    Struct_xcb_render_glyphset_iterator_t;
pub type xcb_render_picture_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_picture_iterator_t {
    pub data: *mut xcb_render_picture_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_picture_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_picture_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_picture_iterator_t = Struct_xcb_render_picture_iterator_t;
pub type xcb_render_pictformat_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictformat_iterator_t {
    pub data: *mut xcb_render_pictformat_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_pictformat_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictformat_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictformat_iterator_t =
    Struct_xcb_render_pictformat_iterator_t;
pub type xcb_render_fixed_t = int32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_fixed_iterator_t {
    pub data: *mut xcb_render_fixed_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_fixed_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_fixed_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_fixed_iterator_t = Struct_xcb_render_fixed_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pict_format_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_pict_format_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pict_format_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pict_format_error_t =
    Struct_xcb_render_pict_format_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_picture_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_picture_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_picture_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_picture_error_t = Struct_xcb_render_picture_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pict_op_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_pict_op_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pict_op_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pict_op_error_t = Struct_xcb_render_pict_op_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_glyph_set_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_glyph_set_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_glyph_set_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_glyph_set_error_t = Struct_xcb_render_glyph_set_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_glyph_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_glyph_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_glyph_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_glyph_error_t = Struct_xcb_render_glyph_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_directformat_t {
    pub red_shift: uint16_t,
    pub red_mask: uint16_t,
    pub green_shift: uint16_t,
    pub green_mask: uint16_t,
    pub blue_shift: uint16_t,
    pub blue_mask: uint16_t,
    pub alpha_shift: uint16_t,
    pub alpha_mask: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_directformat_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_directformat_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_directformat_t = Struct_xcb_render_directformat_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_directformat_iterator_t {
    pub data: *mut xcb_render_directformat_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_directformat_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_directformat_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_directformat_iterator_t =
    Struct_xcb_render_directformat_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictforminfo_t {
    pub id: xcb_render_pictformat_t,
    pub _type: uint8_t,
    pub depth: uint8_t,
    pub pad0: [uint8_t; 2usize],
    pub direct: xcb_render_directformat_t,
    pub colormap: xcb_colormap_t,
}
impl ::std::clone::Clone for Struct_xcb_render_pictforminfo_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictforminfo_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictforminfo_t = Struct_xcb_render_pictforminfo_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictforminfo_iterator_t {
    pub data: *mut xcb_render_pictforminfo_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_pictforminfo_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictforminfo_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictforminfo_iterator_t =
    Struct_xcb_render_pictforminfo_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictvisual_t {
    pub visual: xcb_visualid_t,
    pub format: xcb_render_pictformat_t,
}
impl ::std::clone::Clone for Struct_xcb_render_pictvisual_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictvisual_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictvisual_t = Struct_xcb_render_pictvisual_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictvisual_iterator_t {
    pub data: *mut xcb_render_pictvisual_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_pictvisual_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictvisual_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictvisual_iterator_t =
    Struct_xcb_render_pictvisual_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictdepth_t {
    pub depth: uint8_t,
    pub pad0: uint8_t,
    pub num_visuals: uint16_t,
    pub pad1: [uint8_t; 4usize],
}
impl ::std::clone::Clone for Struct_xcb_render_pictdepth_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictdepth_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictdepth_t = Struct_xcb_render_pictdepth_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictdepth_iterator_t {
    pub data: *mut xcb_render_pictdepth_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_pictdepth_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictdepth_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictdepth_iterator_t =
    Struct_xcb_render_pictdepth_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictscreen_t {
    pub num_depths: uint32_t,
    pub fallback: xcb_render_pictformat_t,
}
impl ::std::clone::Clone for Struct_xcb_render_pictscreen_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictscreen_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictscreen_t = Struct_xcb_render_pictscreen_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pictscreen_iterator_t {
    pub data: *mut xcb_render_pictscreen_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_pictscreen_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pictscreen_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pictscreen_iterator_t =
    Struct_xcb_render_pictscreen_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_indexvalue_t {
    pub pixel: uint32_t,
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub alpha: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_indexvalue_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_indexvalue_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_indexvalue_t = Struct_xcb_render_indexvalue_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_indexvalue_iterator_t {
    pub data: *mut xcb_render_indexvalue_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_indexvalue_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_indexvalue_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_indexvalue_iterator_t =
    Struct_xcb_render_indexvalue_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_color_t {
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub alpha: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_color_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_color_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_color_t = Struct_xcb_render_color_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_color_iterator_t {
    pub data: *mut xcb_render_color_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_color_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_color_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_color_iterator_t = Struct_xcb_render_color_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pointfix_t {
    pub x: xcb_render_fixed_t,
    pub y: xcb_render_fixed_t,
}
impl ::std::clone::Clone for Struct_xcb_render_pointfix_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pointfix_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pointfix_t = Struct_xcb_render_pointfix_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_pointfix_iterator_t {
    pub data: *mut xcb_render_pointfix_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_pointfix_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_pointfix_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_pointfix_iterator_t =
    Struct_xcb_render_pointfix_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_linefix_t {
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
}
impl ::std::clone::Clone for Struct_xcb_render_linefix_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_linefix_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_linefix_t = Struct_xcb_render_linefix_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_linefix_iterator_t {
    pub data: *mut xcb_render_linefix_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_linefix_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_linefix_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_linefix_iterator_t = Struct_xcb_render_linefix_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_triangle_t {
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
    pub p3: xcb_render_pointfix_t,
}
impl ::std::clone::Clone for Struct_xcb_render_triangle_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_triangle_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_triangle_t = Struct_xcb_render_triangle_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_triangle_iterator_t {
    pub data: *mut xcb_render_triangle_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_triangle_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_triangle_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_triangle_iterator_t =
    Struct_xcb_render_triangle_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_trapezoid_t {
    pub top: xcb_render_fixed_t,
    pub bottom: xcb_render_fixed_t,
    pub left: xcb_render_linefix_t,
    pub right: xcb_render_linefix_t,
}
impl ::std::clone::Clone for Struct_xcb_render_trapezoid_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_trapezoid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_trapezoid_t = Struct_xcb_render_trapezoid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_trapezoid_iterator_t {
    pub data: *mut xcb_render_trapezoid_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_trapezoid_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_trapezoid_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_trapezoid_iterator_t =
    Struct_xcb_render_trapezoid_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_glyphinfo_t {
    pub width: uint16_t,
    pub height: uint16_t,
    pub x: int16_t,
    pub y: int16_t,
    pub x_off: int16_t,
    pub y_off: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_glyphinfo_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_glyphinfo_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_glyphinfo_t = Struct_xcb_render_glyphinfo_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_glyphinfo_iterator_t {
    pub data: *mut xcb_render_glyphinfo_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_glyphinfo_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_glyphinfo_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_glyphinfo_iterator_t =
    Struct_xcb_render_glyphinfo_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_version_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_render_query_version_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_query_version_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_version_cookie_t =
    Struct_xcb_render_query_version_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_version_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub client_major_version: uint32_t,
    pub client_minor_version: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_render_query_version_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_query_version_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_version_request_t =
    Struct_xcb_render_query_version_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_version_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub major_version: uint32_t,
    pub minor_version: uint32_t,
    pub pad1: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_xcb_render_query_version_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_query_version_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_version_reply_t =
    Struct_xcb_render_query_version_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_pict_formats_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_render_query_pict_formats_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_query_pict_formats_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_pict_formats_cookie_t =
    Struct_xcb_render_query_pict_formats_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_pict_formats_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_query_pict_formats_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_query_pict_formats_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_pict_formats_request_t =
    Struct_xcb_render_query_pict_formats_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_pict_formats_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_formats: uint32_t,
    pub num_screens: uint32_t,
    pub num_depths: uint32_t,
    pub num_visuals: uint32_t,
    pub num_subpixel: uint32_t,
    pub pad1: [uint8_t; 4usize],
}
impl ::std::clone::Clone for Struct_xcb_render_query_pict_formats_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_query_pict_formats_reply_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_pict_formats_reply_t =
    Struct_xcb_render_query_pict_formats_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_pict_index_values_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_render_query_pict_index_values_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_query_pict_index_values_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_pict_index_values_cookie_t =
    Struct_xcb_render_query_pict_index_values_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_pict_index_values_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub format: xcb_render_pictformat_t,
}
impl ::std::clone::Clone for
 Struct_xcb_render_query_pict_index_values_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_query_pict_index_values_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_pict_index_values_request_t =
    Struct_xcb_render_query_pict_index_values_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_pict_index_values_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_values: uint32_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_render_query_pict_index_values_reply_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_query_pict_index_values_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_pict_index_values_reply_t =
    Struct_xcb_render_query_pict_index_values_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_create_picture_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub pid: xcb_render_picture_t,
    pub drawable: xcb_drawable_t,
    pub format: xcb_render_pictformat_t,
    pub value_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_render_create_picture_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_create_picture_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_create_picture_request_t =
    Struct_xcb_render_create_picture_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_change_picture_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub value_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_render_change_picture_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_change_picture_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_change_picture_request_t =
    Struct_xcb_render_change_picture_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_set_picture_clip_rectangles_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub clip_x_origin: int16_t,
    pub clip_y_origin: int16_t,
}
impl ::std::clone::Clone for
 Struct_xcb_render_set_picture_clip_rectangles_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_set_picture_clip_rectangles_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_set_picture_clip_rectangles_request_t =
    Struct_xcb_render_set_picture_clip_rectangles_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_free_picture_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
}
impl ::std::clone::Clone for Struct_xcb_render_free_picture_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_free_picture_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_free_picture_request_t =
    Struct_xcb_render_free_picture_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_composite_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub src: xcb_render_picture_t,
    pub mask: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
    pub mask_x: int16_t,
    pub mask_y: int16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_composite_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_composite_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_composite_request_t =
    Struct_xcb_render_composite_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_trapezoids_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_trapezoids_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_trapezoids_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_trapezoids_request_t =
    Struct_xcb_render_trapezoids_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_triangles_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_triangles_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_triangles_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_triangles_request_t =
    Struct_xcb_render_triangles_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_tri_strip_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_tri_strip_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_tri_strip_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_tri_strip_request_t =
    Struct_xcb_render_tri_strip_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_tri_fan_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_tri_fan_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_tri_fan_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_tri_fan_request_t = Struct_xcb_render_tri_fan_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_create_glyph_set_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub gsid: xcb_render_glyphset_t,
    pub format: xcb_render_pictformat_t,
}
impl ::std::clone::Clone for Struct_xcb_render_create_glyph_set_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_create_glyph_set_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_create_glyph_set_request_t =
    Struct_xcb_render_create_glyph_set_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_reference_glyph_set_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub gsid: xcb_render_glyphset_t,
    pub existing: xcb_render_glyphset_t,
}
impl ::std::clone::Clone for Struct_xcb_render_reference_glyph_set_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_reference_glyph_set_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_reference_glyph_set_request_t =
    Struct_xcb_render_reference_glyph_set_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_free_glyph_set_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub glyphset: xcb_render_glyphset_t,
}
impl ::std::clone::Clone for Struct_xcb_render_free_glyph_set_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_free_glyph_set_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_free_glyph_set_request_t =
    Struct_xcb_render_free_glyph_set_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_add_glyphs_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub glyphset: xcb_render_glyphset_t,
    pub glyphs_len: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_render_add_glyphs_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_add_glyphs_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_add_glyphs_request_t =
    Struct_xcb_render_add_glyphs_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_free_glyphs_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub glyphset: xcb_render_glyphset_t,
}
impl ::std::clone::Clone for Struct_xcb_render_free_glyphs_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_free_glyphs_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_free_glyphs_request_t =
    Struct_xcb_render_free_glyphs_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_composite_glyphs_8_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_composite_glyphs_8_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_composite_glyphs_8_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_composite_glyphs_8_request_t =
    Struct_xcb_render_composite_glyphs_8_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_composite_glyphs_16_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_composite_glyphs_16_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_composite_glyphs_16_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_composite_glyphs_16_request_t =
    Struct_xcb_render_composite_glyphs_16_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_composite_glyphs_32_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_composite_glyphs_32_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_composite_glyphs_32_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_composite_glyphs_32_request_t =
    Struct_xcb_render_composite_glyphs_32_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_fill_rectangles_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub op: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub dst: xcb_render_picture_t,
    pub color: xcb_render_color_t,
}
impl ::std::clone::Clone for Struct_xcb_render_fill_rectangles_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_fill_rectangles_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_fill_rectangles_request_t =
    Struct_xcb_render_fill_rectangles_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_create_cursor_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub cid: xcb_cursor_t,
    pub source: xcb_render_picture_t,
    pub x: uint16_t,
    pub y: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_create_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_create_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_create_cursor_request_t =
    Struct_xcb_render_create_cursor_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_transform_t {
    pub matrix11: xcb_render_fixed_t,
    pub matrix12: xcb_render_fixed_t,
    pub matrix13: xcb_render_fixed_t,
    pub matrix21: xcb_render_fixed_t,
    pub matrix22: xcb_render_fixed_t,
    pub matrix23: xcb_render_fixed_t,
    pub matrix31: xcb_render_fixed_t,
    pub matrix32: xcb_render_fixed_t,
    pub matrix33: xcb_render_fixed_t,
}
impl ::std::clone::Clone for Struct_xcb_render_transform_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_transform_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_transform_t = Struct_xcb_render_transform_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_transform_iterator_t {
    pub data: *mut xcb_render_transform_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_transform_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_transform_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_transform_iterator_t =
    Struct_xcb_render_transform_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_set_picture_transform_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub transform: xcb_render_transform_t,
}
impl ::std::clone::Clone for Struct_xcb_render_set_picture_transform_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_set_picture_transform_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_set_picture_transform_request_t =
    Struct_xcb_render_set_picture_transform_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_filters_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_render_query_filters_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_query_filters_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_filters_cookie_t =
    Struct_xcb_render_query_filters_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_filters_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
}
impl ::std::clone::Clone for Struct_xcb_render_query_filters_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_query_filters_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_filters_request_t =
    Struct_xcb_render_query_filters_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_query_filters_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_aliases: uint32_t,
    pub num_filters: uint32_t,
    pub pad1: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_xcb_render_query_filters_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_query_filters_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_query_filters_reply_t =
    Struct_xcb_render_query_filters_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_set_picture_filter_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub filter_len: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_render_set_picture_filter_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_set_picture_filter_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_set_picture_filter_request_t =
    Struct_xcb_render_set_picture_filter_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_animcursorelt_t {
    pub cursor: xcb_cursor_t,
    pub delay: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_render_animcursorelt_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_animcursorelt_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_animcursorelt_t = Struct_xcb_render_animcursorelt_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_animcursorelt_iterator_t {
    pub data: *mut xcb_render_animcursorelt_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_animcursorelt_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_animcursorelt_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_animcursorelt_iterator_t =
    Struct_xcb_render_animcursorelt_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_create_anim_cursor_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub cid: xcb_cursor_t,
}
impl ::std::clone::Clone for Struct_xcb_render_create_anim_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_create_anim_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_create_anim_cursor_request_t =
    Struct_xcb_render_create_anim_cursor_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_spanfix_t {
    pub l: xcb_render_fixed_t,
    pub r: xcb_render_fixed_t,
    pub y: xcb_render_fixed_t,
}
impl ::std::clone::Clone for Struct_xcb_render_spanfix_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_spanfix_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_spanfix_t = Struct_xcb_render_spanfix_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_spanfix_iterator_t {
    pub data: *mut xcb_render_spanfix_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_spanfix_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_spanfix_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_spanfix_iterator_t = Struct_xcb_render_spanfix_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_trap_t {
    pub top: xcb_render_spanfix_t,
    pub bot: xcb_render_spanfix_t,
}
impl ::std::clone::Clone for Struct_xcb_render_trap_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_trap_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_trap_t = Struct_xcb_render_trap_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_trap_iterator_t {
    pub data: *mut xcb_render_trap_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_render_trap_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_trap_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_trap_iterator_t = Struct_xcb_render_trap_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_add_traps_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub x_off: int16_t,
    pub y_off: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_render_add_traps_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_add_traps_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_add_traps_request_t =
    Struct_xcb_render_add_traps_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_create_solid_fill_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub color: xcb_render_color_t,
}
impl ::std::clone::Clone for Struct_xcb_render_create_solid_fill_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_render_create_solid_fill_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_create_solid_fill_request_t =
    Struct_xcb_render_create_solid_fill_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_create_linear_gradient_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
    pub num_stops: uint32_t,
}
impl ::std::clone::Clone for
 Struct_xcb_render_create_linear_gradient_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_create_linear_gradient_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_create_linear_gradient_request_t =
    Struct_xcb_render_create_linear_gradient_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_create_radial_gradient_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub inner: xcb_render_pointfix_t,
    pub outer: xcb_render_pointfix_t,
    pub inner_radius: xcb_render_fixed_t,
    pub outer_radius: xcb_render_fixed_t,
    pub num_stops: uint32_t,
}
impl ::std::clone::Clone for
 Struct_xcb_render_create_radial_gradient_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_create_radial_gradient_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_create_radial_gradient_request_t =
    Struct_xcb_render_create_radial_gradient_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_render_create_conical_gradient_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub center: xcb_render_pointfix_t,
    pub angle: xcb_render_fixed_t,
    pub num_stops: uint32_t,
}
impl ::std::clone::Clone for
 Struct_xcb_render_create_conical_gradient_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_render_create_conical_gradient_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_render_create_conical_gradient_request_t =
    Struct_xcb_render_create_conical_gradient_request_t;
pub type xcb_randr_mode_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_mode_iterator_t {
    pub data: *mut xcb_randr_mode_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_mode_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_mode_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_mode_iterator_t = Struct_xcb_randr_mode_iterator_t;
pub type xcb_randr_crtc_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_crtc_iterator_t {
    pub data: *mut xcb_randr_crtc_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_crtc_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_crtc_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_crtc_iterator_t = Struct_xcb_randr_crtc_iterator_t;
pub type xcb_randr_output_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_output_iterator_t {
    pub data: *mut xcb_randr_output_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_output_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_output_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_output_iterator_t = Struct_xcb_randr_output_iterator_t;
pub type xcb_randr_provider_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_provider_iterator_t {
    pub data: *mut xcb_randr_provider_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_provider_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_provider_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_provider_iterator_t = Struct_xcb_randr_provider_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_bad_output_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_bad_output_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_bad_output_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_bad_output_error_t = Struct_xcb_randr_bad_output_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_bad_crtc_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_bad_crtc_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_bad_crtc_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_bad_crtc_error_t = Struct_xcb_randr_bad_crtc_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_bad_mode_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_bad_mode_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_bad_mode_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_bad_mode_error_t = Struct_xcb_randr_bad_mode_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_bad_provider_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_bad_provider_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_bad_provider_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_bad_provider_error_t =
    Struct_xcb_randr_bad_provider_error_t;
pub type Enum_xcb_randr_rotation_t = ::libc::c_uint;
pub const XCB_RANDR_ROTATION_ROTATE_0: ::libc::c_uint = 1;
pub const XCB_RANDR_ROTATION_ROTATE_90: ::libc::c_uint = 2;
pub const XCB_RANDR_ROTATION_ROTATE_180: ::libc::c_uint = 4;
pub const XCB_RANDR_ROTATION_ROTATE_270: ::libc::c_uint = 8;
pub const XCB_RANDR_ROTATION_REFLECT_X: ::libc::c_uint = 16;
pub const XCB_RANDR_ROTATION_REFLECT_Y: ::libc::c_uint = 32;
pub type xcb_randr_rotation_t = Enum_xcb_randr_rotation_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_screen_size_t {
    pub width: uint16_t,
    pub height: uint16_t,
    pub mwidth: uint16_t,
    pub mheight: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_screen_size_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_screen_size_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_screen_size_t = Struct_xcb_randr_screen_size_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_screen_size_iterator_t {
    pub data: *mut xcb_randr_screen_size_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_screen_size_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_screen_size_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_screen_size_iterator_t =
    Struct_xcb_randr_screen_size_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_refresh_rates_t {
    pub nRates: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_refresh_rates_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_refresh_rates_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_refresh_rates_t = Struct_xcb_randr_refresh_rates_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_refresh_rates_iterator_t {
    pub data: *mut xcb_randr_refresh_rates_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_refresh_rates_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_refresh_rates_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_refresh_rates_iterator_t =
    Struct_xcb_randr_refresh_rates_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_version_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_query_version_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_query_version_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_version_cookie_t =
    Struct_xcb_randr_query_version_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_version_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub major_version: uint32_t,
    pub minor_version: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_query_version_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_query_version_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_version_request_t =
    Struct_xcb_randr_query_version_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_version_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub major_version: uint32_t,
    pub minor_version: uint32_t,
    pub pad1: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_query_version_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_query_version_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_version_reply_t =
    Struct_xcb_randr_query_version_reply_t;
pub type Enum_xcb_randr_set_config_t = ::libc::c_uint;
pub const XCB_RANDR_SET_CONFIG_SUCCESS: ::libc::c_uint = 0;
pub const XCB_RANDR_SET_CONFIG_INVALID_CONFIG_TIME: ::libc::c_uint = 1;
pub const XCB_RANDR_SET_CONFIG_INVALID_TIME: ::libc::c_uint = 2;
pub const XCB_RANDR_SET_CONFIG_FAILED: ::libc::c_uint = 3;
pub type xcb_randr_set_config_t = Enum_xcb_randr_set_config_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_screen_config_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_set_screen_config_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_screen_config_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_screen_config_cookie_t =
    Struct_xcb_randr_set_screen_config_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_screen_config_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub sizeID: uint16_t,
    pub rotation: uint16_t,
    pub rate: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_set_screen_config_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_screen_config_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_screen_config_request_t =
    Struct_xcb_randr_set_screen_config_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_screen_config_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub new_timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub subpixel_order: uint16_t,
    pub pad0: [uint8_t; 10usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_set_screen_config_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_screen_config_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_screen_config_reply_t =
    Struct_xcb_randr_set_screen_config_reply_t;
pub type Enum_xcb_randr_notify_mask_t = ::libc::c_uint;
pub const XCB_RANDR_NOTIFY_MASK_SCREEN_CHANGE: ::libc::c_uint = 1;
pub const XCB_RANDR_NOTIFY_MASK_CRTC_CHANGE: ::libc::c_uint = 2;
pub const XCB_RANDR_NOTIFY_MASK_OUTPUT_CHANGE: ::libc::c_uint = 4;
pub const XCB_RANDR_NOTIFY_MASK_OUTPUT_PROPERTY: ::libc::c_uint = 8;
pub const XCB_RANDR_NOTIFY_MASK_PROVIDER_CHANGE: ::libc::c_uint = 16;
pub const XCB_RANDR_NOTIFY_MASK_PROVIDER_PROPERTY: ::libc::c_uint = 32;
pub const XCB_RANDR_NOTIFY_MASK_RESOURCE_CHANGE: ::libc::c_uint = 64;
pub type xcb_randr_notify_mask_t = Enum_xcb_randr_notify_mask_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_select_input_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub enable: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_select_input_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_select_input_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_select_input_request_t =
    Struct_xcb_randr_select_input_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_info_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_info_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_screen_info_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_info_cookie_t =
    Struct_xcb_randr_get_screen_info_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_info_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_info_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_screen_info_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_info_request_t =
    Struct_xcb_randr_get_screen_info_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_info_reply_t {
    pub response_type: uint8_t,
    pub rotations: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub root: xcb_window_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub nSizes: uint16_t,
    pub sizeID: uint16_t,
    pub rotation: uint16_t,
    pub rate: uint16_t,
    pub nInfo: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_info_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_screen_info_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_info_reply_t =
    Struct_xcb_randr_get_screen_info_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_size_range_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_size_range_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_screen_size_range_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_size_range_cookie_t =
    Struct_xcb_randr_get_screen_size_range_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_size_range_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_size_range_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_screen_size_range_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_size_range_request_t =
    Struct_xcb_randr_get_screen_size_range_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_size_range_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub min_width: uint16_t,
    pub min_height: uint16_t,
    pub max_width: uint16_t,
    pub max_height: uint16_t,
    pub pad1: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_size_range_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_screen_size_range_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_size_range_reply_t =
    Struct_xcb_randr_get_screen_size_range_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_screen_size_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub mm_width: uint32_t,
    pub mm_height: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_set_screen_size_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_screen_size_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_screen_size_request_t =
    Struct_xcb_randr_set_screen_size_request_t;
pub type Enum_xcb_randr_mode_flag_t = ::libc::c_uint;
pub const XCB_RANDR_MODE_FLAG_HSYNC_POSITIVE: ::libc::c_uint = 1;
pub const XCB_RANDR_MODE_FLAG_HSYNC_NEGATIVE: ::libc::c_uint = 2;
pub const XCB_RANDR_MODE_FLAG_VSYNC_POSITIVE: ::libc::c_uint = 4;
pub const XCB_RANDR_MODE_FLAG_VSYNC_NEGATIVE: ::libc::c_uint = 8;
pub const XCB_RANDR_MODE_FLAG_INTERLACE: ::libc::c_uint = 16;
pub const XCB_RANDR_MODE_FLAG_DOUBLE_SCAN: ::libc::c_uint = 32;
pub const XCB_RANDR_MODE_FLAG_CSYNC: ::libc::c_uint = 64;
pub const XCB_RANDR_MODE_FLAG_CSYNC_POSITIVE: ::libc::c_uint = 128;
pub const XCB_RANDR_MODE_FLAG_CSYNC_NEGATIVE: ::libc::c_uint = 256;
pub const XCB_RANDR_MODE_FLAG_HSKEW_PRESENT: ::libc::c_uint = 512;
pub const XCB_RANDR_MODE_FLAG_BCAST: ::libc::c_uint = 1024;
pub const XCB_RANDR_MODE_FLAG_PIXEL_MULTIPLEX: ::libc::c_uint = 2048;
pub const XCB_RANDR_MODE_FLAG_DOUBLE_CLOCK: ::libc::c_uint = 4096;
pub const XCB_RANDR_MODE_FLAG_HALVE_CLOCK: ::libc::c_uint = 8192;
pub type xcb_randr_mode_flag_t = Enum_xcb_randr_mode_flag_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_mode_info_t {
    pub id: uint32_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub dot_clock: uint32_t,
    pub hsync_start: uint16_t,
    pub hsync_end: uint16_t,
    pub htotal: uint16_t,
    pub hskew: uint16_t,
    pub vsync_start: uint16_t,
    pub vsync_end: uint16_t,
    pub vtotal: uint16_t,
    pub name_len: uint16_t,
    pub mode_flags: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_mode_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_mode_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_mode_info_t = Struct_xcb_randr_mode_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_mode_info_iterator_t {
    pub data: *mut xcb_randr_mode_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_mode_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_mode_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_mode_info_iterator_t =
    Struct_xcb_randr_mode_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_resources_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_resources_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_screen_resources_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_resources_cookie_t =
    Struct_xcb_randr_get_screen_resources_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_resources_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_resources_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_screen_resources_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_resources_request_t =
    Struct_xcb_randr_get_screen_resources_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_resources_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub num_crtcs: uint16_t,
    pub num_outputs: uint16_t,
    pub num_modes: uint16_t,
    pub names_len: uint16_t,
    pub pad1: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_screen_resources_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_screen_resources_reply_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_resources_reply_t =
    Struct_xcb_randr_get_screen_resources_reply_t;
pub type Enum_xcb_randr_connection_t = ::libc::c_uint;
pub const XCB_RANDR_CONNECTION_CONNECTED: ::libc::c_uint = 0;
pub const XCB_RANDR_CONNECTION_DISCONNECTED: ::libc::c_uint = 1;
pub const XCB_RANDR_CONNECTION_UNKNOWN: ::libc::c_uint = 2;
pub type xcb_randr_connection_t = Enum_xcb_randr_connection_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_info_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_info_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_output_info_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_info_cookie_t =
    Struct_xcb_randr_get_output_info_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_info_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
    pub config_timestamp: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_info_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_output_info_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_info_request_t =
    Struct_xcb_randr_get_output_info_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_info_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub crtc: xcb_randr_crtc_t,
    pub mm_width: uint32_t,
    pub mm_height: uint32_t,
    pub connection: uint8_t,
    pub subpixel_order: uint8_t,
    pub num_crtcs: uint16_t,
    pub num_modes: uint16_t,
    pub num_preferred: uint16_t,
    pub num_clones: uint16_t,
    pub name_len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_info_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_output_info_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_info_reply_t =
    Struct_xcb_randr_get_output_info_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_list_output_properties_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_list_output_properties_cookie_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_list_output_properties_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_list_output_properties_cookie_t =
    Struct_xcb_randr_list_output_properties_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_list_output_properties_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_list_output_properties_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_list_output_properties_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_list_output_properties_request_t =
    Struct_xcb_randr_list_output_properties_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_list_output_properties_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_atoms: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_list_output_properties_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_list_output_properties_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_list_output_properties_reply_t =
    Struct_xcb_randr_list_output_properties_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_output_property_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_query_output_property_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_query_output_property_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_output_property_cookie_t =
    Struct_xcb_randr_query_output_property_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_output_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_query_output_property_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_query_output_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_output_property_request_t =
    Struct_xcb_randr_query_output_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_output_property_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pending: uint8_t,
    pub range: uint8_t,
    pub immutable: uint8_t,
    pub pad1: [uint8_t; 21usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_query_output_property_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_query_output_property_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_output_property_reply_t =
    Struct_xcb_randr_query_output_property_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_configure_output_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub pending: uint8_t,
    pub range: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for
 Struct_xcb_randr_configure_output_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_configure_output_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_configure_output_property_request_t =
    Struct_xcb_randr_configure_output_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_change_output_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub format: uint8_t,
    pub mode: uint8_t,
    pub pad0: [uint8_t; 2usize],
    pub num_units: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_change_output_property_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_change_output_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_change_output_property_request_t =
    Struct_xcb_randr_change_output_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_delete_output_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_delete_output_property_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_delete_output_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_delete_output_property_request_t =
    Struct_xcb_randr_delete_output_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_property_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_property_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_output_property_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_property_cookie_t =
    Struct_xcb_randr_get_output_property_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub long_offset: uint32_t,
    pub long_length: uint32_t,
    pub _delete: uint8_t,
    pub pending: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_output_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_property_request_t =
    Struct_xcb_randr_get_output_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_property_reply_t {
    pub response_type: uint8_t,
    pub format: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub _type: xcb_atom_t,
    pub bytes_after: uint32_t,
    pub num_items: uint32_t,
    pub pad0: [uint8_t; 12usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_property_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_output_property_reply_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_property_reply_t =
    Struct_xcb_randr_get_output_property_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_create_mode_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_create_mode_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_create_mode_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_create_mode_cookie_t =
    Struct_xcb_randr_create_mode_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_create_mode_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub mode_info: xcb_randr_mode_info_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_create_mode_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_create_mode_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_create_mode_request_t =
    Struct_xcb_randr_create_mode_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_create_mode_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub mode: xcb_randr_mode_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_create_mode_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_create_mode_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_create_mode_reply_t = Struct_xcb_randr_create_mode_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_destroy_mode_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub mode: xcb_randr_mode_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_destroy_mode_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_destroy_mode_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_destroy_mode_request_t =
    Struct_xcb_randr_destroy_mode_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_add_output_mode_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
    pub mode: xcb_randr_mode_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_add_output_mode_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_add_output_mode_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_add_output_mode_request_t =
    Struct_xcb_randr_add_output_mode_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_delete_output_mode_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub output: xcb_randr_output_t,
    pub mode: xcb_randr_mode_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_delete_output_mode_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_delete_output_mode_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_delete_output_mode_request_t =
    Struct_xcb_randr_delete_output_mode_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_info_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_info_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_info_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_info_cookie_t =
    Struct_xcb_randr_get_crtc_info_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_info_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
    pub config_timestamp: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_info_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_info_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_info_request_t =
    Struct_xcb_randr_get_crtc_info_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_info_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub mode: xcb_randr_mode_t,
    pub rotation: uint16_t,
    pub rotations: uint16_t,
    pub num_outputs: uint16_t,
    pub num_possible_outputs: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_info_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_info_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_info_reply_t =
    Struct_xcb_randr_get_crtc_info_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_crtc_config_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_set_crtc_config_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_crtc_config_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_crtc_config_cookie_t =
    Struct_xcb_randr_set_crtc_config_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_crtc_config_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub x: int16_t,
    pub y: int16_t,
    pub mode: xcb_randr_mode_t,
    pub rotation: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_set_crtc_config_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_crtc_config_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_crtc_config_request_t =
    Struct_xcb_randr_set_crtc_config_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_crtc_config_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub pad0: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_set_crtc_config_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_crtc_config_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_crtc_config_reply_t =
    Struct_xcb_randr_set_crtc_config_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_gamma_size_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_gamma_size_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_gamma_size_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_gamma_size_cookie_t =
    Struct_xcb_randr_get_crtc_gamma_size_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_gamma_size_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_gamma_size_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_crtc_gamma_size_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_gamma_size_request_t =
    Struct_xcb_randr_get_crtc_gamma_size_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_gamma_size_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub size: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_gamma_size_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_gamma_size_reply_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_gamma_size_reply_t =
    Struct_xcb_randr_get_crtc_gamma_size_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_gamma_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_gamma_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_gamma_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_gamma_cookie_t =
    Struct_xcb_randr_get_crtc_gamma_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_gamma_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_gamma_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_gamma_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_gamma_request_t =
    Struct_xcb_randr_get_crtc_gamma_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_gamma_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub size: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_gamma_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_gamma_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_gamma_reply_t =
    Struct_xcb_randr_get_crtc_gamma_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_crtc_gamma_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
    pub size: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_set_crtc_gamma_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_crtc_gamma_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_crtc_gamma_request_t =
    Struct_xcb_randr_set_crtc_gamma_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_resources_current_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_get_screen_resources_current_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_screen_resources_current_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_resources_current_cookie_t =
    Struct_xcb_randr_get_screen_resources_current_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_resources_current_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_get_screen_resources_current_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_screen_resources_current_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_resources_current_request_t =
    Struct_xcb_randr_get_screen_resources_current_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_screen_resources_current_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub num_crtcs: uint16_t,
    pub num_outputs: uint16_t,
    pub num_modes: uint16_t,
    pub names_len: uint16_t,
    pub pad1: [uint8_t; 8usize],
}
impl ::std::clone::Clone for
 Struct_xcb_randr_get_screen_resources_current_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_screen_resources_current_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_screen_resources_current_reply_t =
    Struct_xcb_randr_get_screen_resources_current_reply_t;
pub type Enum_xcb_randr_transform_t = ::libc::c_uint;
pub const XCB_RANDR_TRANSFORM_UNIT: ::libc::c_uint = 1;
pub const XCB_RANDR_TRANSFORM_SCALE_UP: ::libc::c_uint = 2;
pub const XCB_RANDR_TRANSFORM_SCALE_DOWN: ::libc::c_uint = 4;
pub const XCB_RANDR_TRANSFORM_PROJECTIVE: ::libc::c_uint = 8;
pub type xcb_randr_transform_t = Enum_xcb_randr_transform_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_crtc_transform_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
    pub transform: xcb_render_transform_t,
    pub filter_len: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_set_crtc_transform_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_crtc_transform_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_crtc_transform_request_t =
    Struct_xcb_randr_set_crtc_transform_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_transform_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_transform_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_transform_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_transform_cookie_t =
    Struct_xcb_randr_get_crtc_transform_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_transform_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_transform_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_transform_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_transform_request_t =
    Struct_xcb_randr_get_crtc_transform_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_crtc_transform_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pending_transform: xcb_render_transform_t,
    pub has_transforms: uint8_t,
    pub pad1: [uint8_t; 3usize],
    pub current_transform: xcb_render_transform_t,
    pub pad2: [uint8_t; 4usize],
    pub pending_len: uint16_t,
    pub pending_nparams: uint16_t,
    pub current_len: uint16_t,
    pub current_nparams: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_crtc_transform_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_crtc_transform_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_crtc_transform_reply_t =
    Struct_xcb_randr_get_crtc_transform_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_panning_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_panning_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_panning_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_panning_cookie_t =
    Struct_xcb_randr_get_panning_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_panning_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_panning_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_panning_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_panning_request_t =
    Struct_xcb_randr_get_panning_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_panning_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub left: uint16_t,
    pub top: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub track_left: uint16_t,
    pub track_top: uint16_t,
    pub track_width: uint16_t,
    pub track_height: uint16_t,
    pub border_left: int16_t,
    pub border_top: int16_t,
    pub border_right: int16_t,
    pub border_bottom: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_panning_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_panning_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_panning_reply_t = Struct_xcb_randr_get_panning_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_panning_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_set_panning_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_panning_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_panning_cookie_t =
    Struct_xcb_randr_set_panning_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_panning_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub crtc: xcb_randr_crtc_t,
    pub timestamp: xcb_timestamp_t,
    pub left: uint16_t,
    pub top: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub track_left: uint16_t,
    pub track_top: uint16_t,
    pub track_width: uint16_t,
    pub track_height: uint16_t,
    pub border_left: int16_t,
    pub border_top: int16_t,
    pub border_right: int16_t,
    pub border_bottom: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_set_panning_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_panning_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_panning_request_t =
    Struct_xcb_randr_set_panning_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_panning_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_set_panning_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_panning_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_panning_reply_t = Struct_xcb_randr_set_panning_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_output_primary_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_set_output_primary_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_set_output_primary_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_output_primary_request_t =
    Struct_xcb_randr_set_output_primary_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_primary_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_primary_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_output_primary_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_primary_cookie_t =
    Struct_xcb_randr_get_output_primary_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_primary_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_primary_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_output_primary_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_primary_request_t =
    Struct_xcb_randr_get_output_primary_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_output_primary_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub output: xcb_randr_output_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_output_primary_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_output_primary_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_output_primary_reply_t =
    Struct_xcb_randr_get_output_primary_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_providers_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_providers_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_providers_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_providers_cookie_t =
    Struct_xcb_randr_get_providers_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_providers_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_providers_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_providers_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_providers_request_t =
    Struct_xcb_randr_get_providers_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_providers_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub num_providers: uint16_t,
    pub pad1: [uint8_t; 18usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_providers_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_providers_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_providers_reply_t =
    Struct_xcb_randr_get_providers_reply_t;
pub type Enum_xcb_randr_provider_capability_t = ::libc::c_uint;
pub const XCB_RANDR_PROVIDER_CAPABILITY_SOURCE_OUTPUT: ::libc::c_uint = 1;
pub const XCB_RANDR_PROVIDER_CAPABILITY_SINK_OUTPUT: ::libc::c_uint = 2;
pub const XCB_RANDR_PROVIDER_CAPABILITY_SOURCE_OFFLOAD: ::libc::c_uint = 4;
pub const XCB_RANDR_PROVIDER_CAPABILITY_SINK_OFFLOAD: ::libc::c_uint = 8;
pub type xcb_randr_provider_capability_t =
    Enum_xcb_randr_provider_capability_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_provider_info_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_provider_info_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_provider_info_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_provider_info_cookie_t =
    Struct_xcb_randr_get_provider_info_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_provider_info_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_provider_info_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_provider_info_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_provider_info_request_t =
    Struct_xcb_randr_get_provider_info_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_provider_info_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub capabilities: uint32_t,
    pub num_crtcs: uint16_t,
    pub num_outputs: uint16_t,
    pub num_associated_providers: uint16_t,
    pub name_len: uint16_t,
    pub pad0: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_provider_info_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_get_provider_info_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_provider_info_reply_t =
    Struct_xcb_randr_get_provider_info_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_provider_offload_sink_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
    pub sink_provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_set_provider_offload_sink_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_set_provider_offload_sink_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_provider_offload_sink_request_t =
    Struct_xcb_randr_set_provider_offload_sink_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_set_provider_output_source_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
    pub source_provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_set_provider_output_source_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_set_provider_output_source_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_set_provider_output_source_request_t =
    Struct_xcb_randr_set_provider_output_source_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_list_provider_properties_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_list_provider_properties_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_list_provider_properties_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_list_provider_properties_cookie_t =
    Struct_xcb_randr_list_provider_properties_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_list_provider_properties_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_list_provider_properties_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_list_provider_properties_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_list_provider_properties_request_t =
    Struct_xcb_randr_list_provider_properties_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_list_provider_properties_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_atoms: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_list_provider_properties_reply_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_list_provider_properties_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_list_provider_properties_reply_t =
    Struct_xcb_randr_list_provider_properties_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_provider_property_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_query_provider_property_cookie_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_query_provider_property_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_provider_property_cookie_t =
    Struct_xcb_randr_query_provider_property_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_provider_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_query_provider_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_query_provider_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_provider_property_request_t =
    Struct_xcb_randr_query_provider_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_query_provider_property_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pending: uint8_t,
    pub range: uint8_t,
    pub immutable: uint8_t,
    pub pad1: [uint8_t; 21usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_query_provider_property_reply_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_query_provider_property_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_query_provider_property_reply_t =
    Struct_xcb_randr_query_provider_property_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_configure_provider_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub pending: uint8_t,
    pub range: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for
 Struct_xcb_randr_configure_provider_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_configure_provider_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_configure_provider_property_request_t =
    Struct_xcb_randr_configure_provider_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_change_provider_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub format: uint8_t,
    pub mode: uint8_t,
    pub pad0: [uint8_t; 2usize],
    pub num_items: uint32_t,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_change_provider_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_change_provider_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_change_provider_property_request_t =
    Struct_xcb_randr_change_provider_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_delete_provider_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
}
impl ::std::clone::Clone for
 Struct_xcb_randr_delete_provider_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_delete_provider_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_delete_provider_property_request_t =
    Struct_xcb_randr_delete_provider_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_provider_property_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_randr_get_provider_property_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_provider_property_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_provider_property_cookie_t =
    Struct_xcb_randr_get_provider_property_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_provider_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub long_offset: uint32_t,
    pub long_length: uint32_t,
    pub _delete: uint8_t,
    pub pending: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_provider_property_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_provider_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_provider_property_request_t =
    Struct_xcb_randr_get_provider_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_get_provider_property_reply_t {
    pub response_type: uint8_t,
    pub format: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub _type: xcb_atom_t,
    pub bytes_after: uint32_t,
    pub num_items: uint32_t,
    pub pad0: [uint8_t; 12usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_get_provider_property_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_randr_get_provider_property_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_get_provider_property_reply_t =
    Struct_xcb_randr_get_provider_property_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_screen_change_notify_event_t {
    pub response_type: uint8_t,
    pub rotation: uint8_t,
    pub sequence: uint16_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub request_window: xcb_window_t,
    pub sizeID: uint16_t,
    pub subpixel_order: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub mwidth: uint16_t,
    pub mheight: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_screen_change_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_screen_change_notify_event_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_screen_change_notify_event_t =
    Struct_xcb_randr_screen_change_notify_event_t;
pub type Enum_xcb_randr_notify_t = ::libc::c_uint;
pub const XCB_RANDR_NOTIFY_CRTC_CHANGE: ::libc::c_uint = 0;
pub const XCB_RANDR_NOTIFY_OUTPUT_CHANGE: ::libc::c_uint = 1;
pub const XCB_RANDR_NOTIFY_OUTPUT_PROPERTY: ::libc::c_uint = 2;
pub const XCB_RANDR_NOTIFY_PROVIDER_CHANGE: ::libc::c_uint = 3;
pub const XCB_RANDR_NOTIFY_PROVIDER_PROPERTY: ::libc::c_uint = 4;
pub const XCB_RANDR_NOTIFY_RESOURCE_CHANGE: ::libc::c_uint = 5;
pub type xcb_randr_notify_t = Enum_xcb_randr_notify_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_crtc_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub crtc: xcb_randr_crtc_t,
    pub mode: xcb_randr_mode_t,
    pub rotation: uint16_t,
    pub pad0: [uint8_t; 2usize],
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_crtc_change_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_crtc_change_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_crtc_change_t = Struct_xcb_randr_crtc_change_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_crtc_change_iterator_t {
    pub data: *mut xcb_randr_crtc_change_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_crtc_change_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_crtc_change_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_crtc_change_iterator_t =
    Struct_xcb_randr_crtc_change_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_output_change_t {
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
    pub crtc: xcb_randr_crtc_t,
    pub mode: xcb_randr_mode_t,
    pub rotation: uint16_t,
    pub connection: uint8_t,
    pub subpixel_order: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_output_change_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_output_change_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_output_change_t = Struct_xcb_randr_output_change_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_output_change_iterator_t {
    pub data: *mut xcb_randr_output_change_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_output_change_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_output_change_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_output_change_iterator_t =
    Struct_xcb_randr_output_change_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_output_property_t {
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
    pub atom: xcb_atom_t,
    pub timestamp: xcb_timestamp_t,
    pub status: uint8_t,
    pub pad0: [uint8_t; 11usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_output_property_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_output_property_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_output_property_t = Struct_xcb_randr_output_property_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_output_property_iterator_t {
    pub data: *mut xcb_randr_output_property_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_output_property_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_output_property_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_output_property_iterator_t =
    Struct_xcb_randr_output_property_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_provider_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub provider: xcb_randr_provider_t,
    pub pad0: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_provider_change_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_provider_change_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_provider_change_t = Struct_xcb_randr_provider_change_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_provider_change_iterator_t {
    pub data: *mut xcb_randr_provider_change_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_provider_change_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_provider_change_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_provider_change_iterator_t =
    Struct_xcb_randr_provider_change_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_provider_property_t {
    pub window: xcb_window_t,
    pub provider: xcb_randr_provider_t,
    pub atom: xcb_atom_t,
    pub timestamp: xcb_timestamp_t,
    pub state: uint8_t,
    pub pad0: [uint8_t; 11usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_provider_property_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_provider_property_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_provider_property_t = Struct_xcb_randr_provider_property_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_provider_property_iterator_t {
    pub data: *mut xcb_randr_provider_property_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_provider_property_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_provider_property_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_provider_property_iterator_t =
    Struct_xcb_randr_provider_property_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_resource_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub pad0: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_randr_resource_change_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_resource_change_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_resource_change_t = Struct_xcb_randr_resource_change_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_resource_change_iterator_t {
    pub data: *mut xcb_randr_resource_change_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_resource_change_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_resource_change_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_resource_change_iterator_t =
    Struct_xcb_randr_resource_change_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_xcb_randr_notify_data_t {
    pub _bindgen_data_: [u32; 7usize],
}
impl Union_xcb_randr_notify_data_t {
    pub unsafe fn cc(&mut self) -> *mut xcb_randr_crtc_change_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn oc(&mut self) -> *mut xcb_randr_output_change_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn op(&mut self) -> *mut xcb_randr_output_property_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pc(&mut self) -> *mut xcb_randr_provider_change_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pp(&mut self) -> *mut xcb_randr_provider_property_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rc(&mut self) -> *mut xcb_randr_resource_change_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_xcb_randr_notify_data_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_xcb_randr_notify_data_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_notify_data_t = Union_xcb_randr_notify_data_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_notify_data_iterator_t {
    pub data: *mut xcb_randr_notify_data_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_randr_notify_data_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_notify_data_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_notify_data_iterator_t =
    Struct_xcb_randr_notify_data_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_randr_notify_event_t {
    pub response_type: uint8_t,
    pub subCode: uint8_t,
    pub sequence: uint16_t,
    pub u: xcb_randr_notify_data_t,
}
impl ::std::clone::Clone for Struct_xcb_randr_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_randr_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_randr_notify_event_t = Struct_xcb_randr_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub back_pixmap: uint32_t,
    pub back_pixel: uint32_t,
    pub border_pixmap: uint32_t,
    pub border_pixel: uint32_t,
    pub bit_gravity: uint32_t,
    pub win_gravity: uint32_t,
    pub backing_store: uint32_t,
    pub backing_planes: uint32_t,
    pub backing_pixel: uint32_t,
    pub override_redirect: uint32_t,
    pub save_under: uint32_t,
    pub event_mask: uint32_t,
    pub dont_propagate: uint32_t,
    pub colormap: uint32_t,
    pub cursor: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_params_cw_t = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub x: int32_t,
    pub y: int32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub border_width: uint32_t,
    pub sibling: uint32_t,
    pub stack_mode: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_params_configure_window_t = Struct_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub function: uint32_t,
    pub plane_mask: uint32_t,
    pub foreground: uint32_t,
    pub background: uint32_t,
    pub line_width: uint32_t,
    pub line_style: uint32_t,
    pub cap_style: uint32_t,
    pub join_style: uint32_t,
    pub fill_style: uint32_t,
    pub fill_rule: uint32_t,
    pub tile: uint32_t,
    pub stipple: uint32_t,
    pub tile_stipple_origin_x: uint32_t,
    pub tile_stipple_origin_y: uint32_t,
    pub font: uint32_t,
    pub subwindow_mode: uint32_t,
    pub graphics_exposures: uint32_t,
    pub clip_originX: uint32_t,
    pub clip_originY: uint32_t,
    pub mask: uint32_t,
    pub dash_offset: uint32_t,
    pub dash_list: uint32_t,
    pub arc_mode: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_params_gc_t = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub key_click_percent: uint32_t,
    pub bell_percent: uint32_t,
    pub bell_pitch: uint32_t,
    pub bell_duration: uint32_t,
    pub led: uint32_t,
    pub led_mode: uint32_t,
    pub key: uint32_t,
    pub auto_repeat_mode: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_params_keyboard_t = Struct_Unnamed11;
pub type xcb_shape_op_t = uint8_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_op_iterator_t {
    pub data: *mut xcb_shape_op_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_shape_op_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_op_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_op_iterator_t = Struct_xcb_shape_op_iterator_t;
pub type xcb_shape_kind_t = uint8_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_kind_iterator_t {
    pub data: *mut xcb_shape_kind_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_shape_kind_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_kind_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_kind_iterator_t = Struct_xcb_shape_kind_iterator_t;
pub type Enum_xcb_shape_so_t = ::libc::c_uint;
pub const XCB_SHAPE_SO_SET: ::libc::c_uint = 0;
pub const XCB_SHAPE_SO_UNION: ::libc::c_uint = 1;
pub const XCB_SHAPE_SO_INTERSECT: ::libc::c_uint = 2;
pub const XCB_SHAPE_SO_SUBTRACT: ::libc::c_uint = 3;
pub const XCB_SHAPE_SO_INVERT: ::libc::c_uint = 4;
pub type xcb_shape_so_t = Enum_xcb_shape_so_t;
pub type Enum_xcb_shape_sk_t = ::libc::c_uint;
pub const XCB_SHAPE_SK_BOUNDING: ::libc::c_uint = 0;
pub const XCB_SHAPE_SK_CLIP: ::libc::c_uint = 1;
pub const XCB_SHAPE_SK_INPUT: ::libc::c_uint = 2;
pub type xcb_shape_sk_t = Enum_xcb_shape_sk_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_notify_event_t {
    pub response_type: uint8_t,
    pub shape_kind: xcb_shape_kind_t,
    pub sequence: uint16_t,
    pub affected_window: xcb_window_t,
    pub extents_x: int16_t,
    pub extents_y: int16_t,
    pub extents_width: uint16_t,
    pub extents_height: uint16_t,
    pub server_time: xcb_timestamp_t,
    pub shaped: uint8_t,
    pub pad0: [uint8_t; 11usize],
}
impl ::std::clone::Clone for Struct_xcb_shape_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_notify_event_t = Struct_xcb_shape_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_query_version_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_shape_query_version_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_query_version_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_query_version_cookie_t =
    Struct_xcb_shape_query_version_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_query_version_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_query_version_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_query_version_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_query_version_request_t =
    Struct_xcb_shape_query_version_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_query_version_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub major_version: uint16_t,
    pub minor_version: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_query_version_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_query_version_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_query_version_reply_t =
    Struct_xcb_shape_query_version_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_rectangles_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub operation: xcb_shape_op_t,
    pub destination_kind: xcb_shape_kind_t,
    pub ordering: uint8_t,
    pub pad0: uint8_t,
    pub destination_window: xcb_window_t,
    pub x_offset: int16_t,
    pub y_offset: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_rectangles_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_rectangles_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_rectangles_request_t =
    Struct_xcb_shape_rectangles_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_mask_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub operation: xcb_shape_op_t,
    pub destination_kind: xcb_shape_kind_t,
    pub pad0: [uint8_t; 2usize],
    pub destination_window: xcb_window_t,
    pub x_offset: int16_t,
    pub y_offset: int16_t,
    pub source_bitmap: xcb_pixmap_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_mask_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_mask_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_mask_request_t = Struct_xcb_shape_mask_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_combine_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub operation: xcb_shape_op_t,
    pub destination_kind: xcb_shape_kind_t,
    pub source_kind: xcb_shape_kind_t,
    pub pad0: uint8_t,
    pub destination_window: xcb_window_t,
    pub x_offset: int16_t,
    pub y_offset: int16_t,
    pub source_window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_combine_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_combine_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_combine_request_t = Struct_xcb_shape_combine_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_offset_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub destination_kind: xcb_shape_kind_t,
    pub pad0: [uint8_t; 3usize],
    pub destination_window: xcb_window_t,
    pub x_offset: int16_t,
    pub y_offset: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_offset_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_offset_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_offset_request_t = Struct_xcb_shape_offset_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_query_extents_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_shape_query_extents_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_query_extents_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_query_extents_cookie_t =
    Struct_xcb_shape_query_extents_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_query_extents_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub destination_window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_query_extents_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_query_extents_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_query_extents_request_t =
    Struct_xcb_shape_query_extents_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_query_extents_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub bounding_shaped: uint8_t,
    pub clip_shaped: uint8_t,
    pub pad1: [uint8_t; 2usize],
    pub bounding_shape_extents_x: int16_t,
    pub bounding_shape_extents_y: int16_t,
    pub bounding_shape_extents_width: uint16_t,
    pub bounding_shape_extents_height: uint16_t,
    pub clip_shape_extents_x: int16_t,
    pub clip_shape_extents_y: int16_t,
    pub clip_shape_extents_width: uint16_t,
    pub clip_shape_extents_height: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_query_extents_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_query_extents_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_query_extents_reply_t =
    Struct_xcb_shape_query_extents_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_select_input_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub destination_window: xcb_window_t,
    pub enable: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_shape_select_input_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_select_input_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_select_input_request_t =
    Struct_xcb_shape_select_input_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_input_selected_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_shape_input_selected_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_input_selected_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_input_selected_cookie_t =
    Struct_xcb_shape_input_selected_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_input_selected_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub destination_window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_input_selected_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_input_selected_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_input_selected_request_t =
    Struct_xcb_shape_input_selected_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_input_selected_reply_t {
    pub response_type: uint8_t,
    pub enabled: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_shape_input_selected_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_input_selected_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_input_selected_reply_t =
    Struct_xcb_shape_input_selected_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_get_rectangles_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_shape_get_rectangles_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_get_rectangles_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_get_rectangles_cookie_t =
    Struct_xcb_shape_get_rectangles_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_get_rectangles_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub source_kind: xcb_shape_kind_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_shape_get_rectangles_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_get_rectangles_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_get_rectangles_request_t =
    Struct_xcb_shape_get_rectangles_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_shape_get_rectangles_reply_t {
    pub response_type: uint8_t,
    pub ordering: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub rectangles_len: uint32_t,
    pub pad0: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_shape_get_rectangles_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_shape_get_rectangles_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_shape_get_rectangles_reply_t =
    Struct_xcb_shape_get_rectangles_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_query_version_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_query_version_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_query_version_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_query_version_cookie_t =
    Struct_xcb_xfixes_query_version_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_query_version_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub client_major_version: uint32_t,
    pub client_minor_version: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_query_version_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_query_version_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_query_version_request_t =
    Struct_xcb_xfixes_query_version_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_query_version_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub major_version: uint32_t,
    pub minor_version: uint32_t,
    pub pad1: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_xcb_xfixes_query_version_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_query_version_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_query_version_reply_t =
    Struct_xcb_xfixes_query_version_reply_t;
pub type Enum_xcb_xfixes_save_set_mode_t = ::libc::c_uint;
pub const XCB_XFIXES_SAVE_SET_MODE_INSERT: ::libc::c_uint = 0;
pub const XCB_XFIXES_SAVE_SET_MODE_DELETE: ::libc::c_uint = 1;
pub type xcb_xfixes_save_set_mode_t = Enum_xcb_xfixes_save_set_mode_t;
pub type Enum_xcb_xfixes_save_set_target_t = ::libc::c_uint;
pub const XCB_XFIXES_SAVE_SET_TARGET_NEAREST: ::libc::c_uint = 0;
pub const XCB_XFIXES_SAVE_SET_TARGET_ROOT: ::libc::c_uint = 1;
pub type xcb_xfixes_save_set_target_t = Enum_xcb_xfixes_save_set_target_t;
pub type Enum_xcb_xfixes_save_set_mapping_t = ::libc::c_uint;
pub const XCB_XFIXES_SAVE_SET_MAPPING_MAP: ::libc::c_uint = 0;
pub const XCB_XFIXES_SAVE_SET_MAPPING_UNMAP: ::libc::c_uint = 1;
pub type xcb_xfixes_save_set_mapping_t = Enum_xcb_xfixes_save_set_mapping_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_change_save_set_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub mode: uint8_t,
    pub target: uint8_t,
    pub map: uint8_t,
    pub pad0: uint8_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_change_save_set_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_change_save_set_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_change_save_set_request_t =
    Struct_xcb_xfixes_change_save_set_request_t;
pub type Enum_xcb_xfixes_selection_event_t = ::libc::c_uint;
pub const XCB_XFIXES_SELECTION_EVENT_SET_SELECTION_OWNER: ::libc::c_uint = 0;
pub const XCB_XFIXES_SELECTION_EVENT_SELECTION_WINDOW_DESTROY: ::libc::c_uint
          =
    1;
pub const XCB_XFIXES_SELECTION_EVENT_SELECTION_CLIENT_CLOSE: ::libc::c_uint =
    2;
pub type xcb_xfixes_selection_event_t = Enum_xcb_xfixes_selection_event_t;
pub type Enum_xcb_xfixes_selection_event_mask_t = ::libc::c_uint;
pub const XCB_XFIXES_SELECTION_EVENT_MASK_SET_SELECTION_OWNER: ::libc::c_uint
          =
    1;
pub const XCB_XFIXES_SELECTION_EVENT_MASK_SELECTION_WINDOW_DESTROY:
          ::libc::c_uint =
    2;
pub const XCB_XFIXES_SELECTION_EVENT_MASK_SELECTION_CLIENT_CLOSE:
          ::libc::c_uint =
    4;
pub type xcb_xfixes_selection_event_mask_t =
    Enum_xcb_xfixes_selection_event_mask_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_selection_notify_event_t {
    pub response_type: uint8_t,
    pub subtype: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
    pub timestamp: xcb_timestamp_t,
    pub selection_timestamp: xcb_timestamp_t,
    pub pad0: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_xcb_xfixes_selection_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_selection_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_selection_notify_event_t =
    Struct_xcb_xfixes_selection_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_select_selection_input_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub selection: xcb_atom_t,
    pub event_mask: uint32_t,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_select_selection_input_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_select_selection_input_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_select_selection_input_request_t =
    Struct_xcb_xfixes_select_selection_input_request_t;
pub type Enum_xcb_xfixes_cursor_notify_t = ::libc::c_uint;
pub const XCB_XFIXES_CURSOR_NOTIFY_DISPLAY_CURSOR: ::libc::c_uint = 0;
pub type xcb_xfixes_cursor_notify_t = Enum_xcb_xfixes_cursor_notify_t;
pub type Enum_xcb_xfixes_cursor_notify_mask_t = ::libc::c_uint;
pub const XCB_XFIXES_CURSOR_NOTIFY_MASK_DISPLAY_CURSOR: ::libc::c_uint = 1;
pub type xcb_xfixes_cursor_notify_mask_t =
    Enum_xcb_xfixes_cursor_notify_mask_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_cursor_notify_event_t {
    pub response_type: uint8_t,
    pub subtype: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub cursor_serial: uint32_t,
    pub timestamp: xcb_timestamp_t,
    pub name: xcb_atom_t,
    pub pad0: [uint8_t; 12usize],
}
impl ::std::clone::Clone for Struct_xcb_xfixes_cursor_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_cursor_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_cursor_notify_event_t =
    Struct_xcb_xfixes_cursor_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_select_cursor_input_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub event_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_select_cursor_input_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_select_cursor_input_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_select_cursor_input_request_t =
    Struct_xcb_xfixes_select_cursor_input_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_image_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_get_cursor_image_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_get_cursor_image_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_image_cookie_t =
    Struct_xcb_xfixes_get_cursor_image_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_image_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_get_cursor_image_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_get_cursor_image_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_image_request_t =
    Struct_xcb_xfixes_get_cursor_image_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_image_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub xhot: uint16_t,
    pub yhot: uint16_t,
    pub cursor_serial: uint32_t,
    pub pad1: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_xcb_xfixes_get_cursor_image_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_get_cursor_image_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_image_reply_t =
    Struct_xcb_xfixes_get_cursor_image_reply_t;
pub type xcb_xfixes_region_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_region_iterator_t {
    pub data: *mut xcb_xfixes_region_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_region_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_region_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_region_iterator_t = Struct_xcb_xfixes_region_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_bad_region_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_bad_region_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_bad_region_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_bad_region_error_t = Struct_xcb_xfixes_bad_region_error_t;
pub type Enum_xcb_xfixes_region_enum_t = ::libc::c_uint;
pub const XCB_XFIXES_REGION_NONE: ::libc::c_uint = 0;
pub type xcb_xfixes_region_enum_t = Enum_xcb_xfixes_region_enum_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_create_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_create_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_create_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_create_region_request_t =
    Struct_xcb_xfixes_create_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_create_region_from_bitmap_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
    pub bitmap: xcb_pixmap_t,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_create_region_from_bitmap_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_create_region_from_bitmap_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_create_region_from_bitmap_request_t =
    Struct_xcb_xfixes_create_region_from_bitmap_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_create_region_from_window_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
    pub window: xcb_window_t,
    pub kind: xcb_shape_kind_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_create_region_from_window_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_create_region_from_window_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_create_region_from_window_request_t =
    Struct_xcb_xfixes_create_region_from_window_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_create_region_from_gc_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
    pub gc: xcb_gcontext_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_create_region_from_gc_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_create_region_from_gc_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_create_region_from_gc_request_t =
    Struct_xcb_xfixes_create_region_from_gc_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_create_region_from_picture_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
    pub picture: xcb_render_picture_t,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_create_region_from_picture_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_create_region_from_picture_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_create_region_from_picture_request_t =
    Struct_xcb_xfixes_create_region_from_picture_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_destroy_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_destroy_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_destroy_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_destroy_region_request_t =
    Struct_xcb_xfixes_destroy_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_set_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_set_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_set_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_set_region_request_t =
    Struct_xcb_xfixes_set_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_copy_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub source: xcb_xfixes_region_t,
    pub destination: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_copy_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_copy_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_copy_region_request_t =
    Struct_xcb_xfixes_copy_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_union_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub source1: xcb_xfixes_region_t,
    pub source2: xcb_xfixes_region_t,
    pub destination: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_union_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_union_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_union_region_request_t =
    Struct_xcb_xfixes_union_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_intersect_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub source1: xcb_xfixes_region_t,
    pub source2: xcb_xfixes_region_t,
    pub destination: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_intersect_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_intersect_region_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_intersect_region_request_t =
    Struct_xcb_xfixes_intersect_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_subtract_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub source1: xcb_xfixes_region_t,
    pub source2: xcb_xfixes_region_t,
    pub destination: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_subtract_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_subtract_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_subtract_region_request_t =
    Struct_xcb_xfixes_subtract_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_invert_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub source: xcb_xfixes_region_t,
    pub bounds: xcb_rectangle_t,
    pub destination: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_invert_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_invert_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_invert_region_request_t =
    Struct_xcb_xfixes_invert_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_translate_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
    pub dx: int16_t,
    pub dy: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_translate_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_translate_region_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_translate_region_request_t =
    Struct_xcb_xfixes_translate_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_region_extents_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub source: xcb_xfixes_region_t,
    pub destination: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_region_extents_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_region_extents_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_region_extents_request_t =
    Struct_xcb_xfixes_region_extents_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_fetch_region_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_fetch_region_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_fetch_region_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_fetch_region_cookie_t =
    Struct_xcb_xfixes_fetch_region_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_fetch_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub region: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_fetch_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_fetch_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_fetch_region_request_t =
    Struct_xcb_xfixes_fetch_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_fetch_region_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub extents: xcb_rectangle_t,
    pub pad1: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_xcb_xfixes_fetch_region_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_fetch_region_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_fetch_region_reply_t =
    Struct_xcb_xfixes_fetch_region_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_set_gc_clip_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
    pub region: xcb_xfixes_region_t,
    pub x_origin: int16_t,
    pub y_origin: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_set_gc_clip_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_set_gc_clip_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_set_gc_clip_region_request_t =
    Struct_xcb_xfixes_set_gc_clip_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_set_window_shape_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub dest: xcb_window_t,
    pub dest_kind: xcb_shape_kind_t,
    pub pad0: [uint8_t; 3usize],
    pub x_offset: int16_t,
    pub y_offset: int16_t,
    pub region: xcb_xfixes_region_t,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_set_window_shape_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_set_window_shape_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_set_window_shape_region_request_t =
    Struct_xcb_xfixes_set_window_shape_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_set_picture_clip_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub picture: xcb_render_picture_t,
    pub region: xcb_xfixes_region_t,
    pub x_origin: int16_t,
    pub y_origin: int16_t,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_set_picture_clip_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_set_picture_clip_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_set_picture_clip_region_request_t =
    Struct_xcb_xfixes_set_picture_clip_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_set_cursor_name_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub cursor: xcb_cursor_t,
    pub nbytes: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_xfixes_set_cursor_name_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_set_cursor_name_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_set_cursor_name_request_t =
    Struct_xcb_xfixes_set_cursor_name_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_name_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_get_cursor_name_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_get_cursor_name_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_name_cookie_t =
    Struct_xcb_xfixes_get_cursor_name_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_name_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub cursor: xcb_cursor_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_get_cursor_name_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_get_cursor_name_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_name_request_t =
    Struct_xcb_xfixes_get_cursor_name_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_name_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub atom: xcb_atom_t,
    pub nbytes: uint16_t,
    pub pad1: [uint8_t; 18usize],
}
impl ::std::clone::Clone for Struct_xcb_xfixes_get_cursor_name_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_get_cursor_name_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_name_reply_t =
    Struct_xcb_xfixes_get_cursor_name_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_image_and_name_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_get_cursor_image_and_name_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_get_cursor_image_and_name_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_image_and_name_cookie_t =
    Struct_xcb_xfixes_get_cursor_image_and_name_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_image_and_name_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_get_cursor_image_and_name_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_get_cursor_image_and_name_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_image_and_name_request_t =
    Struct_xcb_xfixes_get_cursor_image_and_name_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_get_cursor_image_and_name_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub xhot: uint16_t,
    pub yhot: uint16_t,
    pub cursor_serial: uint32_t,
    pub cursor_atom: xcb_atom_t,
    pub nbytes: uint16_t,
    pub pad1: [uint8_t; 2usize],
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_get_cursor_image_and_name_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_get_cursor_image_and_name_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_get_cursor_image_and_name_reply_t =
    Struct_xcb_xfixes_get_cursor_image_and_name_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_change_cursor_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub source: xcb_cursor_t,
    pub destination: xcb_cursor_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_change_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_change_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_change_cursor_request_t =
    Struct_xcb_xfixes_change_cursor_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_change_cursor_by_name_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub src: xcb_cursor_t,
    pub nbytes: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_xfixes_change_cursor_by_name_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_change_cursor_by_name_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_change_cursor_by_name_request_t =
    Struct_xcb_xfixes_change_cursor_by_name_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_expand_region_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub source: xcb_xfixes_region_t,
    pub destination: xcb_xfixes_region_t,
    pub left: uint16_t,
    pub right: uint16_t,
    pub top: uint16_t,
    pub bottom: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_expand_region_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_expand_region_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_expand_region_request_t =
    Struct_xcb_xfixes_expand_region_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_hide_cursor_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_hide_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_hide_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_hide_cursor_request_t =
    Struct_xcb_xfixes_hide_cursor_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_show_cursor_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_show_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_show_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_show_cursor_request_t =
    Struct_xcb_xfixes_show_cursor_request_t;
pub type xcb_xfixes_barrier_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_barrier_iterator_t {
    pub data: *mut xcb_xfixes_barrier_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_xfixes_barrier_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_xfixes_barrier_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_barrier_iterator_t = Struct_xcb_xfixes_barrier_iterator_t;
pub type Enum_xcb_xfixes_barrier_directions_t = ::libc::c_uint;
pub const XCB_XFIXES_BARRIER_DIRECTIONS_POSITIVE_X: ::libc::c_uint = 1;
pub const XCB_XFIXES_BARRIER_DIRECTIONS_POSITIVE_Y: ::libc::c_uint = 2;
pub const XCB_XFIXES_BARRIER_DIRECTIONS_NEGATIVE_X: ::libc::c_uint = 4;
pub const XCB_XFIXES_BARRIER_DIRECTIONS_NEGATIVE_Y: ::libc::c_uint = 8;
pub type xcb_xfixes_barrier_directions_t =
    Enum_xcb_xfixes_barrier_directions_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_create_pointer_barrier_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub barrier: xcb_xfixes_barrier_t,
    pub window: xcb_window_t,
    pub x1: uint16_t,
    pub y1: uint16_t,
    pub x2: uint16_t,
    pub y2: uint16_t,
    pub directions: uint32_t,
    pub pad0: [uint8_t; 2usize],
    pub num_devices: uint16_t,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_create_pointer_barrier_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_create_pointer_barrier_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_create_pointer_barrier_request_t =
    Struct_xcb_xfixes_create_pointer_barrier_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_xfixes_delete_pointer_barrier_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub barrier: xcb_xfixes_barrier_t,
}
impl ::std::clone::Clone for
 Struct_xcb_xfixes_delete_pointer_barrier_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_xfixes_delete_pointer_barrier_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_xfixes_delete_pointer_barrier_request_t =
    Struct_xcb_xfixes_delete_pointer_barrier_request_t;
pub type xcb_input_event_class_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_event_class_iterator_t {
    pub data: *mut xcb_input_event_class_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_event_class_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_event_class_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_event_class_iterator_t =
    Struct_xcb_input_event_class_iterator_t;
pub type xcb_input_key_code_t = uint8_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_key_code_iterator_t {
    pub data: *mut xcb_input_key_code_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_key_code_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_key_code_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_key_code_iterator_t = Struct_xcb_input_key_code_iterator_t;
pub type xcb_input_device_id_t = uint16_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_id_iterator_t {
    pub data: *mut xcb_input_device_id_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_id_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_id_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_id_iterator_t =
    Struct_xcb_input_device_id_iterator_t;
pub type xcb_input_fp1616_t = int32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_fp1616_iterator_t {
    pub data: *mut xcb_input_fp1616_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_fp1616_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_fp1616_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_fp1616_iterator_t = Struct_xcb_input_fp1616_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_fp3232_t {
    pub integral: int32_t,
    pub frac: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_fp3232_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_fp3232_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_fp3232_t = Struct_xcb_input_fp3232_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_fp3232_iterator_t {
    pub data: *mut xcb_input_fp3232_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_fp3232_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_fp3232_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_fp3232_iterator_t = Struct_xcb_input_fp3232_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_extension_version_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_get_extension_version_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_extension_version_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_extension_version_cookie_t =
    Struct_xcb_input_get_extension_version_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_extension_version_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub name_len: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_extension_version_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_extension_version_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_extension_version_request_t =
    Struct_xcb_input_get_extension_version_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_extension_version_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub server_major: uint16_t,
    pub server_minor: uint16_t,
    pub present: uint8_t,
    pub pad1: [uint8_t; 19usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_extension_version_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_extension_version_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_extension_version_reply_t =
    Struct_xcb_input_get_extension_version_reply_t;
pub type Enum_xcb_input_device_use_t = ::libc::c_uint;
pub const XCB_INPUT_DEVICE_USE_IS_X_POINTER: ::libc::c_uint = 0;
pub const XCB_INPUT_DEVICE_USE_IS_X_KEYBOARD: ::libc::c_uint = 1;
pub const XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_DEVICE: ::libc::c_uint = 2;
pub const XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_KEYBOARD: ::libc::c_uint = 3;
pub const XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_POINTER: ::libc::c_uint = 4;
pub type xcb_input_device_use_t = Enum_xcb_input_device_use_t;
pub type Enum_xcb_input_input_class_t = ::libc::c_uint;
pub const XCB_INPUT_INPUT_CLASS_KEY: ::libc::c_uint = 0;
pub const XCB_INPUT_INPUT_CLASS_BUTTON: ::libc::c_uint = 1;
pub const XCB_INPUT_INPUT_CLASS_VALUATOR: ::libc::c_uint = 2;
pub const XCB_INPUT_INPUT_CLASS_FEEDBACK: ::libc::c_uint = 3;
pub const XCB_INPUT_INPUT_CLASS_PROXIMITY: ::libc::c_uint = 4;
pub const XCB_INPUT_INPUT_CLASS_FOCUS: ::libc::c_uint = 5;
pub const XCB_INPUT_INPUT_CLASS_OTHER: ::libc::c_uint = 6;
pub type xcb_input_input_class_t = Enum_xcb_input_input_class_t;
pub type Enum_xcb_input_valuator_mode_t = ::libc::c_uint;
pub const XCB_INPUT_VALUATOR_MODE_RELATIVE: ::libc::c_uint = 0;
pub const XCB_INPUT_VALUATOR_MODE_ABSOLUTE: ::libc::c_uint = 1;
pub type xcb_input_valuator_mode_t = Enum_xcb_input_valuator_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_info_t {
    pub device_type: xcb_atom_t,
    pub device_id: uint8_t,
    pub num_class_info: uint8_t,
    pub device_use: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_info_t = Struct_xcb_input_device_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_info_iterator_t {
    pub data: *mut xcb_input_device_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_info_iterator_t =
    Struct_xcb_input_device_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_key_info_t {
    pub class_id: uint8_t,
    pub len: uint8_t,
    pub min_keycode: xcb_input_key_code_t,
    pub max_keycode: xcb_input_key_code_t,
    pub num_keys: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_key_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_key_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_key_info_t = Struct_xcb_input_key_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_key_info_iterator_t {
    pub data: *mut xcb_input_key_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_key_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_key_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_key_info_iterator_t = Struct_xcb_input_key_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_button_info_t {
    pub class_id: uint8_t,
    pub len: uint8_t,
    pub num_buttons: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_button_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_button_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_button_info_t = Struct_xcb_input_button_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_button_info_iterator_t {
    pub data: *mut xcb_input_button_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_button_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_button_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_button_info_iterator_t =
    Struct_xcb_input_button_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_axis_info_t {
    pub resolution: uint32_t,
    pub minimum: int32_t,
    pub maximum: int32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_axis_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_axis_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_axis_info_t = Struct_xcb_input_axis_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_axis_info_iterator_t {
    pub data: *mut xcb_input_axis_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_axis_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_axis_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_axis_info_iterator_t =
    Struct_xcb_input_axis_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_valuator_info_t {
    pub class_id: uint8_t,
    pub len: uint8_t,
    pub axes_len: uint8_t,
    pub mode: uint8_t,
    pub motion_size: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_valuator_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_valuator_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_valuator_info_t = Struct_xcb_input_valuator_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_valuator_info_iterator_t {
    pub data: *mut xcb_input_valuator_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_valuator_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_valuator_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_valuator_info_iterator_t =
    Struct_xcb_input_valuator_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_input_info_t {
    pub class_id: uint8_t,
    pub len: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_input_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_input_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_input_info_t = Struct_xcb_input_input_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_input_info_iterator_t {
    pub data: *mut xcb_input_input_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_input_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_input_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_input_info_iterator_t =
    Struct_xcb_input_input_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_name_t {
    pub len: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_name_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_name_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_name_t = Struct_xcb_input_device_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_name_iterator_t {
    pub data: *mut xcb_input_device_name_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_name_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_name_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_name_iterator_t =
    Struct_xcb_input_device_name_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_list_input_devices_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_list_input_devices_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_list_input_devices_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_list_input_devices_cookie_t =
    Struct_xcb_input_list_input_devices_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_list_input_devices_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_list_input_devices_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_list_input_devices_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_list_input_devices_request_t =
    Struct_xcb_input_list_input_devices_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_list_input_devices_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub devices_len: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_list_input_devices_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_list_input_devices_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_list_input_devices_reply_t =
    Struct_xcb_input_list_input_devices_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_input_class_info_t {
    pub class_id: uint8_t,
    pub event_type_base: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_input_class_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_input_class_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_input_class_info_t = Struct_xcb_input_input_class_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_input_class_info_iterator_t {
    pub data: *mut xcb_input_input_class_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_input_class_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_input_class_info_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_input_class_info_iterator_t =
    Struct_xcb_input_input_class_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_open_device_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_open_device_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_open_device_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_open_device_cookie_t =
    Struct_xcb_input_open_device_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_open_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_open_device_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_open_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_open_device_request_t =
    Struct_xcb_input_open_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_open_device_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_classes: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_open_device_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_open_device_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_open_device_reply_t = Struct_xcb_input_open_device_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_close_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_close_device_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_close_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_close_device_request_t =
    Struct_xcb_input_close_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_mode_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_set_device_mode_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_set_device_mode_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_mode_cookie_t =
    Struct_xcb_input_set_device_mode_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_mode_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub mode: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_set_device_mode_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_set_device_mode_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_mode_request_t =
    Struct_xcb_input_set_device_mode_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_mode_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_set_device_mode_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_set_device_mode_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_mode_reply_t =
    Struct_xcb_input_set_device_mode_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_select_extension_event_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub num_classes: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_select_extension_event_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_select_extension_event_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_select_extension_event_request_t =
    Struct_xcb_input_select_extension_event_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_selected_extension_events_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_selected_extension_events_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_selected_extension_events_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_selected_extension_events_cookie_t =
    Struct_xcb_input_get_selected_extension_events_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_selected_extension_events_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_selected_extension_events_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_selected_extension_events_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_selected_extension_events_request_t =
    Struct_xcb_input_get_selected_extension_events_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_selected_extension_events_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_this_classes: uint16_t,
    pub num_all_classes: uint16_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_selected_extension_events_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_selected_extension_events_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_selected_extension_events_reply_t =
    Struct_xcb_input_get_selected_extension_events_reply_t;
pub type Enum_xcb_input_propagate_mode_t = ::libc::c_uint;
pub const XCB_INPUT_PROPAGATE_MODE_ADD_TO_LIST: ::libc::c_uint = 0;
pub const XCB_INPUT_PROPAGATE_MODE_DELETE_FROM_LIST: ::libc::c_uint = 1;
pub type xcb_input_propagate_mode_t = Enum_xcb_input_propagate_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_device_dont_propagate_list_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub num_classes: uint16_t,
    pub mode: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for
 Struct_xcb_input_change_device_dont_propagate_list_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_device_dont_propagate_list_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_device_dont_propagate_list_request_t =
    Struct_xcb_input_change_device_dont_propagate_list_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_dont_propagate_list_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_dont_propagate_list_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_dont_propagate_list_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_dont_propagate_list_cookie_t =
    Struct_xcb_input_get_device_dont_propagate_list_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_dont_propagate_list_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_dont_propagate_list_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_dont_propagate_list_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_dont_propagate_list_request_t =
    Struct_xcb_input_get_device_dont_propagate_list_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_dont_propagate_list_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_classes: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_dont_propagate_list_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_dont_propagate_list_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_dont_propagate_list_reply_t =
    Struct_xcb_input_get_device_dont_propagate_list_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_time_coord_t {
    pub time: xcb_timestamp_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_time_coord_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_time_coord_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_time_coord_t = Struct_xcb_input_device_time_coord_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_time_coord_iterator_t {
    pub data: *mut xcb_input_device_time_coord_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_time_coord_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_time_coord_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_time_coord_iterator_t =
    Struct_xcb_input_device_time_coord_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_motion_events_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_motion_events_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_motion_events_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_motion_events_cookie_t =
    Struct_xcb_input_get_device_motion_events_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_motion_events_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub start: xcb_timestamp_t,
    pub stop: xcb_timestamp_t,
    pub device_id: uint8_t,
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_motion_events_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_motion_events_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_motion_events_request_t =
    Struct_xcb_input_get_device_motion_events_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_motion_events_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_events: uint32_t,
    pub num_axes: uint8_t,
    pub device_mode: uint8_t,
    pub pad1: [uint8_t; 18usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_motion_events_reply_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_motion_events_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_motion_events_reply_t =
    Struct_xcb_input_get_device_motion_events_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_keyboard_device_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_change_keyboard_device_cookie_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_keyboard_device_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_keyboard_device_cookie_t =
    Struct_xcb_input_change_keyboard_device_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_keyboard_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_change_keyboard_device_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_keyboard_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_keyboard_device_request_t =
    Struct_xcb_input_change_keyboard_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_keyboard_device_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_change_keyboard_device_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_keyboard_device_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_keyboard_device_reply_t =
    Struct_xcb_input_change_keyboard_device_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_pointer_device_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_change_pointer_device_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_pointer_device_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_pointer_device_cookie_t =
    Struct_xcb_input_change_pointer_device_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_pointer_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub x_axis: uint8_t,
    pub y_axis: uint8_t,
    pub device_id: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_change_pointer_device_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_pointer_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_pointer_device_request_t =
    Struct_xcb_input_change_pointer_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_pointer_device_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_change_pointer_device_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_pointer_device_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_pointer_device_reply_t =
    Struct_xcb_input_change_pointer_device_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_grab_device_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_grab_device_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_grab_device_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_grab_device_cookie_t =
    Struct_xcb_input_grab_device_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_grab_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub num_classes: uint16_t,
    pub this_device_mode: uint8_t,
    pub other_device_mode: uint8_t,
    pub owner_events: uint8_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_grab_device_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_grab_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_grab_device_request_t =
    Struct_xcb_input_grab_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_grab_device_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_grab_device_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_grab_device_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_grab_device_reply_t = Struct_xcb_input_grab_device_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_ungrab_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
    pub device_id: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_ungrab_device_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_ungrab_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_ungrab_device_request_t =
    Struct_xcb_input_ungrab_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_grab_device_key_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub num_classes: uint16_t,
    pub modifiers: uint16_t,
    pub modifier_device: uint8_t,
    pub grabbed_device: uint8_t,
    pub key: uint8_t,
    pub this_device_mode: uint8_t,
    pub other_device_mode: uint8_t,
    pub owner_events: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_grab_device_key_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_grab_device_key_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_grab_device_key_request_t =
    Struct_xcb_input_grab_device_key_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_ungrab_device_key_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub grabWindow: xcb_window_t,
    pub modifiers: uint16_t,
    pub modifier_device: uint8_t,
    pub key: uint8_t,
    pub grabbed_device: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_ungrab_device_key_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_ungrab_device_key_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_ungrab_device_key_request_t =
    Struct_xcb_input_ungrab_device_key_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_grab_device_button_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub grabbed_device: uint8_t,
    pub modifier_device: uint8_t,
    pub num_classes: uint16_t,
    pub modifiers: uint16_t,
    pub this_device_mode: uint8_t,
    pub other_device_mode: uint8_t,
    pub button: uint8_t,
    pub owner_events: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_grab_device_button_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_grab_device_button_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_grab_device_button_request_t =
    Struct_xcb_input_grab_device_button_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_ungrab_device_button_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub modifiers: uint16_t,
    pub modifier_device: uint8_t,
    pub button: uint8_t,
    pub grabbed_device: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_ungrab_device_button_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_ungrab_device_button_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_ungrab_device_button_request_t =
    Struct_xcb_input_ungrab_device_button_request_t;
pub type Enum_xcb_input_device_input_mode_t = ::libc::c_uint;
pub const XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_THIS_DEVICE: ::libc::c_uint = 0;
pub const XCB_INPUT_DEVICE_INPUT_MODE_SYNC_THIS_DEVICE: ::libc::c_uint = 1;
pub const XCB_INPUT_DEVICE_INPUT_MODE_REPLAY_THIS_DEVICE: ::libc::c_uint = 2;
pub const XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_OTHER_DEVICES: ::libc::c_uint = 3;
pub const XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_ALL: ::libc::c_uint = 4;
pub const XCB_INPUT_DEVICE_INPUT_MODE_SYNC_ALL: ::libc::c_uint = 5;
pub type xcb_input_device_input_mode_t = Enum_xcb_input_device_input_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_allow_device_events_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
    pub mode: uint8_t,
    pub device_id: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_allow_device_events_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_allow_device_events_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_allow_device_events_request_t =
    Struct_xcb_input_allow_device_events_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_focus_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_focus_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_focus_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_focus_cookie_t =
    Struct_xcb_input_get_device_focus_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_focus_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_focus_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_focus_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_focus_request_t =
    Struct_xcb_input_get_device_focus_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_focus_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub focus: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub revert_to: uint8_t,
    pub pad1: [uint8_t; 15usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_focus_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_focus_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_focus_reply_t =
    Struct_xcb_input_get_device_focus_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_focus_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub focus: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub revert_to: uint8_t,
    pub device_id: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_set_device_focus_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_set_device_focus_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_focus_request_t =
    Struct_xcb_input_set_device_focus_request_t;
pub type Enum_xcb_input_feedback_class_t = ::libc::c_uint;
pub const XCB_INPUT_FEEDBACK_CLASS_KEYBOARD: ::libc::c_uint = 0;
pub const XCB_INPUT_FEEDBACK_CLASS_POINTER: ::libc::c_uint = 1;
pub const XCB_INPUT_FEEDBACK_CLASS_STRING: ::libc::c_uint = 2;
pub const XCB_INPUT_FEEDBACK_CLASS_INTEGER: ::libc::c_uint = 3;
pub const XCB_INPUT_FEEDBACK_CLASS_LED: ::libc::c_uint = 4;
pub const XCB_INPUT_FEEDBACK_CLASS_BELL: ::libc::c_uint = 5;
pub type xcb_input_feedback_class_t = Enum_xcb_input_feedback_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_kbd_feedback_state_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub pitch: uint16_t,
    pub duration: uint16_t,
    pub led_mask: uint32_t,
    pub led_values: uint32_t,
    pub global_auto_repeat: uint8_t,
    pub click: uint8_t,
    pub percent: uint8_t,
    pub pad0: uint8_t,
    pub auto_repeats: [uint8_t; 32usize],
}
impl ::std::clone::Clone for Struct_xcb_input_kbd_feedback_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_kbd_feedback_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_kbd_feedback_state_t =
    Struct_xcb_input_kbd_feedback_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_kbd_feedback_state_iterator_t {
    pub data: *mut xcb_input_kbd_feedback_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_kbd_feedback_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_kbd_feedback_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_kbd_feedback_state_iterator_t =
    Struct_xcb_input_kbd_feedback_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_ptr_feedback_state_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub pad0: [uint8_t; 2usize],
    pub accel_num: uint16_t,
    pub accel_denom: uint16_t,
    pub threshold: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_ptr_feedback_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_ptr_feedback_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_ptr_feedback_state_t =
    Struct_xcb_input_ptr_feedback_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_ptr_feedback_state_iterator_t {
    pub data: *mut xcb_input_ptr_feedback_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_ptr_feedback_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_ptr_feedback_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_ptr_feedback_state_iterator_t =
    Struct_xcb_input_ptr_feedback_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_integer_feedback_state_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub resolution: uint32_t,
    pub min_value: int32_t,
    pub max_value: int32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_integer_feedback_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_integer_feedback_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_integer_feedback_state_t =
    Struct_xcb_input_integer_feedback_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_integer_feedback_state_iterator_t {
    pub data: *mut xcb_input_integer_feedback_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for
 Struct_xcb_input_integer_feedback_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_integer_feedback_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_integer_feedback_state_iterator_t =
    Struct_xcb_input_integer_feedback_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_string_feedback_state_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub max_symbols: uint16_t,
    pub num_keysyms: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_string_feedback_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_string_feedback_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_string_feedback_state_t =
    Struct_xcb_input_string_feedback_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_string_feedback_state_iterator_t {
    pub data: *mut xcb_input_string_feedback_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_string_feedback_state_iterator_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_string_feedback_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_string_feedback_state_iterator_t =
    Struct_xcb_input_string_feedback_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_bell_feedback_state_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub percent: uint8_t,
    pub pad0: [uint8_t; 3usize],
    pub pitch: uint16_t,
    pub duration: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_bell_feedback_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_bell_feedback_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_bell_feedback_state_t =
    Struct_xcb_input_bell_feedback_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_bell_feedback_state_iterator_t {
    pub data: *mut xcb_input_bell_feedback_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_bell_feedback_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_bell_feedback_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_bell_feedback_state_iterator_t =
    Struct_xcb_input_bell_feedback_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_led_feedback_state_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub led_mask: uint32_t,
    pub led_values: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_led_feedback_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_led_feedback_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_led_feedback_state_t =
    Struct_xcb_input_led_feedback_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_led_feedback_state_iterator_t {
    pub data: *mut xcb_input_led_feedback_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_led_feedback_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_led_feedback_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_led_feedback_state_iterator_t =
    Struct_xcb_input_led_feedback_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_feedback_state_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_feedback_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_feedback_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_feedback_state_t = Struct_xcb_input_feedback_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_feedback_state_iterator_t {
    pub data: *mut xcb_input_feedback_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_feedback_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_feedback_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_feedback_state_iterator_t =
    Struct_xcb_input_feedback_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_feedback_control_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_get_feedback_control_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_feedback_control_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_feedback_control_cookie_t =
    Struct_xcb_input_get_feedback_control_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_feedback_control_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_feedback_control_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_feedback_control_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_feedback_control_request_t =
    Struct_xcb_input_get_feedback_control_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_feedback_control_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_feedbacks: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_feedback_control_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_feedback_control_reply_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_feedback_control_reply_t =
    Struct_xcb_input_get_feedback_control_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_kbd_feedback_ctl_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub key: xcb_input_key_code_t,
    pub auto_repeat_mode: uint8_t,
    pub key_click_percent: int8_t,
    pub bell_percent: int8_t,
    pub bell_pitch: int16_t,
    pub bell_duration: int16_t,
    pub led_mask: uint32_t,
    pub led_values: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_kbd_feedback_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_kbd_feedback_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_kbd_feedback_ctl_t = Struct_xcb_input_kbd_feedback_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_kbd_feedback_ctl_iterator_t {
    pub data: *mut xcb_input_kbd_feedback_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_kbd_feedback_ctl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_kbd_feedback_ctl_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_kbd_feedback_ctl_iterator_t =
    Struct_xcb_input_kbd_feedback_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_ptr_feedback_ctl_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub pad0: [uint8_t; 2usize],
    pub num: int16_t,
    pub denom: int16_t,
    pub threshold: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_ptr_feedback_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_ptr_feedback_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_ptr_feedback_ctl_t = Struct_xcb_input_ptr_feedback_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_ptr_feedback_ctl_iterator_t {
    pub data: *mut xcb_input_ptr_feedback_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_ptr_feedback_ctl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_ptr_feedback_ctl_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_ptr_feedback_ctl_iterator_t =
    Struct_xcb_input_ptr_feedback_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_integer_feedback_ctl_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub int_to_display: int32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_integer_feedback_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_integer_feedback_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_integer_feedback_ctl_t =
    Struct_xcb_input_integer_feedback_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_integer_feedback_ctl_iterator_t {
    pub data: *mut xcb_input_integer_feedback_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_integer_feedback_ctl_iterator_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_integer_feedback_ctl_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_integer_feedback_ctl_iterator_t =
    Struct_xcb_input_integer_feedback_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_string_feedback_ctl_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub pad0: [uint8_t; 2usize],
    pub num_keysyms: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_string_feedback_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_string_feedback_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_string_feedback_ctl_t =
    Struct_xcb_input_string_feedback_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_string_feedback_ctl_iterator_t {
    pub data: *mut xcb_input_string_feedback_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_string_feedback_ctl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_string_feedback_ctl_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_string_feedback_ctl_iterator_t =
    Struct_xcb_input_string_feedback_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_bell_feedback_ctl_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub percent: int8_t,
    pub pad0: [uint8_t; 3usize],
    pub pitch: int16_t,
    pub duration: int16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_bell_feedback_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_bell_feedback_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_bell_feedback_ctl_t = Struct_xcb_input_bell_feedback_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_bell_feedback_ctl_iterator_t {
    pub data: *mut xcb_input_bell_feedback_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_bell_feedback_ctl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_bell_feedback_ctl_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_bell_feedback_ctl_iterator_t =
    Struct_xcb_input_bell_feedback_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_led_feedback_ctl_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
    pub led_mask: uint32_t,
    pub led_values: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_led_feedback_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_led_feedback_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_led_feedback_ctl_t = Struct_xcb_input_led_feedback_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_led_feedback_ctl_iterator_t {
    pub data: *mut xcb_input_led_feedback_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_led_feedback_ctl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_led_feedback_ctl_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_led_feedback_ctl_iterator_t =
    Struct_xcb_input_led_feedback_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_feedback_ctl_t {
    pub class_id: uint8_t,
    pub feedback_id: uint8_t,
    pub len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_feedback_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_feedback_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_feedback_ctl_t = Struct_xcb_input_feedback_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_feedback_ctl_iterator_t {
    pub data: *mut xcb_input_feedback_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_feedback_ctl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_feedback_ctl_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_feedback_ctl_iterator_t =
    Struct_xcb_input_feedback_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_feedback_control_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub mask: uint32_t,
    pub device_id: uint8_t,
    pub feedback_id: uint8_t,
}
impl ::std::clone::Clone for
 Struct_xcb_input_change_feedback_control_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_feedback_control_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_feedback_control_request_t =
    Struct_xcb_input_change_feedback_control_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_key_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_key_mapping_cookie_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_key_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_key_mapping_cookie_t =
    Struct_xcb_input_get_device_key_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_key_mapping_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub first_keycode: xcb_input_key_code_t,
    pub count: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_key_mapping_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_key_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_key_mapping_request_t =
    Struct_xcb_input_get_device_key_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_key_mapping_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub keysyms_per_keycode: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_key_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_key_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_key_mapping_reply_t =
    Struct_xcb_input_get_device_key_mapping_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_device_key_mapping_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub first_keycode: xcb_input_key_code_t,
    pub keysyms_per_keycode: uint8_t,
    pub keycode_count: uint8_t,
}
impl ::std::clone::Clone for
 Struct_xcb_input_change_device_key_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_device_key_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_device_key_mapping_request_t =
    Struct_xcb_input_change_device_key_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_modifier_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_modifier_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_modifier_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_modifier_mapping_cookie_t =
    Struct_xcb_input_get_device_modifier_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_modifier_mapping_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_modifier_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_modifier_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_modifier_mapping_request_t =
    Struct_xcb_input_get_device_modifier_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_modifier_mapping_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub keycodes_per_modifier: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_modifier_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_modifier_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_modifier_mapping_reply_t =
    Struct_xcb_input_get_device_modifier_mapping_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_modifier_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_input_set_device_modifier_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_set_device_modifier_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_modifier_mapping_cookie_t =
    Struct_xcb_input_set_device_modifier_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_modifier_mapping_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub keycodes_per_modifier: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for
 Struct_xcb_input_set_device_modifier_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_set_device_modifier_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_modifier_mapping_request_t =
    Struct_xcb_input_set_device_modifier_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_modifier_mapping_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_set_device_modifier_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_set_device_modifier_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_modifier_mapping_reply_t =
    Struct_xcb_input_set_device_modifier_mapping_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_button_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_button_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_button_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_button_mapping_cookie_t =
    Struct_xcb_input_get_device_button_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_button_mapping_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_button_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_button_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_button_mapping_request_t =
    Struct_xcb_input_get_device_button_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_button_mapping_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub map_size: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_get_device_button_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_button_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_button_mapping_reply_t =
    Struct_xcb_input_get_device_button_mapping_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_button_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for
 Struct_xcb_input_set_device_button_mapping_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_set_device_button_mapping_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_button_mapping_cookie_t =
    Struct_xcb_input_set_device_button_mapping_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_button_mapping_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub map_size: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_set_device_button_mapping_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_set_device_button_mapping_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_button_mapping_request_t =
    Struct_xcb_input_set_device_button_mapping_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_button_mapping_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_set_device_button_mapping_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_set_device_button_mapping_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_button_mapping_reply_t =
    Struct_xcb_input_set_device_button_mapping_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_key_state_t {
    pub class_id: uint8_t,
    pub len: uint8_t,
    pub num_keys: uint8_t,
    pub pad0: uint8_t,
    pub keys: [uint8_t; 32usize],
}
impl ::std::clone::Clone for Struct_xcb_input_key_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_key_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_key_state_t = Struct_xcb_input_key_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_key_state_iterator_t {
    pub data: *mut xcb_input_key_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_key_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_key_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_key_state_iterator_t =
    Struct_xcb_input_key_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_button_state_t {
    pub class_id: uint8_t,
    pub len: uint8_t,
    pub num_buttons: uint8_t,
    pub pad0: uint8_t,
    pub buttons: [uint8_t; 32usize],
}
impl ::std::clone::Clone for Struct_xcb_input_button_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_button_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_button_state_t = Struct_xcb_input_button_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_button_state_iterator_t {
    pub data: *mut xcb_input_button_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_button_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_button_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_button_state_iterator_t =
    Struct_xcb_input_button_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_valuator_state_t {
    pub class_id: uint8_t,
    pub len: uint8_t,
    pub num_valuators: uint8_t,
    pub mode: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_valuator_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_valuator_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_valuator_state_t = Struct_xcb_input_valuator_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_valuator_state_iterator_t {
    pub data: *mut xcb_input_valuator_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_valuator_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_valuator_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_valuator_state_iterator_t =
    Struct_xcb_input_valuator_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_input_state_t {
    pub class_id: uint8_t,
    pub len: uint8_t,
    pub num_items: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_input_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_input_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_input_state_t = Struct_xcb_input_input_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_input_state_iterator_t {
    pub data: *mut xcb_input_input_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_input_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_input_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_input_state_iterator_t =
    Struct_xcb_input_input_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_query_device_state_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_query_device_state_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_query_device_state_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_query_device_state_cookie_t =
    Struct_xcb_input_query_device_state_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_query_device_state_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_query_device_state_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_query_device_state_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_query_device_state_request_t =
    Struct_xcb_input_query_device_state_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_query_device_state_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_classes: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_query_device_state_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_query_device_state_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_query_device_state_reply_t =
    Struct_xcb_input_query_device_state_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_send_extension_event_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub destination: xcb_window_t,
    pub device_id: uint8_t,
    pub propagate: uint8_t,
    pub num_classes: uint16_t,
    pub num_events: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_send_extension_event_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_send_extension_event_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_send_extension_event_request_t =
    Struct_xcb_input_send_extension_event_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_bell_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub feedback_id: uint8_t,
    pub feedback_class: uint8_t,
    pub percent: int8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_bell_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_bell_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_bell_request_t =
    Struct_xcb_input_device_bell_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_valuators_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_set_device_valuators_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_set_device_valuators_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_valuators_cookie_t =
    Struct_xcb_input_set_device_valuators_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_valuators_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub first_valuator: uint8_t,
    pub num_valuators: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_set_device_valuators_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_set_device_valuators_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_valuators_request_t =
    Struct_xcb_input_set_device_valuators_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_set_device_valuators_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_set_device_valuators_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_set_device_valuators_reply_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_set_device_valuators_reply_t =
    Struct_xcb_input_set_device_valuators_reply_t;
pub type Enum_xcb_input_device_control_t = ::libc::c_uint;
pub const XCB_INPUT_DEVICE_CONTROL_RESOLUTION: ::libc::c_uint = 1;
pub const XCB_INPUT_DEVICE_CONTROL_ABS_CALIB: ::libc::c_uint = 2;
pub const XCB_INPUT_DEVICE_CONTROL_CORE: ::libc::c_uint = 3;
pub const XCB_INPUT_DEVICE_CONTROL_ENABLE: ::libc::c_uint = 4;
pub const XCB_INPUT_DEVICE_CONTROL_ABS_AREA: ::libc::c_uint = 5;
pub type xcb_input_device_control_t = Enum_xcb_input_device_control_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_resolution_state_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub num_valuators: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_resolution_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_resolution_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_resolution_state_t =
    Struct_xcb_input_device_resolution_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_resolution_state_iterator_t {
    pub data: *mut xcb_input_device_resolution_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for
 Struct_xcb_input_device_resolution_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_resolution_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_resolution_state_iterator_t =
    Struct_xcb_input_device_resolution_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_abs_calib_state_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub min_x: int32_t,
    pub max_x: int32_t,
    pub min_y: int32_t,
    pub max_y: int32_t,
    pub flip_x: uint32_t,
    pub flip_y: uint32_t,
    pub rotation: uint32_t,
    pub button_threshold: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_abs_calib_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_abs_calib_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_abs_calib_state_t =
    Struct_xcb_input_device_abs_calib_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_abs_calib_state_iterator_t {
    pub data: *mut xcb_input_device_abs_calib_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for
 Struct_xcb_input_device_abs_calib_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_abs_calib_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_abs_calib_state_iterator_t =
    Struct_xcb_input_device_abs_calib_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_abs_area_state_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub offset_x: uint32_t,
    pub offset_y: uint32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub screen: uint32_t,
    pub following: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_abs_area_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_abs_area_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_abs_area_state_t =
    Struct_xcb_input_device_abs_area_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_abs_area_state_iterator_t {
    pub data: *mut xcb_input_device_abs_area_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_abs_area_state_iterator_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_abs_area_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_abs_area_state_iterator_t =
    Struct_xcb_input_device_abs_area_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_core_state_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub status: uint8_t,
    pub iscore: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_core_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_core_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_core_state_t = Struct_xcb_input_device_core_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_core_state_iterator_t {
    pub data: *mut xcb_input_device_core_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_core_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_core_state_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_core_state_iterator_t =
    Struct_xcb_input_device_core_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_enable_state_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub enable: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_enable_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_enable_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_enable_state_t =
    Struct_xcb_input_device_enable_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_enable_state_iterator_t {
    pub data: *mut xcb_input_device_enable_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_enable_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_enable_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_enable_state_iterator_t =
    Struct_xcb_input_device_enable_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_state_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_state_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_state_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_state_t = Struct_xcb_input_device_state_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_state_iterator_t {
    pub data: *mut xcb_input_device_state_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_state_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_state_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_state_iterator_t =
    Struct_xcb_input_device_state_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_control_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_control_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_control_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_control_cookie_t =
    Struct_xcb_input_get_device_control_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_control_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub control_id: uint16_t,
    pub device_id: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_control_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_control_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_control_request_t =
    Struct_xcb_input_get_device_control_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_control_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_control_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_control_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_control_reply_t =
    Struct_xcb_input_get_device_control_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_resolution_ctl_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub first_valuator: uint8_t,
    pub num_valuators: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_resolution_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_resolution_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_resolution_ctl_t =
    Struct_xcb_input_device_resolution_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_resolution_ctl_iterator_t {
    pub data: *mut xcb_input_device_resolution_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_resolution_ctl_iterator_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_resolution_ctl_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_resolution_ctl_iterator_t =
    Struct_xcb_input_device_resolution_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_abs_calib_ctl_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub min_x: int32_t,
    pub max_x: int32_t,
    pub min_y: int32_t,
    pub max_y: int32_t,
    pub flip_x: uint32_t,
    pub flip_y: uint32_t,
    pub rotation: uint32_t,
    pub button_threshold: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_abs_calib_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_abs_calib_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_abs_calib_ctl_t =
    Struct_xcb_input_device_abs_calib_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_abs_calib_ctl_iterator_t {
    pub data: *mut xcb_input_device_abs_calib_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_abs_calib_ctl_iterator_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_abs_calib_ctl_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_abs_calib_ctl_iterator_t =
    Struct_xcb_input_device_abs_calib_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_abs_area_ctrl_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub offset_x: uint32_t,
    pub offset_y: uint32_t,
    pub width: int32_t,
    pub height: int32_t,
    pub screen: int32_t,
    pub following: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_abs_area_ctrl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_abs_area_ctrl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_abs_area_ctrl_t =
    Struct_xcb_input_device_abs_area_ctrl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_abs_area_ctrl_iterator_t {
    pub data: *mut xcb_input_device_abs_area_ctrl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_abs_area_ctrl_iterator_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_abs_area_ctrl_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_abs_area_ctrl_iterator_t =
    Struct_xcb_input_device_abs_area_ctrl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_core_ctrl_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub status: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_core_ctrl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_core_ctrl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_core_ctrl_t = Struct_xcb_input_device_core_ctrl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_core_ctrl_iterator_t {
    pub data: *mut xcb_input_device_core_ctrl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_core_ctrl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_core_ctrl_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_core_ctrl_iterator_t =
    Struct_xcb_input_device_core_ctrl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_enable_ctrl_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
    pub enable: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_enable_ctrl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_enable_ctrl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_enable_ctrl_t =
    Struct_xcb_input_device_enable_ctrl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_enable_ctrl_iterator_t {
    pub data: *mut xcb_input_device_enable_ctrl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_enable_ctrl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_enable_ctrl_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_enable_ctrl_iterator_t =
    Struct_xcb_input_device_enable_ctrl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_ctl_t {
    pub control_id: uint16_t,
    pub len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_ctl_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_ctl_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_ctl_t = Struct_xcb_input_device_ctl_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_ctl_iterator_t {
    pub data: *mut xcb_input_device_ctl_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_ctl_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_ctl_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_ctl_iterator_t =
    Struct_xcb_input_device_ctl_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_device_control_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_change_device_control_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_device_control_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_device_control_cookie_t =
    Struct_xcb_input_change_device_control_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_device_control_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub control_id: uint16_t,
    pub device_id: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_change_device_control_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_device_control_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_device_control_request_t =
    Struct_xcb_input_change_device_control_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_device_control_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_change_device_control_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_device_control_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_device_control_reply_t =
    Struct_xcb_input_change_device_control_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_list_device_properties_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_list_device_properties_cookie_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_list_device_properties_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_list_device_properties_cookie_t =
    Struct_xcb_input_list_device_properties_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_list_device_properties_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_list_device_properties_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_list_device_properties_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_list_device_properties_request_t =
    Struct_xcb_input_list_device_properties_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_list_device_properties_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_atoms: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_input_list_device_properties_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_list_device_properties_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_list_device_properties_reply_t =
    Struct_xcb_input_list_device_properties_reply_t;
pub type Enum_xcb_input_property_format_t = ::libc::c_uint;
pub const XCB_INPUT_PROPERTY_FORMAT_8_BITS: ::libc::c_uint = 8;
pub const XCB_INPUT_PROPERTY_FORMAT_16_BITS: ::libc::c_uint = 16;
pub const XCB_INPUT_PROPERTY_FORMAT_32_BITS: ::libc::c_uint = 32;
pub type xcb_input_property_format_t = Enum_xcb_input_property_format_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_device_property_items_t {
    pub data8: *mut uint8_t,
    pub data16: *mut uint16_t,
    pub data32: *mut uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_change_device_property_items_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_device_property_items_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_device_property_items_t =
    Struct_xcb_input_change_device_property_items_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_device_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub device_id: uint8_t,
    pub format: uint8_t,
    pub mode: uint8_t,
    pub pad0: uint8_t,
    pub num_items: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_change_device_property_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_change_device_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_device_property_request_t =
    Struct_xcb_input_change_device_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_delete_device_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub property: xcb_atom_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_delete_device_property_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_delete_device_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_delete_device_property_request_t =
    Struct_xcb_input_delete_device_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_property_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_property_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_property_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_property_cookie_t =
    Struct_xcb_input_get_device_property_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub offset: uint32_t,
    pub len: uint32_t,
    pub device_id: uint8_t,
    pub _delete: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_get_device_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_property_request_t =
    Struct_xcb_input_get_device_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_property_items_t {
    pub data8: *mut uint8_t,
    pub data16: *mut uint16_t,
    pub data32: *mut uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_property_items_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_property_items_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_property_items_t =
    Struct_xcb_input_get_device_property_items_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_get_device_property_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub _type: xcb_atom_t,
    pub bytes_after: uint32_t,
    pub num_items: uint32_t,
    pub format: uint8_t,
    pub device_id: uint8_t,
    pub pad1: [uint8_t; 10usize],
}
impl ::std::clone::Clone for Struct_xcb_input_get_device_property_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_get_device_property_reply_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_get_device_property_reply_t =
    Struct_xcb_input_get_device_property_reply_t;
pub type Enum_xcb_input_device_t = ::libc::c_uint;
pub const XCB_INPUT_DEVICE_ALL: ::libc::c_uint = 0;
pub const XCB_INPUT_DEVICE_ALL_MASTER: ::libc::c_uint = 1;
pub type xcb_input_device_t = Enum_xcb_input_device_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_group_info_t {
    pub base: uint8_t,
    pub latched: uint8_t,
    pub locked: uint8_t,
    pub effective: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_group_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_group_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_group_info_t = Struct_xcb_input_group_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_group_info_iterator_t {
    pub data: *mut xcb_input_group_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_group_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_group_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_group_info_iterator_t =
    Struct_xcb_input_group_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_modifier_info_t {
    pub base: uint32_t,
    pub latched: uint32_t,
    pub locked: uint32_t,
    pub effective: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_modifier_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_modifier_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_modifier_info_t = Struct_xcb_input_modifier_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_modifier_info_iterator_t {
    pub data: *mut xcb_input_modifier_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_modifier_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_modifier_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_modifier_info_iterator_t =
    Struct_xcb_input_modifier_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_pointer_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_pointer_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_pointer_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_pointer_cookie_t =
    Struct_xcb_input_xi_query_pointer_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_pointer_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_pointer_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_pointer_request_t =
    Struct_xcb_input_xi_query_pointer_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_pointer_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub root: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: xcb_input_fp1616_t,
    pub root_y: xcb_input_fp1616_t,
    pub win_x: xcb_input_fp1616_t,
    pub win_y: xcb_input_fp1616_t,
    pub same_screen: uint8_t,
    pub pad1: uint8_t,
    pub buttons_len: uint16_t,
    pub mods: xcb_input_modifier_info_t,
    pub group: xcb_input_group_info_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_pointer_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_pointer_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_pointer_reply_t =
    Struct_xcb_input_xi_query_pointer_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_warp_pointer_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub src_win: xcb_window_t,
    pub dst_win: xcb_window_t,
    pub src_x: xcb_input_fp1616_t,
    pub src_y: xcb_input_fp1616_t,
    pub src_width: uint16_t,
    pub src_height: uint16_t,
    pub dst_x: xcb_input_fp1616_t,
    pub dst_y: xcb_input_fp1616_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_warp_pointer_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_warp_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_warp_pointer_request_t =
    Struct_xcb_input_xi_warp_pointer_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_change_cursor_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_change_cursor_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_change_cursor_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_change_cursor_request_t =
    Struct_xcb_input_xi_change_cursor_request_t;
pub type Enum_xcb_input_hierarchy_change_type_t = ::libc::c_uint;
pub const XCB_INPUT_HIERARCHY_CHANGE_TYPE_ADD_MASTER: ::libc::c_uint = 1;
pub const XCB_INPUT_HIERARCHY_CHANGE_TYPE_REMOVE_MASTER: ::libc::c_uint = 2;
pub const XCB_INPUT_HIERARCHY_CHANGE_TYPE_ATTACH_SLAVE: ::libc::c_uint = 3;
pub const XCB_INPUT_HIERARCHY_CHANGE_TYPE_DETACH_SLAVE: ::libc::c_uint = 4;
pub type xcb_input_hierarchy_change_type_t =
    Enum_xcb_input_hierarchy_change_type_t;
pub type Enum_xcb_input_change_mode_t = ::libc::c_uint;
pub const XCB_INPUT_CHANGE_MODE_ATTACH: ::libc::c_uint = 1;
pub const XCB_INPUT_CHANGE_MODE_FLOAT: ::libc::c_uint = 2;
pub type xcb_input_change_mode_t = Enum_xcb_input_change_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_add_master_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub name_len: uint16_t,
    pub send_core: uint8_t,
    pub enable: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_add_master_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_add_master_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_add_master_t = Struct_xcb_input_add_master_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_add_master_iterator_t {
    pub data: *mut xcb_input_add_master_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_add_master_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_add_master_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_add_master_iterator_t =
    Struct_xcb_input_add_master_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_remove_master_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub return_mode: uint8_t,
    pub pad0: uint8_t,
    pub return_pointer: xcb_input_device_id_t,
    pub return_keyboard: xcb_input_device_id_t,
}
impl ::std::clone::Clone for Struct_xcb_input_remove_master_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_remove_master_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_remove_master_t = Struct_xcb_input_remove_master_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_remove_master_iterator_t {
    pub data: *mut xcb_input_remove_master_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_remove_master_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_remove_master_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_remove_master_iterator_t =
    Struct_xcb_input_remove_master_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_attach_slave_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub master: xcb_input_device_id_t,
}
impl ::std::clone::Clone for Struct_xcb_input_attach_slave_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_attach_slave_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_attach_slave_t = Struct_xcb_input_attach_slave_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_attach_slave_iterator_t {
    pub data: *mut xcb_input_attach_slave_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_attach_slave_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_attach_slave_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_attach_slave_iterator_t =
    Struct_xcb_input_attach_slave_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_detach_slave_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_detach_slave_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_detach_slave_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_detach_slave_t = Struct_xcb_input_detach_slave_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_detach_slave_iterator_t {
    pub data: *mut xcb_input_detach_slave_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_detach_slave_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_detach_slave_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_detach_slave_iterator_t =
    Struct_xcb_input_detach_slave_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_hierarchy_change_t {
    pub _type: uint16_t,
    pub len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_hierarchy_change_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_hierarchy_change_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_hierarchy_change_t = Struct_xcb_input_hierarchy_change_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_hierarchy_change_iterator_t {
    pub data: *mut xcb_input_hierarchy_change_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_hierarchy_change_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_hierarchy_change_iterator_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_hierarchy_change_iterator_t =
    Struct_xcb_input_hierarchy_change_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_change_hierarchy_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub num_changes: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_change_hierarchy_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_change_hierarchy_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_change_hierarchy_request_t =
    Struct_xcb_input_xi_change_hierarchy_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_set_client_pointer_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_set_client_pointer_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_set_client_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_set_client_pointer_request_t =
    Struct_xcb_input_xi_set_client_pointer_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_client_pointer_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_client_pointer_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_get_client_pointer_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_client_pointer_cookie_t =
    Struct_xcb_input_xi_get_client_pointer_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_client_pointer_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_client_pointer_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_get_client_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_client_pointer_request_t =
    Struct_xcb_input_xi_get_client_pointer_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_client_pointer_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub set: uint8_t,
    pub pad1: uint8_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad2: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_client_pointer_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_get_client_pointer_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_client_pointer_reply_t =
    Struct_xcb_input_xi_get_client_pointer_reply_t;
pub type Enum_xcb_input_xi_event_mask_t = ::libc::c_uint;
pub const XCB_INPUT_XI_EVENT_MASK_DEVICE_CHANGED: ::libc::c_uint = 2;
pub const XCB_INPUT_XI_EVENT_MASK_KEY_PRESS: ::libc::c_uint = 4;
pub const XCB_INPUT_XI_EVENT_MASK_KEY_RELEASE: ::libc::c_uint = 8;
pub const XCB_INPUT_XI_EVENT_MASK_BUTTON_PRESS: ::libc::c_uint = 16;
pub const XCB_INPUT_XI_EVENT_MASK_BUTTON_RELEASE: ::libc::c_uint = 32;
pub const XCB_INPUT_XI_EVENT_MASK_MOTION: ::libc::c_uint = 64;
pub const XCB_INPUT_XI_EVENT_MASK_ENTER: ::libc::c_uint = 128;
pub const XCB_INPUT_XI_EVENT_MASK_LEAVE: ::libc::c_uint = 256;
pub const XCB_INPUT_XI_EVENT_MASK_FOCUS_IN: ::libc::c_uint = 512;
pub const XCB_INPUT_XI_EVENT_MASK_FOCUS_OUT: ::libc::c_uint = 1024;
pub const XCB_INPUT_XI_EVENT_MASK_HIERARCHY: ::libc::c_uint = 2048;
pub const XCB_INPUT_XI_EVENT_MASK_PROPERTY: ::libc::c_uint = 4096;
pub const XCB_INPUT_XI_EVENT_MASK_RAW_KEY_PRESS: ::libc::c_uint = 8192;
pub const XCB_INPUT_XI_EVENT_MASK_RAW_KEY_RELEASE: ::libc::c_uint = 16384;
pub const XCB_INPUT_XI_EVENT_MASK_RAW_BUTTON_PRESS: ::libc::c_uint = 32768;
pub const XCB_INPUT_XI_EVENT_MASK_RAW_BUTTON_RELEASE: ::libc::c_uint = 65536;
pub const XCB_INPUT_XI_EVENT_MASK_RAW_MOTION: ::libc::c_uint = 131072;
pub const XCB_INPUT_XI_EVENT_MASK_TOUCH_BEGIN: ::libc::c_uint = 262144;
pub const XCB_INPUT_XI_EVENT_MASK_TOUCH_UPDATE: ::libc::c_uint = 524288;
pub const XCB_INPUT_XI_EVENT_MASK_TOUCH_END: ::libc::c_uint = 1048576;
pub const XCB_INPUT_XI_EVENT_MASK_TOUCH_OWNERSHIP: ::libc::c_uint = 2097152;
pub const XCB_INPUT_XI_EVENT_MASK_RAW_TOUCH_BEGIN: ::libc::c_uint = 4194304;
pub const XCB_INPUT_XI_EVENT_MASK_RAW_TOUCH_UPDATE: ::libc::c_uint = 8388608;
pub const XCB_INPUT_XI_EVENT_MASK_RAW_TOUCH_END: ::libc::c_uint = 16777216;
pub const XCB_INPUT_XI_EVENT_MASK_BARRIER_HIT: ::libc::c_uint = 33554432;
pub const XCB_INPUT_XI_EVENT_MASK_BARRIER_LEAVE: ::libc::c_uint = 67108864;
pub type xcb_input_xi_event_mask_t = Enum_xcb_input_xi_event_mask_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_event_mask_t {
    pub deviceid: xcb_input_device_id_t,
    pub mask_len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_event_mask_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_event_mask_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_event_mask_t = Struct_xcb_input_event_mask_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_event_mask_iterator_t {
    pub data: *mut xcb_input_event_mask_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_event_mask_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_event_mask_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_event_mask_iterator_t =
    Struct_xcb_input_event_mask_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_select_events_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub num_mask: uint16_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_select_events_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_select_events_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_select_events_request_t =
    Struct_xcb_input_xi_select_events_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_version_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_version_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_version_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_version_cookie_t =
    Struct_xcb_input_xi_query_version_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_version_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub major_version: uint16_t,
    pub minor_version: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_version_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_version_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_version_request_t =
    Struct_xcb_input_xi_query_version_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_version_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub major_version: uint16_t,
    pub minor_version: uint16_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_version_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_version_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_version_reply_t =
    Struct_xcb_input_xi_query_version_reply_t;
pub type Enum_xcb_input_device_class_type_t = ::libc::c_uint;
pub const XCB_INPUT_DEVICE_CLASS_TYPE_KEY: ::libc::c_uint = 0;
pub const XCB_INPUT_DEVICE_CLASS_TYPE_BUTTON: ::libc::c_uint = 1;
pub const XCB_INPUT_DEVICE_CLASS_TYPE_VALUATOR: ::libc::c_uint = 2;
pub const XCB_INPUT_DEVICE_CLASS_TYPE_SCROLL: ::libc::c_uint = 3;
pub const XCB_INPUT_DEVICE_CLASS_TYPE_TOUCH: ::libc::c_uint = 8;
pub type xcb_input_device_class_type_t = Enum_xcb_input_device_class_type_t;
pub type Enum_xcb_input_device_type_t = ::libc::c_uint;
pub const XCB_INPUT_DEVICE_TYPE_MASTER_POINTER: ::libc::c_uint = 1;
pub const XCB_INPUT_DEVICE_TYPE_MASTER_KEYBOARD: ::libc::c_uint = 2;
pub const XCB_INPUT_DEVICE_TYPE_SLAVE_POINTER: ::libc::c_uint = 3;
pub const XCB_INPUT_DEVICE_TYPE_SLAVE_KEYBOARD: ::libc::c_uint = 4;
pub const XCB_INPUT_DEVICE_TYPE_FLOATING_SLAVE: ::libc::c_uint = 5;
pub type xcb_input_device_type_t = Enum_xcb_input_device_type_t;
pub type Enum_xcb_input_scroll_flags_t = ::libc::c_uint;
pub const XCB_INPUT_SCROLL_FLAGS_NO_EMULATION: ::libc::c_uint = 1;
pub const XCB_INPUT_SCROLL_FLAGS_PREFERRED: ::libc::c_uint = 2;
pub type xcb_input_scroll_flags_t = Enum_xcb_input_scroll_flags_t;
pub type Enum_xcb_input_scroll_type_t = ::libc::c_uint;
pub const XCB_INPUT_SCROLL_TYPE_VERTICAL: ::libc::c_uint = 1;
pub const XCB_INPUT_SCROLL_TYPE_HORIZONTAL: ::libc::c_uint = 2;
pub type xcb_input_scroll_type_t = Enum_xcb_input_scroll_type_t;
pub type Enum_xcb_input_touch_mode_t = ::libc::c_uint;
pub const XCB_INPUT_TOUCH_MODE_DIRECT: ::libc::c_uint = 1;
pub const XCB_INPUT_TOUCH_MODE_DEPENDENT: ::libc::c_uint = 2;
pub type xcb_input_touch_mode_t = Enum_xcb_input_touch_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_button_class_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub num_buttons: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_button_class_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_button_class_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_button_class_t = Struct_xcb_input_button_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_button_class_iterator_t {
    pub data: *mut xcb_input_button_class_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_button_class_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_button_class_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_button_class_iterator_t =
    Struct_xcb_input_button_class_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_key_class_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub num_keys: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_key_class_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_key_class_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_key_class_t = Struct_xcb_input_key_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_key_class_iterator_t {
    pub data: *mut xcb_input_key_class_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_key_class_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_key_class_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_key_class_iterator_t =
    Struct_xcb_input_key_class_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_scroll_class_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub number: uint16_t,
    pub scroll_type: uint16_t,
    pub pad0: [uint8_t; 2usize],
    pub flags: uint32_t,
    pub increment: xcb_input_fp3232_t,
}
impl ::std::clone::Clone for Struct_xcb_input_scroll_class_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_scroll_class_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_scroll_class_t = Struct_xcb_input_scroll_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_scroll_class_iterator_t {
    pub data: *mut xcb_input_scroll_class_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_scroll_class_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_scroll_class_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_scroll_class_iterator_t =
    Struct_xcb_input_scroll_class_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_touch_class_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub mode: uint8_t,
    pub num_touches: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_touch_class_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_touch_class_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_touch_class_t = Struct_xcb_input_touch_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_touch_class_iterator_t {
    pub data: *mut xcb_input_touch_class_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_touch_class_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_touch_class_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_touch_class_iterator_t =
    Struct_xcb_input_touch_class_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_valuator_class_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub number: uint16_t,
    pub label: xcb_atom_t,
    pub min: xcb_input_fp3232_t,
    pub max: xcb_input_fp3232_t,
    pub value: xcb_input_fp3232_t,
    pub resolution: uint32_t,
    pub mode: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_valuator_class_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_valuator_class_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_valuator_class_t = Struct_xcb_input_valuator_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_valuator_class_iterator_t {
    pub data: *mut xcb_input_valuator_class_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_valuator_class_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_valuator_class_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_valuator_class_iterator_t =
    Struct_xcb_input_valuator_class_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_class_t {
    pub _type: uint16_t,
    pub len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_class_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_class_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_class_t = Struct_xcb_input_device_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_class_iterator_t {
    pub data: *mut xcb_input_device_class_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_device_class_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_class_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_class_iterator_t =
    Struct_xcb_input_device_class_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_device_info_t {
    pub deviceid: xcb_input_device_id_t,
    pub _type: uint16_t,
    pub attachment: xcb_input_device_id_t,
    pub num_classes: uint16_t,
    pub name_len: uint16_t,
    pub enabled: uint8_t,
    pub pad0: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_device_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_device_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_device_info_t = Struct_xcb_input_xi_device_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_device_info_iterator_t {
    pub data: *mut xcb_input_xi_device_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_device_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_device_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_device_info_iterator_t =
    Struct_xcb_input_xi_device_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_device_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_device_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_device_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_device_cookie_t =
    Struct_xcb_input_xi_query_device_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_device_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_device_request_t =
    Struct_xcb_input_xi_query_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_query_device_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_infos: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_query_device_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_query_device_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_query_device_reply_t =
    Struct_xcb_input_xi_query_device_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_set_focus_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_set_focus_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_set_focus_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_set_focus_request_t =
    Struct_xcb_input_xi_set_focus_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_focus_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_focus_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_get_focus_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_focus_cookie_t =
    Struct_xcb_input_xi_get_focus_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_focus_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_focus_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_get_focus_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_focus_request_t =
    Struct_xcb_input_xi_get_focus_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_focus_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub focus: xcb_window_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_focus_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_get_focus_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_focus_reply_t =
    Struct_xcb_input_xi_get_focus_reply_t;
pub type Enum_xcb_input_grab_owner_t = ::libc::c_uint;
pub const XCB_INPUT_GRAB_OWNER_NO_OWNER: ::libc::c_uint = 0;
pub const XCB_INPUT_GRAB_OWNER_OWNER: ::libc::c_uint = 1;
pub type xcb_input_grab_owner_t = Enum_xcb_input_grab_owner_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_grab_device_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_grab_device_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_grab_device_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_grab_device_cookie_t =
    Struct_xcb_input_xi_grab_device_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_grab_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub cursor: xcb_cursor_t,
    pub deviceid: xcb_input_device_id_t,
    pub mode: uint8_t,
    pub paired_device_mode: uint8_t,
    pub owner_events: uint8_t,
    pub pad0: uint8_t,
    pub mask_len: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_grab_device_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_grab_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_grab_device_request_t =
    Struct_xcb_input_xi_grab_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_grab_device_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub status: uint8_t,
    pub pad1: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_grab_device_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_grab_device_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_grab_device_reply_t =
    Struct_xcb_input_xi_grab_device_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_ungrab_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_ungrab_device_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_ungrab_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_ungrab_device_request_t =
    Struct_xcb_input_xi_ungrab_device_request_t;
pub type Enum_xcb_input_event_mode_t = ::libc::c_uint;
pub const XCB_INPUT_EVENT_MODE_ASYNC_DEVICE: ::libc::c_uint = 0;
pub const XCB_INPUT_EVENT_MODE_SYNC_DEVICE: ::libc::c_uint = 1;
pub const XCB_INPUT_EVENT_MODE_REPLAY_DEVICE: ::libc::c_uint = 2;
pub const XCB_INPUT_EVENT_MODE_ASYNC_PAIRED_DEVICE: ::libc::c_uint = 3;
pub const XCB_INPUT_EVENT_MODE_ASYNC_PAIR: ::libc::c_uint = 4;
pub const XCB_INPUT_EVENT_MODE_SYNC_PAIR: ::libc::c_uint = 5;
pub const XCB_INPUT_EVENT_MODE_ACCEPT_TOUCH: ::libc::c_uint = 6;
pub const XCB_INPUT_EVENT_MODE_REJECT_TOUCH: ::libc::c_uint = 7;
pub type xcb_input_event_mode_t = Enum_xcb_input_event_mode_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_allow_events_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
    pub deviceid: xcb_input_device_id_t,
    pub event_mode: uint8_t,
    pub pad0: uint8_t,
    pub touchid: uint32_t,
    pub grab_window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_allow_events_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_allow_events_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_allow_events_request_t =
    Struct_xcb_input_xi_allow_events_request_t;
pub type Enum_xcb_input_grab_mode_22_t = ::libc::c_uint;
pub const XCB_INPUT_GRAB_MODE_22_SYNC: ::libc::c_uint = 0;
pub const XCB_INPUT_GRAB_MODE_22_ASYNC: ::libc::c_uint = 1;
pub const XCB_INPUT_GRAB_MODE_22_TOUCH: ::libc::c_uint = 2;
pub type xcb_input_grab_mode_22_t = Enum_xcb_input_grab_mode_22_t;
pub type Enum_xcb_input_grab_type_t = ::libc::c_uint;
pub const XCB_INPUT_GRAB_TYPE_BUTTON: ::libc::c_uint = 0;
pub const XCB_INPUT_GRAB_TYPE_KEYCODE: ::libc::c_uint = 1;
pub const XCB_INPUT_GRAB_TYPE_ENTER: ::libc::c_uint = 2;
pub const XCB_INPUT_GRAB_TYPE_FOCUS_IN: ::libc::c_uint = 3;
pub const XCB_INPUT_GRAB_TYPE_TOUCH_BEGIN: ::libc::c_uint = 4;
pub type xcb_input_grab_type_t = Enum_xcb_input_grab_type_t;
pub type Enum_xcb_input_modifier_mask_t = ::libc::c_uint;
pub const XCB_INPUT_MODIFIER_MASK_ANY: ::libc::c_uint = 2147483648;
pub type xcb_input_modifier_mask_t = Enum_xcb_input_modifier_mask_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_grab_modifier_info_t {
    pub modifiers: uint32_t,
    pub status: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_grab_modifier_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_grab_modifier_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_grab_modifier_info_t =
    Struct_xcb_input_grab_modifier_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_grab_modifier_info_iterator_t {
    pub data: *mut xcb_input_grab_modifier_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_grab_modifier_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_grab_modifier_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_grab_modifier_info_iterator_t =
    Struct_xcb_input_grab_modifier_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_passive_grab_device_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_passive_grab_device_cookie_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_passive_grab_device_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_passive_grab_device_cookie_t =
    Struct_xcb_input_xi_passive_grab_device_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_passive_grab_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
    pub grab_window: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub detail: uint32_t,
    pub deviceid: xcb_input_device_id_t,
    pub num_modifiers: uint16_t,
    pub mask_len: uint16_t,
    pub grab_type: uint8_t,
    pub grab_mode: uint8_t,
    pub paired_device_mode: uint8_t,
    pub owner_events: uint8_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_passive_grab_device_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_passive_grab_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_passive_grab_device_request_t =
    Struct_xcb_input_xi_passive_grab_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_passive_grab_device_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_modifiers: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_passive_grab_device_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_passive_grab_device_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_passive_grab_device_reply_t =
    Struct_xcb_input_xi_passive_grab_device_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_passive_ungrab_device_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub detail: uint32_t,
    pub deviceid: xcb_input_device_id_t,
    pub num_modifiers: uint16_t,
    pub grab_type: uint8_t,
    pub pad0: [uint8_t; 3usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_xi_passive_ungrab_device_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_passive_ungrab_device_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_passive_ungrab_device_request_t =
    Struct_xcb_input_xi_passive_ungrab_device_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_list_properties_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_list_properties_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_list_properties_cookie_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_list_properties_cookie_t =
    Struct_xcb_input_xi_list_properties_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_list_properties_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_list_properties_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_list_properties_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_list_properties_request_t =
    Struct_xcb_input_xi_list_properties_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_list_properties_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_properties: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_list_properties_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_list_properties_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_list_properties_reply_t =
    Struct_xcb_input_xi_list_properties_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_change_property_items_t {
    pub data8: *mut uint8_t,
    pub data16: *mut uint16_t,
    pub data32: *mut uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_change_property_items_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_change_property_items_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_change_property_items_t =
    Struct_xcb_input_xi_change_property_items_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_change_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub mode: uint8_t,
    pub format: uint8_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub num_items: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_change_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_change_property_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_change_property_request_t =
    Struct_xcb_input_xi_change_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_delete_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
    pub property: xcb_atom_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_delete_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_delete_property_request_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_delete_property_request_t =
    Struct_xcb_input_xi_delete_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_property_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_property_cookie_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_get_property_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_property_cookie_t =
    Struct_xcb_input_xi_get_property_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_property_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub _delete: uint8_t,
    pub pad0: uint8_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub offset: uint32_t,
    pub len: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_property_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_get_property_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_property_request_t =
    Struct_xcb_input_xi_get_property_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_property_items_t {
    pub data8: *mut uint8_t,
    pub data16: *mut uint16_t,
    pub data32: *mut uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_property_items_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_get_property_items_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_property_items_t =
    Struct_xcb_input_xi_get_property_items_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_property_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub _type: xcb_atom_t,
    pub bytes_after: uint32_t,
    pub num_items: uint32_t,
    pub format: uint8_t,
    pub pad1: [uint8_t; 11usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_property_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_xi_get_property_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_property_reply_t =
    Struct_xcb_input_xi_get_property_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_selected_events_cookie_t {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_selected_events_cookie_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_get_selected_events_cookie_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_selected_events_cookie_t =
    Struct_xcb_input_xi_get_selected_events_cookie_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_selected_events_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_selected_events_request_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_get_selected_events_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_selected_events_request_t =
    Struct_xcb_input_xi_get_selected_events_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_get_selected_events_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub num_masks: uint16_t,
    pub pad1: [uint8_t; 22usize],
}
impl ::std::clone::Clone for Struct_xcb_input_xi_get_selected_events_reply_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_get_selected_events_reply_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_get_selected_events_reply_t =
    Struct_xcb_input_xi_get_selected_events_reply_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_barrier_release_pointer_info_t {
    pub deviceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
    pub barrier: xcb_xfixes_barrier_t,
    pub eventid: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_barrier_release_pointer_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_barrier_release_pointer_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_barrier_release_pointer_info_t =
    Struct_xcb_input_barrier_release_pointer_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_barrier_release_pointer_info_iterator_t {
    pub data: *mut xcb_input_barrier_release_pointer_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for
 Struct_xcb_input_barrier_release_pointer_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_barrier_release_pointer_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_barrier_release_pointer_info_iterator_t =
    Struct_xcb_input_barrier_release_pointer_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_xi_barrier_release_pointer_request_t {
    pub major_opcode: uint8_t,
    pub minor_opcode: uint8_t,
    pub length: uint16_t,
    pub num_barriers: uint32_t,
}
impl ::std::clone::Clone for
 Struct_xcb_input_xi_barrier_release_pointer_request_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_xi_barrier_release_pointer_request_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_xi_barrier_release_pointer_request_t =
    Struct_xcb_input_xi_barrier_release_pointer_request_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_valuator_event_t {
    pub response_type: uint8_t,
    pub device_id: uint8_t,
    pub sequence: uint16_t,
    pub device_state: uint16_t,
    pub num_valuators: uint8_t,
    pub first_valuator: uint8_t,
    pub valuators: [int32_t; 6usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_valuator_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_valuator_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_valuator_event_t =
    Struct_xcb_input_device_valuator_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_key_press_event_t {
    pub response_type: uint8_t,
    pub detail: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub same_screen: uint8_t,
    pub device_id: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_key_press_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_key_press_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_key_press_event_t =
    Struct_xcb_input_device_key_press_event_t;
pub type xcb_input_device_key_release_event_t =
    xcb_input_device_key_press_event_t;
pub type xcb_input_device_button_press_event_t =
    xcb_input_device_key_press_event_t;
pub type xcb_input_device_button_release_event_t =
    xcb_input_device_key_press_event_t;
pub type xcb_input_device_motion_notify_event_t =
    xcb_input_device_key_press_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_focus_in_event_t {
    pub response_type: uint8_t,
    pub detail: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub mode: uint8_t,
    pub device_id: uint8_t,
    pub pad0: [uint8_t; 18usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_focus_in_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_focus_in_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_focus_in_event_t =
    Struct_xcb_input_device_focus_in_event_t;
pub type xcb_input_device_focus_out_event_t =
    xcb_input_device_focus_in_event_t;
pub type xcb_input_proximity_in_event_t = xcb_input_device_key_press_event_t;
pub type xcb_input_proximity_out_event_t = xcb_input_device_key_press_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_state_notify_event_t {
    pub response_type: uint8_t,
    pub device_id: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub num_keys: uint8_t,
    pub num_buttons: uint8_t,
    pub num_valuators: uint8_t,
    pub classes_reported: uint8_t,
    pub buttons: [uint8_t; 4usize],
    pub keys: [uint8_t; 4usize],
    pub valuators: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_state_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_state_notify_event_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_state_notify_event_t =
    Struct_xcb_input_device_state_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_mapping_notify_event_t {
    pub response_type: uint8_t,
    pub device_id: uint8_t,
    pub sequence: uint16_t,
    pub request: uint8_t,
    pub first_keycode: xcb_input_key_code_t,
    pub count: uint8_t,
    pub pad0: uint8_t,
    pub time: xcb_timestamp_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_mapping_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_mapping_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_mapping_notify_event_t =
    Struct_xcb_input_device_mapping_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_change_device_notify_event_t {
    pub response_type: uint8_t,
    pub device_id: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub request: uint8_t,
    pub pad0: [uint8_t; 23usize],
}
impl ::std::clone::Clone for Struct_xcb_input_change_device_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_change_device_notify_event_t
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_change_device_notify_event_t =
    Struct_xcb_input_change_device_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_key_state_notify_event_t {
    pub response_type: uint8_t,
    pub device_id: uint8_t,
    pub sequence: uint16_t,
    pub keys: [uint8_t; 28usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_key_state_notify_event_t
 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_key_state_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_key_state_notify_event_t =
    Struct_xcb_input_device_key_state_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_button_state_notify_event_t {
    pub response_type: uint8_t,
    pub device_id: uint8_t,
    pub sequence: uint16_t,
    pub buttons: [uint8_t; 28usize],
}
impl ::std::clone::Clone for
 Struct_xcb_input_device_button_state_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_button_state_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_button_state_notify_event_t =
    Struct_xcb_input_device_button_state_notify_event_t;
pub type Enum_xcb_input_device_change_t = ::libc::c_uint;
pub const XCB_INPUT_DEVICE_CHANGE_ADDED: ::libc::c_uint = 0;
pub const XCB_INPUT_DEVICE_CHANGE_REMOVED: ::libc::c_uint = 1;
pub const XCB_INPUT_DEVICE_CHANGE_ENABLED: ::libc::c_uint = 2;
pub const XCB_INPUT_DEVICE_CHANGE_DISABLED: ::libc::c_uint = 3;
pub const XCB_INPUT_DEVICE_CHANGE_UNRECOVERABLE: ::libc::c_uint = 4;
pub const XCB_INPUT_DEVICE_CHANGE_CONTROL_CHANGED: ::libc::c_uint = 5;
pub type xcb_input_device_change_t = Enum_xcb_input_device_change_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_presence_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub devchange: uint8_t,
    pub device_id: uint8_t,
    pub control: uint16_t,
    pub pad1: [uint8_t; 20usize],
}
impl ::std::clone::Clone for Struct_xcb_input_device_presence_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_presence_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_presence_notify_event_t =
    Struct_xcb_input_device_presence_notify_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_property_notify_event_t {
    pub response_type: uint8_t,
    pub state: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub property: xcb_atom_t,
    pub pad0: [uint8_t; 19usize],
    pub device_id: uint8_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_property_notify_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_xcb_input_device_property_notify_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_property_notify_event_t =
    Struct_xcb_input_device_property_notify_event_t;
pub type Enum_xcb_input_change_reason_t = ::libc::c_uint;
pub const XCB_INPUT_CHANGE_REASON_SLAVE_SWITCH: ::libc::c_uint = 1;
pub const XCB_INPUT_CHANGE_REASON_DEVICE_CHANGE: ::libc::c_uint = 2;
pub type xcb_input_change_reason_t = Enum_xcb_input_change_reason_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_changed_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub num_classes: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub reason: uint8_t,
    pub pad0: [uint8_t; 11usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_changed_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_changed_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_changed_event_t =
    Struct_xcb_input_device_changed_event_t;
pub type Enum_xcb_input_key_event_flags_t = ::libc::c_uint;
pub const XCB_INPUT_KEY_EVENT_FLAGS_KEY_REPEAT: ::libc::c_uint = 65536;
pub type xcb_input_key_event_flags_t = Enum_xcb_input_key_event_flags_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_key_press_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub detail: uint32_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub full_sequence: uint32_t,
    pub root_x: xcb_input_fp1616_t,
    pub root_y: xcb_input_fp1616_t,
    pub event_x: xcb_input_fp1616_t,
    pub event_y: xcb_input_fp1616_t,
    pub buttons_len: uint16_t,
    pub valuators_len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
    pub flags: uint32_t,
    pub mods: xcb_input_modifier_info_t,
    pub group: xcb_input_group_info_t,
}
impl ::std::clone::Clone for Struct_xcb_input_key_press_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_key_press_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_key_press_event_t = Struct_xcb_input_key_press_event_t;
pub type xcb_input_key_release_event_t = xcb_input_key_press_event_t;
pub type Enum_xcb_input_pointer_event_flags_t = ::libc::c_uint;
pub const XCB_INPUT_POINTER_EVENT_FLAGS_POINTER_EMULATED: ::libc::c_uint =
    65536;
pub type xcb_input_pointer_event_flags_t =
    Enum_xcb_input_pointer_event_flags_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_button_press_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub detail: uint32_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub full_sequence: uint32_t,
    pub root_x: xcb_input_fp1616_t,
    pub root_y: xcb_input_fp1616_t,
    pub event_x: xcb_input_fp1616_t,
    pub event_y: xcb_input_fp1616_t,
    pub buttons_len: uint16_t,
    pub valuators_len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
    pub flags: uint32_t,
    pub mods: xcb_input_modifier_info_t,
    pub group: xcb_input_group_info_t,
}
impl ::std::clone::Clone for Struct_xcb_input_button_press_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_button_press_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_button_press_event_t =
    Struct_xcb_input_button_press_event_t;
pub type xcb_input_button_release_event_t = xcb_input_button_press_event_t;
pub type xcb_input_motion_event_t = xcb_input_button_press_event_t;
pub type Enum_xcb_input_notify_mode_t = ::libc::c_uint;
pub const XCB_INPUT_NOTIFY_MODE_NORMAL: ::libc::c_uint = 0;
pub const XCB_INPUT_NOTIFY_MODE_GRAB: ::libc::c_uint = 1;
pub const XCB_INPUT_NOTIFY_MODE_UNGRAB: ::libc::c_uint = 2;
pub const XCB_INPUT_NOTIFY_MODE_WHILE_GRABBED: ::libc::c_uint = 3;
pub const XCB_INPUT_NOTIFY_MODE_PASSIVE_GRAB: ::libc::c_uint = 4;
pub const XCB_INPUT_NOTIFY_MODE_PASSIVE_UNGRAB: ::libc::c_uint = 5;
pub type xcb_input_notify_mode_t = Enum_xcb_input_notify_mode_t;
pub type Enum_xcb_input_notify_detail_t = ::libc::c_uint;
pub const XCB_INPUT_NOTIFY_DETAIL_ANCESTOR: ::libc::c_uint = 0;
pub const XCB_INPUT_NOTIFY_DETAIL_VIRTUAL: ::libc::c_uint = 1;
pub const XCB_INPUT_NOTIFY_DETAIL_INFERIOR: ::libc::c_uint = 2;
pub const XCB_INPUT_NOTIFY_DETAIL_NONLINEAR: ::libc::c_uint = 3;
pub const XCB_INPUT_NOTIFY_DETAIL_NONLINEAR_VIRTUAL: ::libc::c_uint = 4;
pub const XCB_INPUT_NOTIFY_DETAIL_POINTER: ::libc::c_uint = 5;
pub const XCB_INPUT_NOTIFY_DETAIL_POINTER_ROOT: ::libc::c_uint = 6;
pub const XCB_INPUT_NOTIFY_DETAIL_NONE: ::libc::c_uint = 7;
pub type xcb_input_notify_detail_t = Enum_xcb_input_notify_detail_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_enter_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub sourceid: xcb_input_device_id_t,
    pub mode: uint8_t,
    pub detail: uint8_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub full_sequence: uint32_t,
    pub root_x: xcb_input_fp1616_t,
    pub root_y: xcb_input_fp1616_t,
    pub event_x: xcb_input_fp1616_t,
    pub event_y: xcb_input_fp1616_t,
    pub same_screen: uint8_t,
    pub focus: uint8_t,
    pub buttons_len: uint16_t,
    pub mods: xcb_input_modifier_info_t,
    pub group: xcb_input_group_info_t,
}
impl ::std::clone::Clone for Struct_xcb_input_enter_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_enter_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_enter_event_t = Struct_xcb_input_enter_event_t;
pub type xcb_input_leave_event_t = xcb_input_enter_event_t;
pub type xcb_input_focus_in_event_t = xcb_input_enter_event_t;
pub type xcb_input_focus_out_event_t = xcb_input_enter_event_t;
pub type Enum_xcb_input_hierarchy_mask_t = ::libc::c_uint;
pub const XCB_INPUT_HIERARCHY_MASK_MASTER_ADDED: ::libc::c_uint = 1;
pub const XCB_INPUT_HIERARCHY_MASK_MASTER_REMOVED: ::libc::c_uint = 2;
pub const XCB_INPUT_HIERARCHY_MASK_SLAVE_ADDED: ::libc::c_uint = 4;
pub const XCB_INPUT_HIERARCHY_MASK_SLAVE_REMOVED: ::libc::c_uint = 8;
pub const XCB_INPUT_HIERARCHY_MASK_SLAVE_ATTACHED: ::libc::c_uint = 16;
pub const XCB_INPUT_HIERARCHY_MASK_SLAVE_DETACHED: ::libc::c_uint = 32;
pub const XCB_INPUT_HIERARCHY_MASK_DEVICE_ENABLED: ::libc::c_uint = 64;
pub const XCB_INPUT_HIERARCHY_MASK_DEVICE_DISABLED: ::libc::c_uint = 128;
pub type xcb_input_hierarchy_mask_t = Enum_xcb_input_hierarchy_mask_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_hierarchy_info_t {
    pub deviceid: xcb_input_device_id_t,
    pub attachment: xcb_input_device_id_t,
    pub _type: uint8_t,
    pub enabled: uint8_t,
    pub pad0: [uint8_t; 2usize],
    pub flags: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_hierarchy_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_hierarchy_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_hierarchy_info_t = Struct_xcb_input_hierarchy_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_hierarchy_info_iterator_t {
    pub data: *mut xcb_input_hierarchy_info_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_input_hierarchy_info_iterator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_hierarchy_info_iterator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_hierarchy_info_iterator_t =
    Struct_xcb_input_hierarchy_info_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_hierarchy_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub flags: uint32_t,
    pub num_infos: uint16_t,
    pub pad0: [uint8_t; 10usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_hierarchy_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_hierarchy_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_hierarchy_event_t = Struct_xcb_input_hierarchy_event_t;
pub type Enum_xcb_input_property_flag_t = ::libc::c_uint;
pub const XCB_INPUT_PROPERTY_FLAG_DELETED: ::libc::c_uint = 0;
pub const XCB_INPUT_PROPERTY_FLAG_CREATED: ::libc::c_uint = 1;
pub const XCB_INPUT_PROPERTY_FLAG_MODIFIED: ::libc::c_uint = 2;
pub type xcb_input_property_flag_t = Enum_xcb_input_property_flag_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_property_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub property: xcb_atom_t,
    pub what: uint8_t,
    pub pad0: [uint8_t; 11usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_property_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_property_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_property_event_t = Struct_xcb_input_property_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_raw_key_press_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub detail: uint32_t,
    pub sourceid: xcb_input_device_id_t,
    pub valuators_len: uint16_t,
    pub flags: uint32_t,
    pub pad0: [uint8_t; 4usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_raw_key_press_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_raw_key_press_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_raw_key_press_event_t =
    Struct_xcb_input_raw_key_press_event_t;
pub type xcb_input_raw_key_release_event_t = xcb_input_raw_key_press_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_raw_button_press_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub detail: uint32_t,
    pub sourceid: xcb_input_device_id_t,
    pub valuators_len: uint16_t,
    pub flags: uint32_t,
    pub pad0: [uint8_t; 4usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_raw_button_press_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_raw_button_press_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_raw_button_press_event_t =
    Struct_xcb_input_raw_button_press_event_t;
pub type xcb_input_raw_button_release_event_t =
    xcb_input_raw_button_press_event_t;
pub type xcb_input_raw_motion_event_t = xcb_input_raw_button_press_event_t;
pub type Enum_xcb_input_touch_event_flags_t = ::libc::c_uint;
pub const XCB_INPUT_TOUCH_EVENT_FLAGS_TOUCH_PENDING_END: ::libc::c_uint =
    65536;
pub const XCB_INPUT_TOUCH_EVENT_FLAGS_TOUCH_EMULATING_POINTER: ::libc::c_uint
          =
    131072;
pub type xcb_input_touch_event_flags_t = Enum_xcb_input_touch_event_flags_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_touch_begin_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub detail: uint32_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub full_sequence: uint32_t,
    pub root_x: xcb_input_fp1616_t,
    pub root_y: xcb_input_fp1616_t,
    pub event_x: xcb_input_fp1616_t,
    pub event_y: xcb_input_fp1616_t,
    pub buttons_len: uint16_t,
    pub valuators_len: uint16_t,
    pub sourceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
    pub flags: uint32_t,
    pub mods: xcb_input_modifier_info_t,
    pub group: xcb_input_group_info_t,
}
impl ::std::clone::Clone for Struct_xcb_input_touch_begin_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_touch_begin_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_touch_begin_event_t = Struct_xcb_input_touch_begin_event_t;
pub type xcb_input_touch_update_event_t = xcb_input_touch_begin_event_t;
pub type xcb_input_touch_end_event_t = xcb_input_touch_begin_event_t;
pub type Enum_xcb_input_touch_ownership_flags_t = ::libc::c_uint;
pub const XCB_INPUT_TOUCH_OWNERSHIP_FLAGS_NONE: ::libc::c_uint = 0;
pub type xcb_input_touch_ownership_flags_t =
    Enum_xcb_input_touch_ownership_flags_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_touch_ownership_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub touchid: uint32_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub full_sequence: uint32_t,
    pub sourceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
    pub flags: uint32_t,
    pub pad1: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_xcb_input_touch_ownership_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_touch_ownership_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_touch_ownership_event_t =
    Struct_xcb_input_touch_ownership_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_raw_touch_begin_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub detail: uint32_t,
    pub sourceid: xcb_input_device_id_t,
    pub valuators_len: uint16_t,
    pub flags: uint32_t,
    pub pad0: [uint8_t; 4usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_xcb_input_raw_touch_begin_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_raw_touch_begin_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_raw_touch_begin_event_t =
    Struct_xcb_input_raw_touch_begin_event_t;
pub type xcb_input_raw_touch_update_event_t =
    xcb_input_raw_touch_begin_event_t;
pub type xcb_input_raw_touch_end_event_t = xcb_input_raw_touch_begin_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_barrier_hit_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub deviceid: xcb_input_device_id_t,
    pub time: xcb_timestamp_t,
    pub eventid: uint32_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub barrier: xcb_xfixes_barrier_t,
    pub full_sequence: uint32_t,
    pub dtime: uint32_t,
    pub flags: uint32_t,
    pub sourceid: xcb_input_device_id_t,
    pub pad0: [uint8_t; 2usize],
    pub root_x: xcb_input_fp1616_t,
    pub root_y: xcb_input_fp1616_t,
    pub dx: xcb_input_fp3232_t,
    pub dy: xcb_input_fp3232_t,
}
impl ::std::clone::Clone for Struct_xcb_input_barrier_hit_event_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_barrier_hit_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_barrier_hit_event_t = Struct_xcb_input_barrier_hit_event_t;
pub type xcb_input_barrier_leave_event_t = xcb_input_barrier_hit_event_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_error_t = Struct_xcb_input_device_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_event_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_event_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_event_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_event_error_t = Struct_xcb_input_event_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_mode_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_mode_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_mode_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_mode_error_t = Struct_xcb_input_mode_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_device_busy_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_device_busy_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_device_busy_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_device_busy_error_t = Struct_xcb_input_device_busy_error_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_input_class_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
}
impl ::std::clone::Clone for Struct_xcb_input_class_error_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_input_class_error_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_input_class_error_t = Struct_xcb_input_class_error_t;
#[link(name = "xcb")]
#[link(name = "xcb-randr")]
#[link(name = "xcb-xinput")]
extern "C" {
    pub static mut xcb_render_id: xcb_extension_t;
    pub static mut xcb_randr_id: xcb_extension_t;
    pub static mut xcb_shape_id: xcb_extension_t;
    pub static mut xcb_xfixes_id: xcb_extension_t;
    pub static mut xcb_input_id: xcb_extension_t;
}
#[link(name = "xcb")]
#[link(name = "xcb-randr")]
#[link(name = "xcb-xinput")]
extern "C" {
    pub fn xcb_char2b_next(i: *mut xcb_char2b_iterator_t) -> ();
    pub fn xcb_char2b_end(i: xcb_char2b_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_window_next(i: *mut xcb_window_iterator_t) -> ();
    pub fn xcb_window_end(i: xcb_window_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_pixmap_next(i: *mut xcb_pixmap_iterator_t) -> ();
    pub fn xcb_pixmap_end(i: xcb_pixmap_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_cursor_next(i: *mut xcb_cursor_iterator_t) -> ();
    pub fn xcb_cursor_end(i: xcb_cursor_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_font_next(i: *mut xcb_font_iterator_t) -> ();
    pub fn xcb_font_end(i: xcb_font_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_gcontext_next(i: *mut xcb_gcontext_iterator_t) -> ();
    pub fn xcb_gcontext_end(i: xcb_gcontext_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_colormap_next(i: *mut xcb_colormap_iterator_t) -> ();
    pub fn xcb_colormap_end(i: xcb_colormap_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_atom_next(i: *mut xcb_atom_iterator_t) -> ();
    pub fn xcb_atom_end(i: xcb_atom_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_drawable_next(i: *mut xcb_drawable_iterator_t) -> ();
    pub fn xcb_drawable_end(i: xcb_drawable_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_fontable_next(i: *mut xcb_fontable_iterator_t) -> ();
    pub fn xcb_fontable_end(i: xcb_fontable_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_visualid_next(i: *mut xcb_visualid_iterator_t) -> ();
    pub fn xcb_visualid_end(i: xcb_visualid_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_timestamp_next(i: *mut xcb_timestamp_iterator_t) -> ();
    pub fn xcb_timestamp_end(i: xcb_timestamp_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_keysym_next(i: *mut xcb_keysym_iterator_t) -> ();
    pub fn xcb_keysym_end(i: xcb_keysym_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_keycode_next(i: *mut xcb_keycode_iterator_t) -> ();
    pub fn xcb_keycode_end(i: xcb_keycode_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_button_next(i: *mut xcb_button_iterator_t) -> ();
    pub fn xcb_button_end(i: xcb_button_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_point_next(i: *mut xcb_point_iterator_t) -> ();
    pub fn xcb_point_end(i: xcb_point_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_rectangle_next(i: *mut xcb_rectangle_iterator_t) -> ();
    pub fn xcb_rectangle_end(i: xcb_rectangle_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_arc_next(i: *mut xcb_arc_iterator_t) -> ();
    pub fn xcb_arc_end(i: xcb_arc_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_format_next(i: *mut xcb_format_iterator_t) -> ();
    pub fn xcb_format_end(i: xcb_format_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_visualtype_next(i: *mut xcb_visualtype_iterator_t) -> ();
    pub fn xcb_visualtype_end(i: xcb_visualtype_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_depth_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_depth_visuals(R: *const xcb_depth_t) -> *mut xcb_visualtype_t;
    pub fn xcb_depth_visuals_length(R: *const xcb_depth_t) -> ::libc::c_int;
    pub fn xcb_depth_visuals_iterator(R: *const xcb_depth_t)
     -> xcb_visualtype_iterator_t;
    pub fn xcb_depth_next(i: *mut xcb_depth_iterator_t) -> ();
    pub fn xcb_depth_end(i: xcb_depth_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_screen_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_screen_allowed_depths_length(R: *const xcb_screen_t)
     -> ::libc::c_int;
    pub fn xcb_screen_allowed_depths_iterator(R: *const xcb_screen_t)
     -> xcb_depth_iterator_t;
    pub fn xcb_screen_next(i: *mut xcb_screen_iterator_t) -> ();
    pub fn xcb_screen_end(i: xcb_screen_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_setup_request_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_setup_request_authorization_protocol_name(R:
                                                             *const xcb_setup_request_t)
     -> *mut ::libc::c_char;
    pub fn xcb_setup_request_authorization_protocol_name_length(R:
                                                                    *const xcb_setup_request_t)
     -> ::libc::c_int;
    pub fn xcb_setup_request_authorization_protocol_name_end(R:
                                                                 *const xcb_setup_request_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_request_authorization_protocol_data(R:
                                                             *const xcb_setup_request_t)
     -> *mut ::libc::c_char;
    pub fn xcb_setup_request_authorization_protocol_data_length(R:
                                                                    *const xcb_setup_request_t)
     -> ::libc::c_int;
    pub fn xcb_setup_request_authorization_protocol_data_end(R:
                                                                 *const xcb_setup_request_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_request_next(i: *mut xcb_setup_request_iterator_t) -> ();
    pub fn xcb_setup_request_end(i: xcb_setup_request_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_failed_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_setup_failed_reason(R: *const xcb_setup_failed_t)
     -> *mut ::libc::c_char;
    pub fn xcb_setup_failed_reason_length(R: *const xcb_setup_failed_t)
     -> ::libc::c_int;
    pub fn xcb_setup_failed_reason_end(R: *const xcb_setup_failed_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_failed_next(i: *mut xcb_setup_failed_iterator_t) -> ();
    pub fn xcb_setup_failed_end(i: xcb_setup_failed_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_authenticate_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_setup_authenticate_reason(R: *const xcb_setup_authenticate_t)
     -> *mut ::libc::c_char;
    pub fn xcb_setup_authenticate_reason_length(R:
                                                    *const xcb_setup_authenticate_t)
     -> ::libc::c_int;
    pub fn xcb_setup_authenticate_reason_end(R:
                                                 *const xcb_setup_authenticate_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_authenticate_next(i:
                                           *mut xcb_setup_authenticate_iterator_t)
     -> ();
    pub fn xcb_setup_authenticate_end(i: xcb_setup_authenticate_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_setup_vendor(R: *const xcb_setup_t) -> *mut ::libc::c_char;
    pub fn xcb_setup_vendor_length(R: *const xcb_setup_t) -> ::libc::c_int;
    pub fn xcb_setup_vendor_end(R: *const xcb_setup_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_pixmap_formats(R: *const xcb_setup_t)
     -> *mut xcb_format_t;
    pub fn xcb_setup_pixmap_formats_length(R: *const xcb_setup_t)
     -> ::libc::c_int;
    pub fn xcb_setup_pixmap_formats_iterator(R: *const xcb_setup_t)
     -> xcb_format_iterator_t;
    pub fn xcb_setup_roots_length(R: *const xcb_setup_t) -> ::libc::c_int;
    pub fn xcb_setup_roots_iterator(R: *const xcb_setup_t)
     -> xcb_screen_iterator_t;
    pub fn xcb_setup_next(i: *mut xcb_setup_iterator_t) -> ();
    pub fn xcb_setup_end(i: xcb_setup_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_client_message_data_next(i:
                                            *mut xcb_client_message_data_iterator_t)
     -> ();
    pub fn xcb_client_message_data_end(i: xcb_client_message_data_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_create_window_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_create_window_checked(c: *mut xcb_connection_t, depth: uint8_t,
                                     wid: xcb_window_t, parent: xcb_window_t,
                                     x: int16_t, y: int16_t, width: uint16_t,
                                     height: uint16_t, border_width: uint16_t,
                                     _class: uint16_t, visual: xcb_visualid_t,
                                     value_mask: uint32_t,
                                     value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_create_window(c: *mut xcb_connection_t, depth: uint8_t,
                             wid: xcb_window_t, parent: xcb_window_t,
                             x: int16_t, y: int16_t, width: uint16_t,
                             height: uint16_t, border_width: uint16_t,
                             _class: uint16_t, visual: xcb_visualid_t,
                             value_mask: uint32_t,
                             value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_window_attributes_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_window_attributes_checked(c: *mut xcb_connection_t,
                                                window: xcb_window_t,
                                                value_mask: uint32_t,
                                                value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_window_attributes(c: *mut xcb_connection_t,
                                        window: xcb_window_t,
                                        value_mask: uint32_t,
                                        value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_get_window_attributes(c: *mut xcb_connection_t,
                                     window: xcb_window_t)
     -> xcb_get_window_attributes_cookie_t;
    pub fn xcb_get_window_attributes_unchecked(c: *mut xcb_connection_t,
                                               window: xcb_window_t)
     -> xcb_get_window_attributes_cookie_t;
    pub fn xcb_get_window_attributes_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_get_window_attributes_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_window_attributes_reply_t;
    pub fn xcb_destroy_window_checked(c: *mut xcb_connection_t,
                                      window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_destroy_window(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_destroy_subwindows_checked(c: *mut xcb_connection_t,
                                          window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_destroy_subwindows(c: *mut xcb_connection_t,
                                  window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_change_save_set_checked(c: *mut xcb_connection_t,
                                       mode: uint8_t, window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_save_set(c: *mut xcb_connection_t, mode: uint8_t,
                               window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_reparent_window_checked(c: *mut xcb_connection_t,
                                       window: xcb_window_t,
                                       parent: xcb_window_t, x: int16_t,
                                       y: int16_t) -> xcb_void_cookie_t;
    pub fn xcb_reparent_window(c: *mut xcb_connection_t, window: xcb_window_t,
                               parent: xcb_window_t, x: int16_t, y: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_map_window_checked(c: *mut xcb_connection_t,
                                  window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_map_window(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_map_subwindows_checked(c: *mut xcb_connection_t,
                                      window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_map_subwindows(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_unmap_window_checked(c: *mut xcb_connection_t,
                                    window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_unmap_window(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_unmap_subwindows_checked(c: *mut xcb_connection_t,
                                        window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_unmap_subwindows(c: *mut xcb_connection_t,
                                window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_configure_window_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_configure_window_checked(c: *mut xcb_connection_t,
                                        window: xcb_window_t,
                                        value_mask: uint16_t,
                                        value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_configure_window(c: *mut xcb_connection_t,
                                window: xcb_window_t, value_mask: uint16_t,
                                value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_circulate_window_checked(c: *mut xcb_connection_t,
                                        direction: uint8_t,
                                        window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_circulate_window(c: *mut xcb_connection_t, direction: uint8_t,
                                window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_get_geometry(c: *mut xcb_connection_t,
                            drawable: xcb_drawable_t)
     -> xcb_get_geometry_cookie_t;
    pub fn xcb_get_geometry_unchecked(c: *mut xcb_connection_t,
                                      drawable: xcb_drawable_t)
     -> xcb_get_geometry_cookie_t;
    pub fn xcb_get_geometry_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_get_geometry_cookie_t,
                                  e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_geometry_reply_t;
    pub fn xcb_query_tree_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_query_tree(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_query_tree_cookie_t;
    pub fn xcb_query_tree_unchecked(c: *mut xcb_connection_t,
                                    window: xcb_window_t)
     -> xcb_query_tree_cookie_t;
    pub fn xcb_query_tree_children(R: *const xcb_query_tree_reply_t)
     -> *mut xcb_window_t;
    pub fn xcb_query_tree_children_length(R: *const xcb_query_tree_reply_t)
     -> ::libc::c_int;
    pub fn xcb_query_tree_children_end(R: *const xcb_query_tree_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_query_tree_reply(c: *mut xcb_connection_t,
                                cookie: xcb_query_tree_cookie_t,
                                e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_query_tree_reply_t;
    pub fn xcb_intern_atom_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_intern_atom(c: *mut xcb_connection_t, only_if_exists: uint8_t,
                           name_len: uint16_t, name: *const ::libc::c_char)
     -> xcb_intern_atom_cookie_t;
    pub fn xcb_intern_atom_unchecked(c: *mut xcb_connection_t,
                                     only_if_exists: uint8_t,
                                     name_len: uint16_t,
                                     name: *const ::libc::c_char)
     -> xcb_intern_atom_cookie_t;
    pub fn xcb_intern_atom_reply(c: *mut xcb_connection_t,
                                 cookie: xcb_intern_atom_cookie_t,
                                 e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_intern_atom_reply_t;
    pub fn xcb_get_atom_name_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_get_atom_name(c: *mut xcb_connection_t, atom: xcb_atom_t)
     -> xcb_get_atom_name_cookie_t;
    pub fn xcb_get_atom_name_unchecked(c: *mut xcb_connection_t,
                                       atom: xcb_atom_t)
     -> xcb_get_atom_name_cookie_t;
    pub fn xcb_get_atom_name_name(R: *const xcb_get_atom_name_reply_t)
     -> *mut ::libc::c_char;
    pub fn xcb_get_atom_name_name_length(R: *const xcb_get_atom_name_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_atom_name_name_end(R: *const xcb_get_atom_name_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_atom_name_reply(c: *mut xcb_connection_t,
                                   cookie: xcb_get_atom_name_cookie_t,
                                   e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_atom_name_reply_t;
    pub fn xcb_change_property_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_property_checked(c: *mut xcb_connection_t,
                                       mode: uint8_t, window: xcb_window_t,
                                       property: xcb_atom_t,
                                       _type: xcb_atom_t, format: uint8_t,
                                       data_len: uint32_t,
                                       data: *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_change_property(c: *mut xcb_connection_t, mode: uint8_t,
                               window: xcb_window_t, property: xcb_atom_t,
                               _type: xcb_atom_t, format: uint8_t,
                               data_len: uint32_t,
                               data: *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_delete_property_checked(c: *mut xcb_connection_t,
                                       window: xcb_window_t,
                                       property: xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_delete_property(c: *mut xcb_connection_t, window: xcb_window_t,
                               property: xcb_atom_t) -> xcb_void_cookie_t;
    pub fn xcb_get_property_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_get_property(c: *mut xcb_connection_t, _delete: uint8_t,
                            window: xcb_window_t, property: xcb_atom_t,
                            _type: xcb_atom_t, long_offset: uint32_t,
                            long_length: uint32_t)
     -> xcb_get_property_cookie_t;
    pub fn xcb_get_property_unchecked(c: *mut xcb_connection_t,
                                      _delete: uint8_t, window: xcb_window_t,
                                      property: xcb_atom_t, _type: xcb_atom_t,
                                      long_offset: uint32_t,
                                      long_length: uint32_t)
     -> xcb_get_property_cookie_t;
    pub fn xcb_get_property_value(R: *const xcb_get_property_reply_t)
     -> *mut ::libc::c_void;
    pub fn xcb_get_property_value_length(R: *const xcb_get_property_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_property_value_end(R: *const xcb_get_property_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_property_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_get_property_cookie_t,
                                  e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_property_reply_t;
    pub fn xcb_list_properties_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_list_properties(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_list_properties_cookie_t;
    pub fn xcb_list_properties_unchecked(c: *mut xcb_connection_t,
                                         window: xcb_window_t)
     -> xcb_list_properties_cookie_t;
    pub fn xcb_list_properties_atoms(R: *const xcb_list_properties_reply_t)
     -> *mut xcb_atom_t;
    pub fn xcb_list_properties_atoms_length(R:
                                                *const xcb_list_properties_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_properties_atoms_end(R:
                                             *const xcb_list_properties_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_list_properties_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_list_properties_cookie_t,
                                     e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_list_properties_reply_t;
    pub fn xcb_set_selection_owner_checked(c: *mut xcb_connection_t,
                                           owner: xcb_window_t,
                                           selection: xcb_atom_t,
                                           time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_selection_owner(c: *mut xcb_connection_t,
                                   owner: xcb_window_t, selection: xcb_atom_t,
                                   time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_get_selection_owner(c: *mut xcb_connection_t,
                                   selection: xcb_atom_t)
     -> xcb_get_selection_owner_cookie_t;
    pub fn xcb_get_selection_owner_unchecked(c: *mut xcb_connection_t,
                                             selection: xcb_atom_t)
     -> xcb_get_selection_owner_cookie_t;
    pub fn xcb_get_selection_owner_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_get_selection_owner_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_selection_owner_reply_t;
    pub fn xcb_convert_selection_checked(c: *mut xcb_connection_t,
                                         requestor: xcb_window_t,
                                         selection: xcb_atom_t,
                                         target: xcb_atom_t,
                                         property: xcb_atom_t,
                                         time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_convert_selection(c: *mut xcb_connection_t,
                                 requestor: xcb_window_t,
                                 selection: xcb_atom_t, target: xcb_atom_t,
                                 property: xcb_atom_t, time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_send_event_checked(c: *mut xcb_connection_t,
                                  propagate: uint8_t,
                                  destination: xcb_window_t,
                                  event_mask: uint32_t,
                                  event: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_send_event(c: *mut xcb_connection_t, propagate: uint8_t,
                          destination: xcb_window_t, event_mask: uint32_t,
                          event: *const ::libc::c_char) -> xcb_void_cookie_t;
    pub fn xcb_grab_pointer(c: *mut xcb_connection_t, owner_events: uint8_t,
                            grab_window: xcb_window_t, event_mask: uint16_t,
                            pointer_mode: uint8_t, keyboard_mode: uint8_t,
                            confine_to: xcb_window_t, cursor: xcb_cursor_t,
                            time: xcb_timestamp_t)
     -> xcb_grab_pointer_cookie_t;
    pub fn xcb_grab_pointer_unchecked(c: *mut xcb_connection_t,
                                      owner_events: uint8_t,
                                      grab_window: xcb_window_t,
                                      event_mask: uint16_t,
                                      pointer_mode: uint8_t,
                                      keyboard_mode: uint8_t,
                                      confine_to: xcb_window_t,
                                      cursor: xcb_cursor_t,
                                      time: xcb_timestamp_t)
     -> xcb_grab_pointer_cookie_t;
    pub fn xcb_grab_pointer_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_grab_pointer_cookie_t,
                                  e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_grab_pointer_reply_t;
    pub fn xcb_ungrab_pointer_checked(c: *mut xcb_connection_t,
                                      time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_ungrab_pointer(c: *mut xcb_connection_t, time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_grab_button_checked(c: *mut xcb_connection_t,
                                   owner_events: uint8_t,
                                   grab_window: xcb_window_t,
                                   event_mask: uint16_t,
                                   pointer_mode: uint8_t,
                                   keyboard_mode: uint8_t,
                                   confine_to: xcb_window_t,
                                   cursor: xcb_cursor_t, button: uint8_t,
                                   modifiers: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_grab_button(c: *mut xcb_connection_t, owner_events: uint8_t,
                           grab_window: xcb_window_t, event_mask: uint16_t,
                           pointer_mode: uint8_t, keyboard_mode: uint8_t,
                           confine_to: xcb_window_t, cursor: xcb_cursor_t,
                           button: uint8_t, modifiers: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_ungrab_button_checked(c: *mut xcb_connection_t,
                                     button: uint8_t,
                                     grab_window: xcb_window_t,
                                     modifiers: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_ungrab_button(c: *mut xcb_connection_t, button: uint8_t,
                             grab_window: xcb_window_t, modifiers: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_active_pointer_grab_checked(c: *mut xcb_connection_t,
                                                  cursor: xcb_cursor_t,
                                                  time: xcb_timestamp_t,
                                                  event_mask: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_active_pointer_grab(c: *mut xcb_connection_t,
                                          cursor: xcb_cursor_t,
                                          time: xcb_timestamp_t,
                                          event_mask: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_grab_keyboard(c: *mut xcb_connection_t, owner_events: uint8_t,
                             grab_window: xcb_window_t, time: xcb_timestamp_t,
                             pointer_mode: uint8_t, keyboard_mode: uint8_t)
     -> xcb_grab_keyboard_cookie_t;
    pub fn xcb_grab_keyboard_unchecked(c: *mut xcb_connection_t,
                                       owner_events: uint8_t,
                                       grab_window: xcb_window_t,
                                       time: xcb_timestamp_t,
                                       pointer_mode: uint8_t,
                                       keyboard_mode: uint8_t)
     -> xcb_grab_keyboard_cookie_t;
    pub fn xcb_grab_keyboard_reply(c: *mut xcb_connection_t,
                                   cookie: xcb_grab_keyboard_cookie_t,
                                   e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_grab_keyboard_reply_t;
    pub fn xcb_ungrab_keyboard_checked(c: *mut xcb_connection_t,
                                       time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_ungrab_keyboard(c: *mut xcb_connection_t,
                               time: xcb_timestamp_t) -> xcb_void_cookie_t;
    pub fn xcb_grab_key_checked(c: *mut xcb_connection_t,
                                owner_events: uint8_t,
                                grab_window: xcb_window_t,
                                modifiers: uint16_t, key: xcb_keycode_t,
                                pointer_mode: uint8_t, keyboard_mode: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_grab_key(c: *mut xcb_connection_t, owner_events: uint8_t,
                        grab_window: xcb_window_t, modifiers: uint16_t,
                        key: xcb_keycode_t, pointer_mode: uint8_t,
                        keyboard_mode: uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_ungrab_key_checked(c: *mut xcb_connection_t,
                                  key: xcb_keycode_t,
                                  grab_window: xcb_window_t,
                                  modifiers: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_ungrab_key(c: *mut xcb_connection_t, key: xcb_keycode_t,
                          grab_window: xcb_window_t, modifiers: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_allow_events_checked(c: *mut xcb_connection_t, mode: uint8_t,
                                    time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_allow_events(c: *mut xcb_connection_t, mode: uint8_t,
                            time: xcb_timestamp_t) -> xcb_void_cookie_t;
    pub fn xcb_grab_server_checked(c: *mut xcb_connection_t)
     -> xcb_void_cookie_t;
    pub fn xcb_grab_server(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
    pub fn xcb_ungrab_server_checked(c: *mut xcb_connection_t)
     -> xcb_void_cookie_t;
    pub fn xcb_ungrab_server(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
    pub fn xcb_query_pointer(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_query_pointer_cookie_t;
    pub fn xcb_query_pointer_unchecked(c: *mut xcb_connection_t,
                                       window: xcb_window_t)
     -> xcb_query_pointer_cookie_t;
    pub fn xcb_query_pointer_reply(c: *mut xcb_connection_t,
                                   cookie: xcb_query_pointer_cookie_t,
                                   e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_query_pointer_reply_t;
    pub fn xcb_timecoord_next(i: *mut xcb_timecoord_iterator_t) -> ();
    pub fn xcb_timecoord_end(i: xcb_timecoord_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_motion_events_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_get_motion_events(c: *mut xcb_connection_t,
                                 window: xcb_window_t, start: xcb_timestamp_t,
                                 stop: xcb_timestamp_t)
     -> xcb_get_motion_events_cookie_t;
    pub fn xcb_get_motion_events_unchecked(c: *mut xcb_connection_t,
                                           window: xcb_window_t,
                                           start: xcb_timestamp_t,
                                           stop: xcb_timestamp_t)
     -> xcb_get_motion_events_cookie_t;
    pub fn xcb_get_motion_events_events(R:
                                            *const xcb_get_motion_events_reply_t)
     -> *mut xcb_timecoord_t;
    pub fn xcb_get_motion_events_events_length(R:
                                                   *const xcb_get_motion_events_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_motion_events_events_iterator(R:
                                                     *const xcb_get_motion_events_reply_t)
     -> xcb_timecoord_iterator_t;
    pub fn xcb_get_motion_events_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_get_motion_events_cookie_t,
                                       e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_motion_events_reply_t;
    pub fn xcb_translate_coordinates(c: *mut xcb_connection_t,
                                     src_window: xcb_window_t,
                                     dst_window: xcb_window_t, src_x: int16_t,
                                     src_y: int16_t)
     -> xcb_translate_coordinates_cookie_t;
    pub fn xcb_translate_coordinates_unchecked(c: *mut xcb_connection_t,
                                               src_window: xcb_window_t,
                                               dst_window: xcb_window_t,
                                               src_x: int16_t, src_y: int16_t)
     -> xcb_translate_coordinates_cookie_t;
    pub fn xcb_translate_coordinates_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_translate_coordinates_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_translate_coordinates_reply_t;
    pub fn xcb_warp_pointer_checked(c: *mut xcb_connection_t,
                                    src_window: xcb_window_t,
                                    dst_window: xcb_window_t, src_x: int16_t,
                                    src_y: int16_t, src_width: uint16_t,
                                    src_height: uint16_t, dst_x: int16_t,
                                    dst_y: int16_t) -> xcb_void_cookie_t;
    pub fn xcb_warp_pointer(c: *mut xcb_connection_t,
                            src_window: xcb_window_t,
                            dst_window: xcb_window_t, src_x: int16_t,
                            src_y: int16_t, src_width: uint16_t,
                            src_height: uint16_t, dst_x: int16_t,
                            dst_y: int16_t) -> xcb_void_cookie_t;
    pub fn xcb_set_input_focus_checked(c: *mut xcb_connection_t,
                                       revert_to: uint8_t,
                                       focus: xcb_window_t,
                                       time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_input_focus(c: *mut xcb_connection_t, revert_to: uint8_t,
                               focus: xcb_window_t, time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_get_input_focus(c: *mut xcb_connection_t)
     -> xcb_get_input_focus_cookie_t;
    pub fn xcb_get_input_focus_unchecked(c: *mut xcb_connection_t)
     -> xcb_get_input_focus_cookie_t;
    pub fn xcb_get_input_focus_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_get_input_focus_cookie_t,
                                     e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_input_focus_reply_t;
    pub fn xcb_query_keymap(c: *mut xcb_connection_t)
     -> xcb_query_keymap_cookie_t;
    pub fn xcb_query_keymap_unchecked(c: *mut xcb_connection_t)
     -> xcb_query_keymap_cookie_t;
    pub fn xcb_query_keymap_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_query_keymap_cookie_t,
                                  e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_query_keymap_reply_t;
    pub fn xcb_open_font_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_open_font_checked(c: *mut xcb_connection_t, fid: xcb_font_t,
                                 name_len: uint16_t,
                                 name: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_open_font(c: *mut xcb_connection_t, fid: xcb_font_t,
                         name_len: uint16_t, name: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_close_font_checked(c: *mut xcb_connection_t, font: xcb_font_t)
     -> xcb_void_cookie_t;
    pub fn xcb_close_font(c: *mut xcb_connection_t, font: xcb_font_t)
     -> xcb_void_cookie_t;
    pub fn xcb_fontprop_next(i: *mut xcb_fontprop_iterator_t) -> ();
    pub fn xcb_fontprop_end(i: xcb_fontprop_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_charinfo_next(i: *mut xcb_charinfo_iterator_t) -> ();
    pub fn xcb_charinfo_end(i: xcb_charinfo_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_query_font_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_query_font(c: *mut xcb_connection_t, font: xcb_fontable_t)
     -> xcb_query_font_cookie_t;
    pub fn xcb_query_font_unchecked(c: *mut xcb_connection_t,
                                    font: xcb_fontable_t)
     -> xcb_query_font_cookie_t;
    pub fn xcb_query_font_properties(R: *const xcb_query_font_reply_t)
     -> *mut xcb_fontprop_t;
    pub fn xcb_query_font_properties_length(R: *const xcb_query_font_reply_t)
     -> ::libc::c_int;
    pub fn xcb_query_font_properties_iterator(R:
                                                  *const xcb_query_font_reply_t)
     -> xcb_fontprop_iterator_t;
    pub fn xcb_query_font_char_infos(R: *const xcb_query_font_reply_t)
     -> *mut xcb_charinfo_t;
    pub fn xcb_query_font_char_infos_length(R: *const xcb_query_font_reply_t)
     -> ::libc::c_int;
    pub fn xcb_query_font_char_infos_iterator(R:
                                                  *const xcb_query_font_reply_t)
     -> xcb_charinfo_iterator_t;
    pub fn xcb_query_font_reply(c: *mut xcb_connection_t,
                                cookie: xcb_query_font_cookie_t,
                                e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_query_font_reply_t;
    pub fn xcb_query_text_extents_sizeof(_buffer: *const ::libc::c_void,
                                         string_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_query_text_extents(c: *mut xcb_connection_t,
                                  font: xcb_fontable_t, string_len: uint32_t,
                                  string: *const xcb_char2b_t)
     -> xcb_query_text_extents_cookie_t;
    pub fn xcb_query_text_extents_unchecked(c: *mut xcb_connection_t,
                                            font: xcb_fontable_t,
                                            string_len: uint32_t,
                                            string: *const xcb_char2b_t)
     -> xcb_query_text_extents_cookie_t;
    pub fn xcb_query_text_extents_reply(c: *mut xcb_connection_t,
                                        cookie:
                                            xcb_query_text_extents_cookie_t,
                                        e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_query_text_extents_reply_t;
    pub fn xcb_str_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_str_name(R: *const xcb_str_t) -> *mut ::libc::c_char;
    pub fn xcb_str_name_length(R: *const xcb_str_t) -> ::libc::c_int;
    pub fn xcb_str_name_end(R: *const xcb_str_t) -> xcb_generic_iterator_t;
    pub fn xcb_str_next(i: *mut xcb_str_iterator_t) -> ();
    pub fn xcb_str_end(i: xcb_str_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_list_fonts_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_list_fonts(c: *mut xcb_connection_t, max_names: uint16_t,
                          pattern_len: uint16_t,
                          pattern: *const ::libc::c_char)
     -> xcb_list_fonts_cookie_t;
    pub fn xcb_list_fonts_unchecked(c: *mut xcb_connection_t,
                                    max_names: uint16_t,
                                    pattern_len: uint16_t,
                                    pattern: *const ::libc::c_char)
     -> xcb_list_fonts_cookie_t;
    pub fn xcb_list_fonts_names_length(R: *const xcb_list_fonts_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_fonts_names_iterator(R: *const xcb_list_fonts_reply_t)
     -> xcb_str_iterator_t;
    pub fn xcb_list_fonts_reply(c: *mut xcb_connection_t,
                                cookie: xcb_list_fonts_cookie_t,
                                e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_list_fonts_reply_t;
    pub fn xcb_list_fonts_with_info_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_list_fonts_with_info(c: *mut xcb_connection_t,
                                    max_names: uint16_t,
                                    pattern_len: uint16_t,
                                    pattern: *const ::libc::c_char)
     -> xcb_list_fonts_with_info_cookie_t;
    pub fn xcb_list_fonts_with_info_unchecked(c: *mut xcb_connection_t,
                                              max_names: uint16_t,
                                              pattern_len: uint16_t,
                                              pattern: *const ::libc::c_char)
     -> xcb_list_fonts_with_info_cookie_t;
    pub fn xcb_list_fonts_with_info_properties(R:
                                                   *const xcb_list_fonts_with_info_reply_t)
     -> *mut xcb_fontprop_t;
    pub fn xcb_list_fonts_with_info_properties_length(R:
                                                          *const xcb_list_fonts_with_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_fonts_with_info_properties_iterator(R:
                                                            *const xcb_list_fonts_with_info_reply_t)
     -> xcb_fontprop_iterator_t;
    pub fn xcb_list_fonts_with_info_name(R:
                                             *const xcb_list_fonts_with_info_reply_t)
     -> *mut ::libc::c_char;
    pub fn xcb_list_fonts_with_info_name_length(R:
                                                    *const xcb_list_fonts_with_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_fonts_with_info_name_end(R:
                                                 *const xcb_list_fonts_with_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_list_fonts_with_info_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_list_fonts_with_info_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_list_fonts_with_info_reply_t;
    pub fn xcb_set_font_path_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_set_font_path_checked(c: *mut xcb_connection_t,
                                     font_qty: uint16_t,
                                     font: *const xcb_str_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_font_path(c: *mut xcb_connection_t, font_qty: uint16_t,
                             font: *const xcb_str_t) -> xcb_void_cookie_t;
    pub fn xcb_get_font_path_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_get_font_path(c: *mut xcb_connection_t)
     -> xcb_get_font_path_cookie_t;
    pub fn xcb_get_font_path_unchecked(c: *mut xcb_connection_t)
     -> xcb_get_font_path_cookie_t;
    pub fn xcb_get_font_path_path_length(R: *const xcb_get_font_path_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_font_path_path_iterator(R:
                                               *const xcb_get_font_path_reply_t)
     -> xcb_str_iterator_t;
    pub fn xcb_get_font_path_reply(c: *mut xcb_connection_t,
                                   cookie: xcb_get_font_path_cookie_t,
                                   e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_font_path_reply_t;
    pub fn xcb_create_pixmap_checked(c: *mut xcb_connection_t, depth: uint8_t,
                                     pid: xcb_pixmap_t,
                                     drawable: xcb_drawable_t,
                                     width: uint16_t, height: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_create_pixmap(c: *mut xcb_connection_t, depth: uint8_t,
                             pid: xcb_pixmap_t, drawable: xcb_drawable_t,
                             width: uint16_t, height: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_free_pixmap_checked(c: *mut xcb_connection_t,
                                   pixmap: xcb_pixmap_t) -> xcb_void_cookie_t;
    pub fn xcb_free_pixmap(c: *mut xcb_connection_t, pixmap: xcb_pixmap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_create_gc_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_create_gc_checked(c: *mut xcb_connection_t,
                                 cid: xcb_gcontext_t,
                                 drawable: xcb_drawable_t,
                                 value_mask: uint32_t,
                                 value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_create_gc(c: *mut xcb_connection_t, cid: xcb_gcontext_t,
                         drawable: xcb_drawable_t, value_mask: uint32_t,
                         value_list: *const uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_change_gc_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_gc_checked(c: *mut xcb_connection_t, gc: xcb_gcontext_t,
                                 value_mask: uint32_t,
                                 value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_gc(c: *mut xcb_connection_t, gc: xcb_gcontext_t,
                         value_mask: uint32_t, value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_copy_gc_checked(c: *mut xcb_connection_t,
                               src_gc: xcb_gcontext_t, dst_gc: xcb_gcontext_t,
                               value_mask: uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_copy_gc(c: *mut xcb_connection_t, src_gc: xcb_gcontext_t,
                       dst_gc: xcb_gcontext_t, value_mask: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_dashes_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_set_dashes_checked(c: *mut xcb_connection_t,
                                  gc: xcb_gcontext_t, dash_offset: uint16_t,
                                  dashes_len: uint16_t,
                                  dashes: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_dashes(c: *mut xcb_connection_t, gc: xcb_gcontext_t,
                          dash_offset: uint16_t, dashes_len: uint16_t,
                          dashes: *const uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_set_clip_rectangles_sizeof(_buffer: *const ::libc::c_void,
                                          rectangles_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_set_clip_rectangles_checked(c: *mut xcb_connection_t,
                                           ordering: uint8_t,
                                           gc: xcb_gcontext_t,
                                           clip_x_origin: int16_t,
                                           clip_y_origin: int16_t,
                                           rectangles_len: uint32_t,
                                           rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_clip_rectangles(c: *mut xcb_connection_t,
                                   ordering: uint8_t, gc: xcb_gcontext_t,
                                   clip_x_origin: int16_t,
                                   clip_y_origin: int16_t,
                                   rectangles_len: uint32_t,
                                   rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_free_gc_checked(c: *mut xcb_connection_t, gc: xcb_gcontext_t)
     -> xcb_void_cookie_t;
    pub fn xcb_free_gc(c: *mut xcb_connection_t, gc: xcb_gcontext_t)
     -> xcb_void_cookie_t;
    pub fn xcb_clear_area_checked(c: *mut xcb_connection_t,
                                  exposures: uint8_t, window: xcb_window_t,
                                  x: int16_t, y: int16_t, width: uint16_t,
                                  height: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_clear_area(c: *mut xcb_connection_t, exposures: uint8_t,
                          window: xcb_window_t, x: int16_t, y: int16_t,
                          width: uint16_t, height: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_copy_area_checked(c: *mut xcb_connection_t,
                                 src_drawable: xcb_drawable_t,
                                 dst_drawable: xcb_drawable_t,
                                 gc: xcb_gcontext_t, src_x: int16_t,
                                 src_y: int16_t, dst_x: int16_t,
                                 dst_y: int16_t, width: uint16_t,
                                 height: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_copy_area(c: *mut xcb_connection_t,
                         src_drawable: xcb_drawable_t,
                         dst_drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                         src_x: int16_t, src_y: int16_t, dst_x: int16_t,
                         dst_y: int16_t, width: uint16_t, height: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_copy_plane_checked(c: *mut xcb_connection_t,
                                  src_drawable: xcb_drawable_t,
                                  dst_drawable: xcb_drawable_t,
                                  gc: xcb_gcontext_t, src_x: int16_t,
                                  src_y: int16_t, dst_x: int16_t,
                                  dst_y: int16_t, width: uint16_t,
                                  height: uint16_t, bit_plane: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_copy_plane(c: *mut xcb_connection_t,
                          src_drawable: xcb_drawable_t,
                          dst_drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                          src_x: int16_t, src_y: int16_t, dst_x: int16_t,
                          dst_y: int16_t, width: uint16_t, height: uint16_t,
                          bit_plane: uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_poly_point_sizeof(_buffer: *const ::libc::c_void,
                                 points_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_point_checked(c: *mut xcb_connection_t,
                                  coordinate_mode: uint8_t,
                                  drawable: xcb_drawable_t,
                                  gc: xcb_gcontext_t, points_len: uint32_t,
                                  points: *const xcb_point_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_point(c: *mut xcb_connection_t, coordinate_mode: uint8_t,
                          drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                          points_len: uint32_t, points: *const xcb_point_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_line_sizeof(_buffer: *const ::libc::c_void,
                                points_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_line_checked(c: *mut xcb_connection_t,
                                 coordinate_mode: uint8_t,
                                 drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                                 points_len: uint32_t,
                                 points: *const xcb_point_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_line(c: *mut xcb_connection_t, coordinate_mode: uint8_t,
                         drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                         points_len: uint32_t, points: *const xcb_point_t)
     -> xcb_void_cookie_t;
    pub fn xcb_segment_next(i: *mut xcb_segment_iterator_t) -> ();
    pub fn xcb_segment_end(i: xcb_segment_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_poly_segment_sizeof(_buffer: *const ::libc::c_void,
                                   segments_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_segment_checked(c: *mut xcb_connection_t,
                                    drawable: xcb_drawable_t,
                                    gc: xcb_gcontext_t,
                                    segments_len: uint32_t,
                                    segments: *const xcb_segment_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_segment(c: *mut xcb_connection_t,
                            drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                            segments_len: uint32_t,
                            segments: *const xcb_segment_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_rectangle_sizeof(_buffer: *const ::libc::c_void,
                                     rectangles_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_poly_rectangle_checked(c: *mut xcb_connection_t,
                                      drawable: xcb_drawable_t,
                                      gc: xcb_gcontext_t,
                                      rectangles_len: uint32_t,
                                      rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_rectangle(c: *mut xcb_connection_t,
                              drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                              rectangles_len: uint32_t,
                              rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_arc_sizeof(_buffer: *const ::libc::c_void,
                               arcs_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_arc_checked(c: *mut xcb_connection_t,
                                drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                                arcs_len: uint32_t, arcs: *const xcb_arc_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_arc(c: *mut xcb_connection_t, drawable: xcb_drawable_t,
                        gc: xcb_gcontext_t, arcs_len: uint32_t,
                        arcs: *const xcb_arc_t) -> xcb_void_cookie_t;
    pub fn xcb_fill_poly_sizeof(_buffer: *const ::libc::c_void,
                                points_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_fill_poly_checked(c: *mut xcb_connection_t,
                                 drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                                 shape: uint8_t, coordinate_mode: uint8_t,
                                 points_len: uint32_t,
                                 points: *const xcb_point_t)
     -> xcb_void_cookie_t;
    pub fn xcb_fill_poly(c: *mut xcb_connection_t, drawable: xcb_drawable_t,
                         gc: xcb_gcontext_t, shape: uint8_t,
                         coordinate_mode: uint8_t, points_len: uint32_t,
                         points: *const xcb_point_t) -> xcb_void_cookie_t;
    pub fn xcb_poly_fill_rectangle_sizeof(_buffer: *const ::libc::c_void,
                                          rectangles_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_poly_fill_rectangle_checked(c: *mut xcb_connection_t,
                                           drawable: xcb_drawable_t,
                                           gc: xcb_gcontext_t,
                                           rectangles_len: uint32_t,
                                           rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_fill_rectangle(c: *mut xcb_connection_t,
                                   drawable: xcb_drawable_t,
                                   gc: xcb_gcontext_t,
                                   rectangles_len: uint32_t,
                                   rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_fill_arc_sizeof(_buffer: *const ::libc::c_void,
                                    arcs_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_fill_arc_checked(c: *mut xcb_connection_t,
                                     drawable: xcb_drawable_t,
                                     gc: xcb_gcontext_t, arcs_len: uint32_t,
                                     arcs: *const xcb_arc_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_fill_arc(c: *mut xcb_connection_t,
                             drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                             arcs_len: uint32_t, arcs: *const xcb_arc_t)
     -> xcb_void_cookie_t;
    pub fn xcb_put_image_sizeof(_buffer: *const ::libc::c_void,
                                data_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_put_image_checked(c: *mut xcb_connection_t, format: uint8_t,
                                 drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                                 width: uint16_t, height: uint16_t,
                                 dst_x: int16_t, dst_y: int16_t,
                                 left_pad: uint8_t, depth: uint8_t,
                                 data_len: uint32_t, data: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_put_image(c: *mut xcb_connection_t, format: uint8_t,
                         drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                         width: uint16_t, height: uint16_t, dst_x: int16_t,
                         dst_y: int16_t, left_pad: uint8_t, depth: uint8_t,
                         data_len: uint32_t, data: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_get_image_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_get_image(c: *mut xcb_connection_t, format: uint8_t,
                         drawable: xcb_drawable_t, x: int16_t, y: int16_t,
                         width: uint16_t, height: uint16_t,
                         plane_mask: uint32_t) -> xcb_get_image_cookie_t;
    pub fn xcb_get_image_unchecked(c: *mut xcb_connection_t, format: uint8_t,
                                   drawable: xcb_drawable_t, x: int16_t,
                                   y: int16_t, width: uint16_t,
                                   height: uint16_t, plane_mask: uint32_t)
     -> xcb_get_image_cookie_t;
    pub fn xcb_get_image_data(R: *const xcb_get_image_reply_t)
     -> *mut uint8_t;
    pub fn xcb_get_image_data_length(R: *const xcb_get_image_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_image_data_end(R: *const xcb_get_image_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_image_reply(c: *mut xcb_connection_t,
                               cookie: xcb_get_image_cookie_t,
                               e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_image_reply_t;
    pub fn xcb_poly_text_8_sizeof(_buffer: *const ::libc::c_void,
                                  items_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_text_8_checked(c: *mut xcb_connection_t,
                                   drawable: xcb_drawable_t,
                                   gc: xcb_gcontext_t, x: int16_t, y: int16_t,
                                   items_len: uint32_t, items: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_text_8(c: *mut xcb_connection_t, drawable: xcb_drawable_t,
                           gc: xcb_gcontext_t, x: int16_t, y: int16_t,
                           items_len: uint32_t, items: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_text_16_sizeof(_buffer: *const ::libc::c_void,
                                   items_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_text_16_checked(c: *mut xcb_connection_t,
                                    drawable: xcb_drawable_t,
                                    gc: xcb_gcontext_t, x: int16_t,
                                    y: int16_t, items_len: uint32_t,
                                    items: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_text_16(c: *mut xcb_connection_t,
                            drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                            x: int16_t, y: int16_t, items_len: uint32_t,
                            items: *const uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_image_text_8_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_image_text_8_checked(c: *mut xcb_connection_t,
                                    string_len: uint8_t,
                                    drawable: xcb_drawable_t,
                                    gc: xcb_gcontext_t, x: int16_t,
                                    y: int16_t, string: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_image_text_8(c: *mut xcb_connection_t, string_len: uint8_t,
                            drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                            x: int16_t, y: int16_t,
                            string: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_image_text_16_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_image_text_16_checked(c: *mut xcb_connection_t,
                                     string_len: uint8_t,
                                     drawable: xcb_drawable_t,
                                     gc: xcb_gcontext_t, x: int16_t,
                                     y: int16_t, string: *const xcb_char2b_t)
     -> xcb_void_cookie_t;
    pub fn xcb_image_text_16(c: *mut xcb_connection_t, string_len: uint8_t,
                             drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                             x: int16_t, y: int16_t,
                             string: *const xcb_char2b_t)
     -> xcb_void_cookie_t;
    pub fn xcb_create_colormap_checked(c: *mut xcb_connection_t,
                                       alloc: uint8_t, mid: xcb_colormap_t,
                                       window: xcb_window_t,
                                       visual: xcb_visualid_t)
     -> xcb_void_cookie_t;
    pub fn xcb_create_colormap(c: *mut xcb_connection_t, alloc: uint8_t,
                               mid: xcb_colormap_t, window: xcb_window_t,
                               visual: xcb_visualid_t) -> xcb_void_cookie_t;
    pub fn xcb_free_colormap_checked(c: *mut xcb_connection_t,
                                     cmap: xcb_colormap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_free_colormap(c: *mut xcb_connection_t, cmap: xcb_colormap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_copy_colormap_and_free_checked(c: *mut xcb_connection_t,
                                              mid: xcb_colormap_t,
                                              src_cmap: xcb_colormap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_copy_colormap_and_free(c: *mut xcb_connection_t,
                                      mid: xcb_colormap_t,
                                      src_cmap: xcb_colormap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_install_colormap_checked(c: *mut xcb_connection_t,
                                        cmap: xcb_colormap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_install_colormap(c: *mut xcb_connection_t,
                                cmap: xcb_colormap_t) -> xcb_void_cookie_t;
    pub fn xcb_uninstall_colormap_checked(c: *mut xcb_connection_t,
                                          cmap: xcb_colormap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_uninstall_colormap(c: *mut xcb_connection_t,
                                  cmap: xcb_colormap_t) -> xcb_void_cookie_t;
    pub fn xcb_list_installed_colormaps_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_list_installed_colormaps(c: *mut xcb_connection_t,
                                        window: xcb_window_t)
     -> xcb_list_installed_colormaps_cookie_t;
    pub fn xcb_list_installed_colormaps_unchecked(c: *mut xcb_connection_t,
                                                  window: xcb_window_t)
     -> xcb_list_installed_colormaps_cookie_t;
    pub fn xcb_list_installed_colormaps_cmaps(R:
                                                  *const xcb_list_installed_colormaps_reply_t)
     -> *mut xcb_colormap_t;
    pub fn xcb_list_installed_colormaps_cmaps_length(R:
                                                         *const xcb_list_installed_colormaps_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_installed_colormaps_cmaps_end(R:
                                                      *const xcb_list_installed_colormaps_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_list_installed_colormaps_reply(c: *mut xcb_connection_t,
                                              cookie:
                                                  xcb_list_installed_colormaps_cookie_t,
                                              e:
                                                  *mut *mut xcb_generic_error_t)
     -> *mut xcb_list_installed_colormaps_reply_t;
    pub fn xcb_alloc_color(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                           red: uint16_t, green: uint16_t, blue: uint16_t)
     -> xcb_alloc_color_cookie_t;
    pub fn xcb_alloc_color_unchecked(c: *mut xcb_connection_t,
                                     cmap: xcb_colormap_t, red: uint16_t,
                                     green: uint16_t, blue: uint16_t)
     -> xcb_alloc_color_cookie_t;
    pub fn xcb_alloc_color_reply(c: *mut xcb_connection_t,
                                 cookie: xcb_alloc_color_cookie_t,
                                 e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_alloc_color_reply_t;
    pub fn xcb_alloc_named_color_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_alloc_named_color(c: *mut xcb_connection_t,
                                 cmap: xcb_colormap_t, name_len: uint16_t,
                                 name: *const ::libc::c_char)
     -> xcb_alloc_named_color_cookie_t;
    pub fn xcb_alloc_named_color_unchecked(c: *mut xcb_connection_t,
                                           cmap: xcb_colormap_t,
                                           name_len: uint16_t,
                                           name: *const ::libc::c_char)
     -> xcb_alloc_named_color_cookie_t;
    pub fn xcb_alloc_named_color_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_alloc_named_color_cookie_t,
                                       e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_alloc_named_color_reply_t;
    pub fn xcb_alloc_color_cells_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_alloc_color_cells(c: *mut xcb_connection_t,
                                 contiguous: uint8_t, cmap: xcb_colormap_t,
                                 colors: uint16_t, planes: uint16_t)
     -> xcb_alloc_color_cells_cookie_t;
    pub fn xcb_alloc_color_cells_unchecked(c: *mut xcb_connection_t,
                                           contiguous: uint8_t,
                                           cmap: xcb_colormap_t,
                                           colors: uint16_t, planes: uint16_t)
     -> xcb_alloc_color_cells_cookie_t;
    pub fn xcb_alloc_color_cells_pixels(R:
                                            *const xcb_alloc_color_cells_reply_t)
     -> *mut uint32_t;
    pub fn xcb_alloc_color_cells_pixels_length(R:
                                                   *const xcb_alloc_color_cells_reply_t)
     -> ::libc::c_int;
    pub fn xcb_alloc_color_cells_pixels_end(R:
                                                *const xcb_alloc_color_cells_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_alloc_color_cells_masks(R:
                                           *const xcb_alloc_color_cells_reply_t)
     -> *mut uint32_t;
    pub fn xcb_alloc_color_cells_masks_length(R:
                                                  *const xcb_alloc_color_cells_reply_t)
     -> ::libc::c_int;
    pub fn xcb_alloc_color_cells_masks_end(R:
                                               *const xcb_alloc_color_cells_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_alloc_color_cells_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_alloc_color_cells_cookie_t,
                                       e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_alloc_color_cells_reply_t;
    pub fn xcb_alloc_color_planes_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_alloc_color_planes(c: *mut xcb_connection_t,
                                  contiguous: uint8_t, cmap: xcb_colormap_t,
                                  colors: uint16_t, reds: uint16_t,
                                  greens: uint16_t, blues: uint16_t)
     -> xcb_alloc_color_planes_cookie_t;
    pub fn xcb_alloc_color_planes_unchecked(c: *mut xcb_connection_t,
                                            contiguous: uint8_t,
                                            cmap: xcb_colormap_t,
                                            colors: uint16_t, reds: uint16_t,
                                            greens: uint16_t, blues: uint16_t)
     -> xcb_alloc_color_planes_cookie_t;
    pub fn xcb_alloc_color_planes_pixels(R:
                                             *const xcb_alloc_color_planes_reply_t)
     -> *mut uint32_t;
    pub fn xcb_alloc_color_planes_pixels_length(R:
                                                    *const xcb_alloc_color_planes_reply_t)
     -> ::libc::c_int;
    pub fn xcb_alloc_color_planes_pixels_end(R:
                                                 *const xcb_alloc_color_planes_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_alloc_color_planes_reply(c: *mut xcb_connection_t,
                                        cookie:
                                            xcb_alloc_color_planes_cookie_t,
                                        e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_alloc_color_planes_reply_t;
    pub fn xcb_free_colors_sizeof(_buffer: *const ::libc::c_void,
                                  pixels_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_free_colors_checked(c: *mut xcb_connection_t,
                                   cmap: xcb_colormap_t, plane_mask: uint32_t,
                                   pixels_len: uint32_t,
                                   pixels: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_free_colors(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                           plane_mask: uint32_t, pixels_len: uint32_t,
                           pixels: *const uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_coloritem_next(i: *mut xcb_coloritem_iterator_t) -> ();
    pub fn xcb_coloritem_end(i: xcb_coloritem_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_store_colors_sizeof(_buffer: *const ::libc::c_void,
                                   items_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_store_colors_checked(c: *mut xcb_connection_t,
                                    cmap: xcb_colormap_t, items_len: uint32_t,
                                    items: *const xcb_coloritem_t)
     -> xcb_void_cookie_t;
    pub fn xcb_store_colors(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                            items_len: uint32_t,
                            items: *const xcb_coloritem_t)
     -> xcb_void_cookie_t;
    pub fn xcb_store_named_color_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_store_named_color_checked(c: *mut xcb_connection_t,
                                         flags: uint8_t, cmap: xcb_colormap_t,
                                         pixel: uint32_t, name_len: uint16_t,
                                         name: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_store_named_color(c: *mut xcb_connection_t, flags: uint8_t,
                                 cmap: xcb_colormap_t, pixel: uint32_t,
                                 name_len: uint16_t,
                                 name: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_rgb_next(i: *mut xcb_rgb_iterator_t) -> ();
    pub fn xcb_rgb_end(i: xcb_rgb_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_query_colors_sizeof(_buffer: *const ::libc::c_void,
                                   pixels_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_query_colors(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                            pixels_len: uint32_t, pixels: *const uint32_t)
     -> xcb_query_colors_cookie_t;
    pub fn xcb_query_colors_unchecked(c: *mut xcb_connection_t,
                                      cmap: xcb_colormap_t,
                                      pixels_len: uint32_t,
                                      pixels: *const uint32_t)
     -> xcb_query_colors_cookie_t;
    pub fn xcb_query_colors_colors(R: *const xcb_query_colors_reply_t)
     -> *mut xcb_rgb_t;
    pub fn xcb_query_colors_colors_length(R: *const xcb_query_colors_reply_t)
     -> ::libc::c_int;
    pub fn xcb_query_colors_colors_iterator(R:
                                                *const xcb_query_colors_reply_t)
     -> xcb_rgb_iterator_t;
    pub fn xcb_query_colors_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_query_colors_cookie_t,
                                  e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_query_colors_reply_t;
    pub fn xcb_lookup_color_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_lookup_color(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                            name_len: uint16_t, name: *const ::libc::c_char)
     -> xcb_lookup_color_cookie_t;
    pub fn xcb_lookup_color_unchecked(c: *mut xcb_connection_t,
                                      cmap: xcb_colormap_t,
                                      name_len: uint16_t,
                                      name: *const ::libc::c_char)
     -> xcb_lookup_color_cookie_t;
    pub fn xcb_lookup_color_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_lookup_color_cookie_t,
                                  e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_lookup_color_reply_t;
    pub fn xcb_create_cursor_checked(c: *mut xcb_connection_t,
                                     cid: xcb_cursor_t, source: xcb_pixmap_t,
                                     mask: xcb_pixmap_t, fore_red: uint16_t,
                                     fore_green: uint16_t,
                                     fore_blue: uint16_t, back_red: uint16_t,
                                     back_green: uint16_t,
                                     back_blue: uint16_t, x: uint16_t,
                                     y: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_create_cursor(c: *mut xcb_connection_t, cid: xcb_cursor_t,
                             source: xcb_pixmap_t, mask: xcb_pixmap_t,
                             fore_red: uint16_t, fore_green: uint16_t,
                             fore_blue: uint16_t, back_red: uint16_t,
                             back_green: uint16_t, back_blue: uint16_t,
                             x: uint16_t, y: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_create_glyph_cursor_checked(c: *mut xcb_connection_t,
                                           cid: xcb_cursor_t,
                                           source_font: xcb_font_t,
                                           mask_font: xcb_font_t,
                                           source_char: uint16_t,
                                           mask_char: uint16_t,
                                           fore_red: uint16_t,
                                           fore_green: uint16_t,
                                           fore_blue: uint16_t,
                                           back_red: uint16_t,
                                           back_green: uint16_t,
                                           back_blue: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_create_glyph_cursor(c: *mut xcb_connection_t,
                                   cid: xcb_cursor_t, source_font: xcb_font_t,
                                   mask_font: xcb_font_t,
                                   source_char: uint16_t, mask_char: uint16_t,
                                   fore_red: uint16_t, fore_green: uint16_t,
                                   fore_blue: uint16_t, back_red: uint16_t,
                                   back_green: uint16_t, back_blue: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_free_cursor_checked(c: *mut xcb_connection_t,
                                   cursor: xcb_cursor_t) -> xcb_void_cookie_t;
    pub fn xcb_free_cursor(c: *mut xcb_connection_t, cursor: xcb_cursor_t)
     -> xcb_void_cookie_t;
    pub fn xcb_recolor_cursor_checked(c: *mut xcb_connection_t,
                                      cursor: xcb_cursor_t,
                                      fore_red: uint16_t,
                                      fore_green: uint16_t,
                                      fore_blue: uint16_t, back_red: uint16_t,
                                      back_green: uint16_t,
                                      back_blue: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_recolor_cursor(c: *mut xcb_connection_t, cursor: xcb_cursor_t,
                              fore_red: uint16_t, fore_green: uint16_t,
                              fore_blue: uint16_t, back_red: uint16_t,
                              back_green: uint16_t, back_blue: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_query_best_size(c: *mut xcb_connection_t, _class: uint8_t,
                               drawable: xcb_drawable_t, width: uint16_t,
                               height: uint16_t)
     -> xcb_query_best_size_cookie_t;
    pub fn xcb_query_best_size_unchecked(c: *mut xcb_connection_t,
                                         _class: uint8_t,
                                         drawable: xcb_drawable_t,
                                         width: uint16_t, height: uint16_t)
     -> xcb_query_best_size_cookie_t;
    pub fn xcb_query_best_size_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_query_best_size_cookie_t,
                                     e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_query_best_size_reply_t;
    pub fn xcb_query_extension_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_query_extension(c: *mut xcb_connection_t, name_len: uint16_t,
                               name: *const ::libc::c_char)
     -> xcb_query_extension_cookie_t;
    pub fn xcb_query_extension_unchecked(c: *mut xcb_connection_t,
                                         name_len: uint16_t,
                                         name: *const ::libc::c_char)
     -> xcb_query_extension_cookie_t;
    pub fn xcb_query_extension_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_query_extension_cookie_t,
                                     e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_query_extension_reply_t;
    pub fn xcb_list_extensions_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_list_extensions(c: *mut xcb_connection_t)
     -> xcb_list_extensions_cookie_t;
    pub fn xcb_list_extensions_unchecked(c: *mut xcb_connection_t)
     -> xcb_list_extensions_cookie_t;
    pub fn xcb_list_extensions_names_length(R:
                                                *const xcb_list_extensions_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_extensions_names_iterator(R:
                                                  *const xcb_list_extensions_reply_t)
     -> xcb_str_iterator_t;
    pub fn xcb_list_extensions_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_list_extensions_cookie_t,
                                     e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_list_extensions_reply_t;
    pub fn xcb_change_keyboard_mapping_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_keyboard_mapping_checked(c: *mut xcb_connection_t,
                                               keycode_count: uint8_t,
                                               first_keycode: xcb_keycode_t,
                                               keysyms_per_keycode: uint8_t,
                                               keysyms: *const xcb_keysym_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_keyboard_mapping(c: *mut xcb_connection_t,
                                       keycode_count: uint8_t,
                                       first_keycode: xcb_keycode_t,
                                       keysyms_per_keycode: uint8_t,
                                       keysyms: *const xcb_keysym_t)
     -> xcb_void_cookie_t;
    pub fn xcb_get_keyboard_mapping_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_get_keyboard_mapping(c: *mut xcb_connection_t,
                                    first_keycode: xcb_keycode_t,
                                    count: uint8_t)
     -> xcb_get_keyboard_mapping_cookie_t;
    pub fn xcb_get_keyboard_mapping_unchecked(c: *mut xcb_connection_t,
                                              first_keycode: xcb_keycode_t,
                                              count: uint8_t)
     -> xcb_get_keyboard_mapping_cookie_t;
    pub fn xcb_get_keyboard_mapping_keysyms(R:
                                                *const xcb_get_keyboard_mapping_reply_t)
     -> *mut xcb_keysym_t;
    pub fn xcb_get_keyboard_mapping_keysyms_length(R:
                                                       *const xcb_get_keyboard_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_keyboard_mapping_keysyms_end(R:
                                                    *const xcb_get_keyboard_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_keyboard_mapping_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_get_keyboard_mapping_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_keyboard_mapping_reply_t;
    pub fn xcb_change_keyboard_control_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_keyboard_control_checked(c: *mut xcb_connection_t,
                                               value_mask: uint32_t,
                                               value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_keyboard_control(c: *mut xcb_connection_t,
                                       value_mask: uint32_t,
                                       value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_get_keyboard_control(c: *mut xcb_connection_t)
     -> xcb_get_keyboard_control_cookie_t;
    pub fn xcb_get_keyboard_control_unchecked(c: *mut xcb_connection_t)
     -> xcb_get_keyboard_control_cookie_t;
    pub fn xcb_get_keyboard_control_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_get_keyboard_control_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_keyboard_control_reply_t;
    pub fn xcb_bell_checked(c: *mut xcb_connection_t, percent: int8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_bell(c: *mut xcb_connection_t, percent: int8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_pointer_control_checked(c: *mut xcb_connection_t,
                                              acceleration_numerator: int16_t,
                                              acceleration_denominator:
                                                  int16_t, threshold: int16_t,
                                              do_acceleration: uint8_t,
                                              do_threshold: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_pointer_control(c: *mut xcb_connection_t,
                                      acceleration_numerator: int16_t,
                                      acceleration_denominator: int16_t,
                                      threshold: int16_t,
                                      do_acceleration: uint8_t,
                                      do_threshold: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_get_pointer_control(c: *mut xcb_connection_t)
     -> xcb_get_pointer_control_cookie_t;
    pub fn xcb_get_pointer_control_unchecked(c: *mut xcb_connection_t)
     -> xcb_get_pointer_control_cookie_t;
    pub fn xcb_get_pointer_control_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_get_pointer_control_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_pointer_control_reply_t;
    pub fn xcb_set_screen_saver_checked(c: *mut xcb_connection_t,
                                        timeout: int16_t, interval: int16_t,
                                        prefer_blanking: uint8_t,
                                        allow_exposures: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_screen_saver(c: *mut xcb_connection_t, timeout: int16_t,
                                interval: int16_t, prefer_blanking: uint8_t,
                                allow_exposures: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_get_screen_saver(c: *mut xcb_connection_t)
     -> xcb_get_screen_saver_cookie_t;
    pub fn xcb_get_screen_saver_unchecked(c: *mut xcb_connection_t)
     -> xcb_get_screen_saver_cookie_t;
    pub fn xcb_get_screen_saver_reply(c: *mut xcb_connection_t,
                                      cookie: xcb_get_screen_saver_cookie_t,
                                      e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_screen_saver_reply_t;
    pub fn xcb_change_hosts_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_hosts_checked(c: *mut xcb_connection_t, mode: uint8_t,
                                    family: uint8_t, address_len: uint16_t,
                                    address: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_hosts(c: *mut xcb_connection_t, mode: uint8_t,
                            family: uint8_t, address_len: uint16_t,
                            address: *const uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_host_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_host_address(R: *const xcb_host_t) -> *mut uint8_t;
    pub fn xcb_host_address_length(R: *const xcb_host_t) -> ::libc::c_int;
    pub fn xcb_host_address_end(R: *const xcb_host_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_host_next(i: *mut xcb_host_iterator_t) -> ();
    pub fn xcb_host_end(i: xcb_host_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_list_hosts_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_list_hosts(c: *mut xcb_connection_t)
     -> xcb_list_hosts_cookie_t;
    pub fn xcb_list_hosts_unchecked(c: *mut xcb_connection_t)
     -> xcb_list_hosts_cookie_t;
    pub fn xcb_list_hosts_hosts_length(R: *const xcb_list_hosts_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_hosts_hosts_iterator(R: *const xcb_list_hosts_reply_t)
     -> xcb_host_iterator_t;
    pub fn xcb_list_hosts_reply(c: *mut xcb_connection_t,
                                cookie: xcb_list_hosts_cookie_t,
                                e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_list_hosts_reply_t;
    pub fn xcb_set_access_control_checked(c: *mut xcb_connection_t,
                                          mode: uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_set_access_control(c: *mut xcb_connection_t, mode: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_close_down_mode_checked(c: *mut xcb_connection_t,
                                           mode: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_close_down_mode(c: *mut xcb_connection_t, mode: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_kill_client_checked(c: *mut xcb_connection_t,
                                   resource: uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_kill_client(c: *mut xcb_connection_t, resource: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_rotate_properties_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_rotate_properties_checked(c: *mut xcb_connection_t,
                                         window: xcb_window_t,
                                         atoms_len: uint16_t, delta: int16_t,
                                         atoms: *const xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_rotate_properties(c: *mut xcb_connection_t,
                                 window: xcb_window_t, atoms_len: uint16_t,
                                 delta: int16_t, atoms: *const xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_force_screen_saver_checked(c: *mut xcb_connection_t,
                                          mode: uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_force_screen_saver(c: *mut xcb_connection_t, mode: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_pointer_mapping_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_set_pointer_mapping(c: *mut xcb_connection_t, map_len: uint8_t,
                                   map: *const uint8_t)
     -> xcb_set_pointer_mapping_cookie_t;
    pub fn xcb_set_pointer_mapping_unchecked(c: *mut xcb_connection_t,
                                             map_len: uint8_t,
                                             map: *const uint8_t)
     -> xcb_set_pointer_mapping_cookie_t;
    pub fn xcb_set_pointer_mapping_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_set_pointer_mapping_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_set_pointer_mapping_reply_t;
    pub fn xcb_get_pointer_mapping_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_get_pointer_mapping(c: *mut xcb_connection_t)
     -> xcb_get_pointer_mapping_cookie_t;
    pub fn xcb_get_pointer_mapping_unchecked(c: *mut xcb_connection_t)
     -> xcb_get_pointer_mapping_cookie_t;
    pub fn xcb_get_pointer_mapping_map(R:
                                           *const xcb_get_pointer_mapping_reply_t)
     -> *mut uint8_t;
    pub fn xcb_get_pointer_mapping_map_length(R:
                                                  *const xcb_get_pointer_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_pointer_mapping_map_end(R:
                                               *const xcb_get_pointer_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_pointer_mapping_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_get_pointer_mapping_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_pointer_mapping_reply_t;
    pub fn xcb_set_modifier_mapping_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_set_modifier_mapping(c: *mut xcb_connection_t,
                                    keycodes_per_modifier: uint8_t,
                                    keycodes: *const xcb_keycode_t)
     -> xcb_set_modifier_mapping_cookie_t;
    pub fn xcb_set_modifier_mapping_unchecked(c: *mut xcb_connection_t,
                                              keycodes_per_modifier: uint8_t,
                                              keycodes: *const xcb_keycode_t)
     -> xcb_set_modifier_mapping_cookie_t;
    pub fn xcb_set_modifier_mapping_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_set_modifier_mapping_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_set_modifier_mapping_reply_t;
    pub fn xcb_get_modifier_mapping_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_get_modifier_mapping(c: *mut xcb_connection_t)
     -> xcb_get_modifier_mapping_cookie_t;
    pub fn xcb_get_modifier_mapping_unchecked(c: *mut xcb_connection_t)
     -> xcb_get_modifier_mapping_cookie_t;
    pub fn xcb_get_modifier_mapping_keycodes(R:
                                                 *const xcb_get_modifier_mapping_reply_t)
     -> *mut xcb_keycode_t;
    pub fn xcb_get_modifier_mapping_keycodes_length(R:
                                                        *const xcb_get_modifier_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_modifier_mapping_keycodes_end(R:
                                                     *const xcb_get_modifier_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_modifier_mapping_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_get_modifier_mapping_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_modifier_mapping_reply_t;
    pub fn xcb_no_operation_checked(c: *mut xcb_connection_t)
     -> xcb_void_cookie_t;
    pub fn xcb_no_operation(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
    pub fn xcb_flush(c: *mut xcb_connection_t) -> ::libc::c_int;
    pub fn xcb_get_maximum_request_length(c: *mut xcb_connection_t)
     -> uint32_t;
    pub fn xcb_prefetch_maximum_request_length(c: *mut xcb_connection_t)
     -> ();
    pub fn xcb_wait_for_event(c: *mut xcb_connection_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_poll_for_event(c: *mut xcb_connection_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_poll_for_queued_event(c: *mut xcb_connection_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_poll_for_special_event(c: *mut xcb_connection_t,
                                      se: *mut xcb_special_event_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_wait_for_special_event(c: *mut xcb_connection_t,
                                      se: *mut xcb_special_event_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_register_for_special_xge(c: *mut xcb_connection_t,
                                        ext: *mut xcb_extension_t,
                                        eid: uint32_t, stamp: *mut uint32_t)
     -> *mut xcb_special_event_t;
    pub fn xcb_unregister_for_special_event(c: *mut xcb_connection_t,
                                            se: *mut xcb_special_event_t)
     -> ();
    pub fn xcb_request_check(c: *mut xcb_connection_t,
                             cookie: xcb_void_cookie_t)
     -> *mut xcb_generic_error_t;
    pub fn xcb_discard_reply(c: *mut xcb_connection_t,
                             sequence: ::libc::c_uint) -> ();
    pub fn xcb_get_extension_data(c: *mut xcb_connection_t,
                                  ext: *mut xcb_extension_t)
     -> *const Struct_xcb_query_extension_reply_t;
    pub fn xcb_prefetch_extension_data(c: *mut xcb_connection_t,
                                       ext: *mut xcb_extension_t) -> ();
    pub fn xcb_get_setup(c: *mut xcb_connection_t)
     -> *const Struct_xcb_setup_t;
    pub fn xcb_get_file_descriptor(c: *mut xcb_connection_t) -> ::libc::c_int;
    pub fn xcb_connection_has_error(c: *mut xcb_connection_t)
     -> ::libc::c_int;
    pub fn xcb_connect_to_fd(fd: ::libc::c_int,
                             auth_info: *mut xcb_auth_info_t)
     -> *mut xcb_connection_t;
    pub fn xcb_disconnect(c: *mut xcb_connection_t) -> ();
    pub fn xcb_parse_display(name: *const ::libc::c_char,
                             host: *mut *mut ::libc::c_char,
                             display: *mut ::libc::c_int,
                             screen: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn xcb_connect(displayname: *const ::libc::c_char,
                       screenp: *mut ::libc::c_int) -> *mut xcb_connection_t;
    pub fn xcb_connect_to_display_with_auth_info(display:
                                                     *const ::libc::c_char,
                                                 auth: *mut xcb_auth_info_t,
                                                 screen: *mut ::libc::c_int)
     -> *mut xcb_connection_t;
    pub fn xcb_generate_id(c: *mut xcb_connection_t) -> uint32_t;
    pub fn xcb_send_request(c: *mut xcb_connection_t, flags: ::libc::c_int,
                            vector: *mut Struct_iovec,
                            request: *const xcb_protocol_request_t)
     -> ::libc::c_uint;
    pub fn xcb_send_fd(c: *mut xcb_connection_t, fd: ::libc::c_int) -> ();
    pub fn xcb_take_socket(c: *mut xcb_connection_t,
                           return_socket:
                               ::std::option::Option<extern "C" fn(closure:
                                                                       *mut ::libc::c_void)
                                                         -> ()>,
                           closure: *mut ::libc::c_void, flags: ::libc::c_int,
                           sent: *mut uint64_t) -> ::libc::c_int;
    pub fn xcb_writev(c: *mut xcb_connection_t, vector: *mut Struct_iovec,
                      count: ::libc::c_int, requests: uint64_t)
     -> ::libc::c_int;
    pub fn xcb_wait_for_reply(c: *mut xcb_connection_t,
                              request: ::libc::c_uint,
                              e: *mut *mut xcb_generic_error_t)
     -> *mut ::libc::c_void;
    pub fn xcb_poll_for_reply(c: *mut xcb_connection_t,
                              request: ::libc::c_uint,
                              reply: *mut *mut ::libc::c_void,
                              error: *mut *mut xcb_generic_error_t)
     -> ::libc::c_int;
    pub fn xcb_get_reply_fds(c: *mut xcb_connection_t,
                             reply: *mut ::libc::c_void, replylen: size_t)
     -> *mut ::libc::c_int;
    pub fn xcb_popcount(mask: uint32_t) -> ::libc::c_int;
    pub fn xcb_sumof(list: *mut uint8_t, len: ::libc::c_int) -> ::libc::c_int;
    pub fn xcb_render_glyph_next(i: *mut xcb_render_glyph_iterator_t) -> ();
    pub fn xcb_render_glyph_end(i: xcb_render_glyph_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_glyphset_next(i: *mut xcb_render_glyphset_iterator_t)
     -> ();
    pub fn xcb_render_glyphset_end(i: xcb_render_glyphset_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_picture_next(i: *mut xcb_render_picture_iterator_t)
     -> ();
    pub fn xcb_render_picture_end(i: xcb_render_picture_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_pictformat_next(i:
                                          *mut xcb_render_pictformat_iterator_t)
     -> ();
    pub fn xcb_render_pictformat_end(i: xcb_render_pictformat_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_fixed_next(i: *mut xcb_render_fixed_iterator_t) -> ();
    pub fn xcb_render_fixed_end(i: xcb_render_fixed_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_directformat_next(i:
                                            *mut xcb_render_directformat_iterator_t)
     -> ();
    pub fn xcb_render_directformat_end(i: xcb_render_directformat_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_pictforminfo_next(i:
                                            *mut xcb_render_pictforminfo_iterator_t)
     -> ();
    pub fn xcb_render_pictforminfo_end(i: xcb_render_pictforminfo_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_pictvisual_next(i:
                                          *mut xcb_render_pictvisual_iterator_t)
     -> ();
    pub fn xcb_render_pictvisual_end(i: xcb_render_pictvisual_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_pictdepth_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_pictdepth_visuals(R: *const xcb_render_pictdepth_t)
     -> *mut xcb_render_pictvisual_t;
    pub fn xcb_render_pictdepth_visuals_length(R:
                                                   *const xcb_render_pictdepth_t)
     -> ::libc::c_int;
    pub fn xcb_render_pictdepth_visuals_iterator(R:
                                                     *const xcb_render_pictdepth_t)
     -> xcb_render_pictvisual_iterator_t;
    pub fn xcb_render_pictdepth_next(i: *mut xcb_render_pictdepth_iterator_t)
     -> ();
    pub fn xcb_render_pictdepth_end(i: xcb_render_pictdepth_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_pictscreen_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_pictscreen_depths_length(R:
                                                   *const xcb_render_pictscreen_t)
     -> ::libc::c_int;
    pub fn xcb_render_pictscreen_depths_iterator(R:
                                                     *const xcb_render_pictscreen_t)
     -> xcb_render_pictdepth_iterator_t;
    pub fn xcb_render_pictscreen_next(i:
                                          *mut xcb_render_pictscreen_iterator_t)
     -> ();
    pub fn xcb_render_pictscreen_end(i: xcb_render_pictscreen_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_indexvalue_next(i:
                                          *mut xcb_render_indexvalue_iterator_t)
     -> ();
    pub fn xcb_render_indexvalue_end(i: xcb_render_indexvalue_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_color_next(i: *mut xcb_render_color_iterator_t) -> ();
    pub fn xcb_render_color_end(i: xcb_render_color_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_pointfix_next(i: *mut xcb_render_pointfix_iterator_t)
     -> ();
    pub fn xcb_render_pointfix_end(i: xcb_render_pointfix_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_linefix_next(i: *mut xcb_render_linefix_iterator_t)
     -> ();
    pub fn xcb_render_linefix_end(i: xcb_render_linefix_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_triangle_next(i: *mut xcb_render_triangle_iterator_t)
     -> ();
    pub fn xcb_render_triangle_end(i: xcb_render_triangle_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_trapezoid_next(i: *mut xcb_render_trapezoid_iterator_t)
     -> ();
    pub fn xcb_render_trapezoid_end(i: xcb_render_trapezoid_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_glyphinfo_next(i: *mut xcb_render_glyphinfo_iterator_t)
     -> ();
    pub fn xcb_render_glyphinfo_end(i: xcb_render_glyphinfo_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_query_version(c: *mut xcb_connection_t,
                                    client_major_version: uint32_t,
                                    client_minor_version: uint32_t)
     -> xcb_render_query_version_cookie_t;
    pub fn xcb_render_query_version_unchecked(c: *mut xcb_connection_t,
                                              client_major_version: uint32_t,
                                              client_minor_version: uint32_t)
     -> xcb_render_query_version_cookie_t;
    pub fn xcb_render_query_version_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_render_query_version_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_render_query_version_reply_t;
    pub fn xcb_render_query_pict_formats_sizeof(_buffer:
                                                    *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_query_pict_formats(c: *mut xcb_connection_t)
     -> xcb_render_query_pict_formats_cookie_t;
    pub fn xcb_render_query_pict_formats_unchecked(c: *mut xcb_connection_t)
     -> xcb_render_query_pict_formats_cookie_t;
    pub fn xcb_render_query_pict_formats_formats(R:
                                                     *const xcb_render_query_pict_formats_reply_t)
     -> *mut xcb_render_pictforminfo_t;
    pub fn xcb_render_query_pict_formats_formats_length(R:
                                                            *const xcb_render_query_pict_formats_reply_t)
     -> ::libc::c_int;
    pub fn xcb_render_query_pict_formats_formats_iterator(R:
                                                              *const xcb_render_query_pict_formats_reply_t)
     -> xcb_render_pictforminfo_iterator_t;
    pub fn xcb_render_query_pict_formats_screens_length(R:
                                                            *const xcb_render_query_pict_formats_reply_t)
     -> ::libc::c_int;
    pub fn xcb_render_query_pict_formats_screens_iterator(R:
                                                              *const xcb_render_query_pict_formats_reply_t)
     -> xcb_render_pictscreen_iterator_t;
    pub fn xcb_render_query_pict_formats_subpixels(R:
                                                       *const xcb_render_query_pict_formats_reply_t)
     -> *mut uint32_t;
    pub fn xcb_render_query_pict_formats_subpixels_length(R:
                                                              *const xcb_render_query_pict_formats_reply_t)
     -> ::libc::c_int;
    pub fn xcb_render_query_pict_formats_subpixels_end(R:
                                                           *const xcb_render_query_pict_formats_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_query_pict_formats_reply(c: *mut xcb_connection_t,
                                               cookie:
                                                   xcb_render_query_pict_formats_cookie_t,
                                               e:
                                                   *mut *mut xcb_generic_error_t)
     -> *mut xcb_render_query_pict_formats_reply_t;
    pub fn xcb_render_query_pict_index_values_sizeof(_buffer:
                                                         *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_query_pict_index_values(c: *mut xcb_connection_t,
                                              format: xcb_render_pictformat_t)
     -> xcb_render_query_pict_index_values_cookie_t;
    pub fn xcb_render_query_pict_index_values_unchecked(c:
                                                            *mut xcb_connection_t,
                                                        format:
                                                            xcb_render_pictformat_t)
     -> xcb_render_query_pict_index_values_cookie_t;
    pub fn xcb_render_query_pict_index_values_values(R:
                                                         *const xcb_render_query_pict_index_values_reply_t)
     -> *mut xcb_render_indexvalue_t;
    pub fn xcb_render_query_pict_index_values_values_length(R:
                                                                *const xcb_render_query_pict_index_values_reply_t)
     -> ::libc::c_int;
    pub fn xcb_render_query_pict_index_values_values_iterator(R:
                                                                  *const xcb_render_query_pict_index_values_reply_t)
     -> xcb_render_indexvalue_iterator_t;
    pub fn xcb_render_query_pict_index_values_reply(c: *mut xcb_connection_t,
                                                    cookie:
                                                        xcb_render_query_pict_index_values_cookie_t,
                                                    e:
                                                        *mut *mut xcb_generic_error_t)
     -> *mut xcb_render_query_pict_index_values_reply_t;
    pub fn xcb_render_create_picture_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_create_picture_checked(c: *mut xcb_connection_t,
                                             pid: xcb_render_picture_t,
                                             drawable: xcb_drawable_t,
                                             format: xcb_render_pictformat_t,
                                             value_mask: uint32_t,
                                             value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_picture(c: *mut xcb_connection_t,
                                     pid: xcb_render_picture_t,
                                     drawable: xcb_drawable_t,
                                     format: xcb_render_pictformat_t,
                                     value_mask: uint32_t,
                                     value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_change_picture_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_change_picture_checked(c: *mut xcb_connection_t,
                                             picture: xcb_render_picture_t,
                                             value_mask: uint32_t,
                                             value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_change_picture(c: *mut xcb_connection_t,
                                     picture: xcb_render_picture_t,
                                     value_mask: uint32_t,
                                     value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_set_picture_clip_rectangles_sizeof(_buffer:
                                                             *const ::libc::c_void,
                                                         rectangles_len:
                                                             uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_set_picture_clip_rectangles_checked(c:
                                                              *mut xcb_connection_t,
                                                          picture:
                                                              xcb_render_picture_t,
                                                          clip_x_origin:
                                                              int16_t,
                                                          clip_y_origin:
                                                              int16_t,
                                                          rectangles_len:
                                                              uint32_t,
                                                          rectangles:
                                                              *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_set_picture_clip_rectangles(c: *mut xcb_connection_t,
                                                  picture:
                                                      xcb_render_picture_t,
                                                  clip_x_origin: int16_t,
                                                  clip_y_origin: int16_t,
                                                  rectangles_len: uint32_t,
                                                  rectangles:
                                                      *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_free_picture_checked(c: *mut xcb_connection_t,
                                           picture: xcb_render_picture_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_free_picture(c: *mut xcb_connection_t,
                                   picture: xcb_render_picture_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_composite_checked(c: *mut xcb_connection_t, op: uint8_t,
                                        src: xcb_render_picture_t,
                                        mask: xcb_render_picture_t,
                                        dst: xcb_render_picture_t,
                                        src_x: int16_t, src_y: int16_t,
                                        mask_x: int16_t, mask_y: int16_t,
                                        dst_x: int16_t, dst_y: int16_t,
                                        width: uint16_t, height: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_composite(c: *mut xcb_connection_t, op: uint8_t,
                                src: xcb_render_picture_t,
                                mask: xcb_render_picture_t,
                                dst: xcb_render_picture_t, src_x: int16_t,
                                src_y: int16_t, mask_x: int16_t,
                                mask_y: int16_t, dst_x: int16_t,
                                dst_y: int16_t, width: uint16_t,
                                height: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_render_trapezoids_sizeof(_buffer: *const ::libc::c_void,
                                        traps_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_render_trapezoids_checked(c: *mut xcb_connection_t,
                                         op: uint8_t,
                                         src: xcb_render_picture_t,
                                         dst: xcb_render_picture_t,
                                         mask_format: xcb_render_pictformat_t,
                                         src_x: int16_t, src_y: int16_t,
                                         traps_len: uint32_t,
                                         traps: *const xcb_render_trapezoid_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_trapezoids(c: *mut xcb_connection_t, op: uint8_t,
                                 src: xcb_render_picture_t,
                                 dst: xcb_render_picture_t,
                                 mask_format: xcb_render_pictformat_t,
                                 src_x: int16_t, src_y: int16_t,
                                 traps_len: uint32_t,
                                 traps: *const xcb_render_trapezoid_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_triangles_sizeof(_buffer: *const ::libc::c_void,
                                       triangles_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_triangles_checked(c: *mut xcb_connection_t, op: uint8_t,
                                        src: xcb_render_picture_t,
                                        dst: xcb_render_picture_t,
                                        mask_format: xcb_render_pictformat_t,
                                        src_x: int16_t, src_y: int16_t,
                                        triangles_len: uint32_t,
                                        triangles:
                                            *const xcb_render_triangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_triangles(c: *mut xcb_connection_t, op: uint8_t,
                                src: xcb_render_picture_t,
                                dst: xcb_render_picture_t,
                                mask_format: xcb_render_pictformat_t,
                                src_x: int16_t, src_y: int16_t,
                                triangles_len: uint32_t,
                                triangles: *const xcb_render_triangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_tri_strip_sizeof(_buffer: *const ::libc::c_void,
                                       points_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_render_tri_strip_checked(c: *mut xcb_connection_t, op: uint8_t,
                                        src: xcb_render_picture_t,
                                        dst: xcb_render_picture_t,
                                        mask_format: xcb_render_pictformat_t,
                                        src_x: int16_t, src_y: int16_t,
                                        points_len: uint32_t,
                                        points: *const xcb_render_pointfix_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_tri_strip(c: *mut xcb_connection_t, op: uint8_t,
                                src: xcb_render_picture_t,
                                dst: xcb_render_picture_t,
                                mask_format: xcb_render_pictformat_t,
                                src_x: int16_t, src_y: int16_t,
                                points_len: uint32_t,
                                points: *const xcb_render_pointfix_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_tri_fan_sizeof(_buffer: *const ::libc::c_void,
                                     points_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_render_tri_fan_checked(c: *mut xcb_connection_t, op: uint8_t,
                                      src: xcb_render_picture_t,
                                      dst: xcb_render_picture_t,
                                      mask_format: xcb_render_pictformat_t,
                                      src_x: int16_t, src_y: int16_t,
                                      points_len: uint32_t,
                                      points: *const xcb_render_pointfix_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_tri_fan(c: *mut xcb_connection_t, op: uint8_t,
                              src: xcb_render_picture_t,
                              dst: xcb_render_picture_t,
                              mask_format: xcb_render_pictformat_t,
                              src_x: int16_t, src_y: int16_t,
                              points_len: uint32_t,
                              points: *const xcb_render_pointfix_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_glyph_set_checked(c: *mut xcb_connection_t,
                                               gsid: xcb_render_glyphset_t,
                                               format:
                                                   xcb_render_pictformat_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_glyph_set(c: *mut xcb_connection_t,
                                       gsid: xcb_render_glyphset_t,
                                       format: xcb_render_pictformat_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_reference_glyph_set_checked(c: *mut xcb_connection_t,
                                                  gsid: xcb_render_glyphset_t,
                                                  existing:
                                                      xcb_render_glyphset_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_reference_glyph_set(c: *mut xcb_connection_t,
                                          gsid: xcb_render_glyphset_t,
                                          existing: xcb_render_glyphset_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_free_glyph_set_checked(c: *mut xcb_connection_t,
                                             glyphset: xcb_render_glyphset_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_free_glyph_set(c: *mut xcb_connection_t,
                                     glyphset: xcb_render_glyphset_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_add_glyphs_sizeof(_buffer: *const ::libc::c_void,
                                        data_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_render_add_glyphs_checked(c: *mut xcb_connection_t,
                                         glyphset: xcb_render_glyphset_t,
                                         glyphs_len: uint32_t,
                                         glyphids: *const uint32_t,
                                         glyphs:
                                             *const xcb_render_glyphinfo_t,
                                         data_len: uint32_t,
                                         data: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_add_glyphs(c: *mut xcb_connection_t,
                                 glyphset: xcb_render_glyphset_t,
                                 glyphs_len: uint32_t,
                                 glyphids: *const uint32_t,
                                 glyphs: *const xcb_render_glyphinfo_t,
                                 data_len: uint32_t, data: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_free_glyphs_sizeof(_buffer: *const ::libc::c_void,
                                         glyphs_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_free_glyphs_checked(c: *mut xcb_connection_t,
                                          glyphset: xcb_render_glyphset_t,
                                          glyphs_len: uint32_t,
                                          glyphs: *const xcb_render_glyph_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_free_glyphs(c: *mut xcb_connection_t,
                                  glyphset: xcb_render_glyphset_t,
                                  glyphs_len: uint32_t,
                                  glyphs: *const xcb_render_glyph_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_composite_glyphs_8_sizeof(_buffer:
                                                    *const ::libc::c_void,
                                                glyphcmds_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_composite_glyphs_8_checked(c: *mut xcb_connection_t,
                                                 op: uint8_t,
                                                 src: xcb_render_picture_t,
                                                 dst: xcb_render_picture_t,
                                                 mask_format:
                                                     xcb_render_pictformat_t,
                                                 glyphset:
                                                     xcb_render_glyphset_t,
                                                 src_x: int16_t,
                                                 src_y: int16_t,
                                                 glyphcmds_len: uint32_t,
                                                 glyphcmds: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_composite_glyphs_8(c: *mut xcb_connection_t,
                                         op: uint8_t,
                                         src: xcb_render_picture_t,
                                         dst: xcb_render_picture_t,
                                         mask_format: xcb_render_pictformat_t,
                                         glyphset: xcb_render_glyphset_t,
                                         src_x: int16_t, src_y: int16_t,
                                         glyphcmds_len: uint32_t,
                                         glyphcmds: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_composite_glyphs_16_sizeof(_buffer:
                                                     *const ::libc::c_void,
                                                 glyphcmds_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_composite_glyphs_16_checked(c: *mut xcb_connection_t,
                                                  op: uint8_t,
                                                  src: xcb_render_picture_t,
                                                  dst: xcb_render_picture_t,
                                                  mask_format:
                                                      xcb_render_pictformat_t,
                                                  glyphset:
                                                      xcb_render_glyphset_t,
                                                  src_x: int16_t,
                                                  src_y: int16_t,
                                                  glyphcmds_len: uint32_t,
                                                  glyphcmds: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_composite_glyphs_16(c: *mut xcb_connection_t,
                                          op: uint8_t,
                                          src: xcb_render_picture_t,
                                          dst: xcb_render_picture_t,
                                          mask_format:
                                              xcb_render_pictformat_t,
                                          glyphset: xcb_render_glyphset_t,
                                          src_x: int16_t, src_y: int16_t,
                                          glyphcmds_len: uint32_t,
                                          glyphcmds: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_composite_glyphs_32_sizeof(_buffer:
                                                     *const ::libc::c_void,
                                                 glyphcmds_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_composite_glyphs_32_checked(c: *mut xcb_connection_t,
                                                  op: uint8_t,
                                                  src: xcb_render_picture_t,
                                                  dst: xcb_render_picture_t,
                                                  mask_format:
                                                      xcb_render_pictformat_t,
                                                  glyphset:
                                                      xcb_render_glyphset_t,
                                                  src_x: int16_t,
                                                  src_y: int16_t,
                                                  glyphcmds_len: uint32_t,
                                                  glyphcmds: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_composite_glyphs_32(c: *mut xcb_connection_t,
                                          op: uint8_t,
                                          src: xcb_render_picture_t,
                                          dst: xcb_render_picture_t,
                                          mask_format:
                                              xcb_render_pictformat_t,
                                          glyphset: xcb_render_glyphset_t,
                                          src_x: int16_t, src_y: int16_t,
                                          glyphcmds_len: uint32_t,
                                          glyphcmds: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_fill_rectangles_sizeof(_buffer: *const ::libc::c_void,
                                             rects_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_fill_rectangles_checked(c: *mut xcb_connection_t,
                                              op: uint8_t,
                                              dst: xcb_render_picture_t,
                                              color: xcb_render_color_t,
                                              rects_len: uint32_t,
                                              rects: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_fill_rectangles(c: *mut xcb_connection_t, op: uint8_t,
                                      dst: xcb_render_picture_t,
                                      color: xcb_render_color_t,
                                      rects_len: uint32_t,
                                      rects: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_cursor_checked(c: *mut xcb_connection_t,
                                            cid: xcb_cursor_t,
                                            source: xcb_render_picture_t,
                                            x: uint16_t, y: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_cursor(c: *mut xcb_connection_t,
                                    cid: xcb_cursor_t,
                                    source: xcb_render_picture_t, x: uint16_t,
                                    y: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_render_transform_next(i: *mut xcb_render_transform_iterator_t)
     -> ();
    pub fn xcb_render_transform_end(i: xcb_render_transform_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_set_picture_transform_checked(c: *mut xcb_connection_t,
                                                    picture:
                                                        xcb_render_picture_t,
                                                    transform:
                                                        xcb_render_transform_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_set_picture_transform(c: *mut xcb_connection_t,
                                            picture: xcb_render_picture_t,
                                            transform: xcb_render_transform_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_query_filters_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_query_filters(c: *mut xcb_connection_t,
                                    drawable: xcb_drawable_t)
     -> xcb_render_query_filters_cookie_t;
    pub fn xcb_render_query_filters_unchecked(c: *mut xcb_connection_t,
                                              drawable: xcb_drawable_t)
     -> xcb_render_query_filters_cookie_t;
    pub fn xcb_render_query_filters_aliases(R:
                                                *const xcb_render_query_filters_reply_t)
     -> *mut uint16_t;
    pub fn xcb_render_query_filters_aliases_length(R:
                                                       *const xcb_render_query_filters_reply_t)
     -> ::libc::c_int;
    pub fn xcb_render_query_filters_aliases_end(R:
                                                    *const xcb_render_query_filters_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_query_filters_filters_length(R:
                                                       *const xcb_render_query_filters_reply_t)
     -> ::libc::c_int;
    pub fn xcb_render_query_filters_filters_iterator(R:
                                                         *const xcb_render_query_filters_reply_t)
     -> xcb_str_iterator_t;
    pub fn xcb_render_query_filters_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_render_query_filters_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_render_query_filters_reply_t;
    pub fn xcb_render_set_picture_filter_sizeof(_buffer:
                                                    *const ::libc::c_void,
                                                values_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_set_picture_filter_checked(c: *mut xcb_connection_t,
                                                 picture:
                                                     xcb_render_picture_t,
                                                 filter_len: uint16_t,
                                                 filter:
                                                     *const ::libc::c_char,
                                                 values_len: uint32_t,
                                                 values:
                                                     *const xcb_render_fixed_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_set_picture_filter(c: *mut xcb_connection_t,
                                         picture: xcb_render_picture_t,
                                         filter_len: uint16_t,
                                         filter: *const ::libc::c_char,
                                         values_len: uint32_t,
                                         values: *const xcb_render_fixed_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_animcursorelt_next(i:
                                             *mut xcb_render_animcursorelt_iterator_t)
     -> ();
    pub fn xcb_render_animcursorelt_end(i:
                                            xcb_render_animcursorelt_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_create_anim_cursor_sizeof(_buffer:
                                                    *const ::libc::c_void,
                                                cursors_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_render_create_anim_cursor_checked(c: *mut xcb_connection_t,
                                                 cid: xcb_cursor_t,
                                                 cursors_len: uint32_t,
                                                 cursors:
                                                     *const xcb_render_animcursorelt_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_anim_cursor(c: *mut xcb_connection_t,
                                         cid: xcb_cursor_t,
                                         cursors_len: uint32_t,
                                         cursors:
                                             *const xcb_render_animcursorelt_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_spanfix_next(i: *mut xcb_render_spanfix_iterator_t)
     -> ();
    pub fn xcb_render_spanfix_end(i: xcb_render_spanfix_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_trap_next(i: *mut xcb_render_trap_iterator_t) -> ();
    pub fn xcb_render_trap_end(i: xcb_render_trap_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_render_add_traps_sizeof(_buffer: *const ::libc::c_void,
                                       traps_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_render_add_traps_checked(c: *mut xcb_connection_t,
                                        picture: xcb_render_picture_t,
                                        x_off: int16_t, y_off: int16_t,
                                        traps_len: uint32_t,
                                        traps: *const xcb_render_trap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_add_traps(c: *mut xcb_connection_t,
                                picture: xcb_render_picture_t, x_off: int16_t,
                                y_off: int16_t, traps_len: uint32_t,
                                traps: *const xcb_render_trap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_solid_fill_checked(c: *mut xcb_connection_t,
                                                picture: xcb_render_picture_t,
                                                color: xcb_render_color_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_solid_fill(c: *mut xcb_connection_t,
                                        picture: xcb_render_picture_t,
                                        color: xcb_render_color_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_linear_gradient_sizeof(_buffer:
                                                        *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_create_linear_gradient_checked(c: *mut xcb_connection_t,
                                                     picture:
                                                         xcb_render_picture_t,
                                                     p1:
                                                         xcb_render_pointfix_t,
                                                     p2:
                                                         xcb_render_pointfix_t,
                                                     num_stops: uint32_t,
                                                     stops:
                                                         *const xcb_render_fixed_t,
                                                     colors:
                                                         *const xcb_render_color_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_linear_gradient(c: *mut xcb_connection_t,
                                             picture: xcb_render_picture_t,
                                             p1: xcb_render_pointfix_t,
                                             p2: xcb_render_pointfix_t,
                                             num_stops: uint32_t,
                                             stops: *const xcb_render_fixed_t,
                                             colors:
                                                 *const xcb_render_color_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_radial_gradient_sizeof(_buffer:
                                                        *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_create_radial_gradient_checked(c: *mut xcb_connection_t,
                                                     picture:
                                                         xcb_render_picture_t,
                                                     inner:
                                                         xcb_render_pointfix_t,
                                                     outer:
                                                         xcb_render_pointfix_t,
                                                     inner_radius:
                                                         xcb_render_fixed_t,
                                                     outer_radius:
                                                         xcb_render_fixed_t,
                                                     num_stops: uint32_t,
                                                     stops:
                                                         *const xcb_render_fixed_t,
                                                     colors:
                                                         *const xcb_render_color_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_radial_gradient(c: *mut xcb_connection_t,
                                             picture: xcb_render_picture_t,
                                             inner: xcb_render_pointfix_t,
                                             outer: xcb_render_pointfix_t,
                                             inner_radius: xcb_render_fixed_t,
                                             outer_radius: xcb_render_fixed_t,
                                             num_stops: uint32_t,
                                             stops: *const xcb_render_fixed_t,
                                             colors:
                                                 *const xcb_render_color_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_conical_gradient_sizeof(_buffer:
                                                         *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_render_create_conical_gradient_checked(c:
                                                          *mut xcb_connection_t,
                                                      picture:
                                                          xcb_render_picture_t,
                                                      center:
                                                          xcb_render_pointfix_t,
                                                      angle:
                                                          xcb_render_fixed_t,
                                                      num_stops: uint32_t,
                                                      stops:
                                                          *const xcb_render_fixed_t,
                                                      colors:
                                                          *const xcb_render_color_t)
     -> xcb_void_cookie_t;
    pub fn xcb_render_create_conical_gradient(c: *mut xcb_connection_t,
                                              picture: xcb_render_picture_t,
                                              center: xcb_render_pointfix_t,
                                              angle: xcb_render_fixed_t,
                                              num_stops: uint32_t,
                                              stops:
                                                  *const xcb_render_fixed_t,
                                              colors:
                                                  *const xcb_render_color_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_mode_next(i: *mut xcb_randr_mode_iterator_t) -> ();
    pub fn xcb_randr_mode_end(i: xcb_randr_mode_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_crtc_next(i: *mut xcb_randr_crtc_iterator_t) -> ();
    pub fn xcb_randr_crtc_end(i: xcb_randr_crtc_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_output_next(i: *mut xcb_randr_output_iterator_t) -> ();
    pub fn xcb_randr_output_end(i: xcb_randr_output_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_provider_next(i: *mut xcb_randr_provider_iterator_t)
     -> ();
    pub fn xcb_randr_provider_end(i: xcb_randr_provider_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_screen_size_next(i:
                                          *mut xcb_randr_screen_size_iterator_t)
     -> ();
    pub fn xcb_randr_screen_size_end(i: xcb_randr_screen_size_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_refresh_rates_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_refresh_rates_rates(R: *const xcb_randr_refresh_rates_t)
     -> *mut uint16_t;
    pub fn xcb_randr_refresh_rates_rates_length(R:
                                                    *const xcb_randr_refresh_rates_t)
     -> ::libc::c_int;
    pub fn xcb_randr_refresh_rates_rates_end(R:
                                                 *const xcb_randr_refresh_rates_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_refresh_rates_next(i:
                                            *mut xcb_randr_refresh_rates_iterator_t)
     -> ();
    pub fn xcb_randr_refresh_rates_end(i: xcb_randr_refresh_rates_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_query_version(c: *mut xcb_connection_t,
                                   major_version: uint32_t,
                                   minor_version: uint32_t)
     -> xcb_randr_query_version_cookie_t;
    pub fn xcb_randr_query_version_unchecked(c: *mut xcb_connection_t,
                                             major_version: uint32_t,
                                             minor_version: uint32_t)
     -> xcb_randr_query_version_cookie_t;
    pub fn xcb_randr_query_version_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_randr_query_version_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_query_version_reply_t;
    pub fn xcb_randr_set_screen_config(c: *mut xcb_connection_t,
                                       window: xcb_window_t,
                                       timestamp: xcb_timestamp_t,
                                       config_timestamp: xcb_timestamp_t,
                                       sizeID: uint16_t, rotation: uint16_t,
                                       rate: uint16_t)
     -> xcb_randr_set_screen_config_cookie_t;
    pub fn xcb_randr_set_screen_config_unchecked(c: *mut xcb_connection_t,
                                                 window: xcb_window_t,
                                                 timestamp: xcb_timestamp_t,
                                                 config_timestamp:
                                                     xcb_timestamp_t,
                                                 sizeID: uint16_t,
                                                 rotation: uint16_t,
                                                 rate: uint16_t)
     -> xcb_randr_set_screen_config_cookie_t;
    pub fn xcb_randr_set_screen_config_reply(c: *mut xcb_connection_t,
                                             cookie:
                                                 xcb_randr_set_screen_config_cookie_t,
                                             e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_set_screen_config_reply_t;
    pub fn xcb_randr_select_input_checked(c: *mut xcb_connection_t,
                                          window: xcb_window_t,
                                          enable: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_select_input(c: *mut xcb_connection_t,
                                  window: xcb_window_t, enable: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_get_screen_info_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_info(c: *mut xcb_connection_t,
                                     window: xcb_window_t)
     -> xcb_randr_get_screen_info_cookie_t;
    pub fn xcb_randr_get_screen_info_unchecked(c: *mut xcb_connection_t,
                                               window: xcb_window_t)
     -> xcb_randr_get_screen_info_cookie_t;
    pub fn xcb_randr_get_screen_info_sizes(R:
                                               *const xcb_randr_get_screen_info_reply_t)
     -> *mut xcb_randr_screen_size_t;
    pub fn xcb_randr_get_screen_info_sizes_length(R:
                                                      *const xcb_randr_get_screen_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_info_sizes_iterator(R:
                                                        *const xcb_randr_get_screen_info_reply_t)
     -> xcb_randr_screen_size_iterator_t;
    pub fn xcb_randr_get_screen_info_rates_length(R:
                                                      *const xcb_randr_get_screen_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_info_rates_iterator(R:
                                                        *const xcb_randr_get_screen_info_reply_t)
     -> xcb_randr_refresh_rates_iterator_t;
    pub fn xcb_randr_get_screen_info_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_randr_get_screen_info_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_screen_info_reply_t;
    pub fn xcb_randr_get_screen_size_range(c: *mut xcb_connection_t,
                                           window: xcb_window_t)
     -> xcb_randr_get_screen_size_range_cookie_t;
    pub fn xcb_randr_get_screen_size_range_unchecked(c: *mut xcb_connection_t,
                                                     window: xcb_window_t)
     -> xcb_randr_get_screen_size_range_cookie_t;
    pub fn xcb_randr_get_screen_size_range_reply(c: *mut xcb_connection_t,
                                                 cookie:
                                                     xcb_randr_get_screen_size_range_cookie_t,
                                                 e:
                                                     *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_screen_size_range_reply_t;
    pub fn xcb_randr_set_screen_size_checked(c: *mut xcb_connection_t,
                                             window: xcb_window_t,
                                             width: uint16_t,
                                             height: uint16_t,
                                             mm_width: uint32_t,
                                             mm_height: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_set_screen_size(c: *mut xcb_connection_t,
                                     window: xcb_window_t, width: uint16_t,
                                     height: uint16_t, mm_width: uint32_t,
                                     mm_height: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_mode_info_next(i: *mut xcb_randr_mode_info_iterator_t)
     -> ();
    pub fn xcb_randr_mode_info_end(i: xcb_randr_mode_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_screen_resources_sizeof(_buffer:
                                                     *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources(c: *mut xcb_connection_t,
                                          window: xcb_window_t)
     -> xcb_randr_get_screen_resources_cookie_t;
    pub fn xcb_randr_get_screen_resources_unchecked(c: *mut xcb_connection_t,
                                                    window: xcb_window_t)
     -> xcb_randr_get_screen_resources_cookie_t;
    pub fn xcb_randr_get_screen_resources_crtcs(R:
                                                    *const xcb_randr_get_screen_resources_reply_t)
     -> *mut xcb_randr_crtc_t;
    pub fn xcb_randr_get_screen_resources_crtcs_length(R:
                                                           *const xcb_randr_get_screen_resources_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_crtcs_end(R:
                                                        *const xcb_randr_get_screen_resources_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_screen_resources_outputs(R:
                                                      *const xcb_randr_get_screen_resources_reply_t)
     -> *mut xcb_randr_output_t;
    pub fn xcb_randr_get_screen_resources_outputs_length(R:
                                                             *const xcb_randr_get_screen_resources_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_outputs_end(R:
                                                          *const xcb_randr_get_screen_resources_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_screen_resources_modes(R:
                                                    *const xcb_randr_get_screen_resources_reply_t)
     -> *mut xcb_randr_mode_info_t;
    pub fn xcb_randr_get_screen_resources_modes_length(R:
                                                           *const xcb_randr_get_screen_resources_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_modes_iterator(R:
                                                             *const xcb_randr_get_screen_resources_reply_t)
     -> xcb_randr_mode_info_iterator_t;
    pub fn xcb_randr_get_screen_resources_names(R:
                                                    *const xcb_randr_get_screen_resources_reply_t)
     -> *mut uint8_t;
    pub fn xcb_randr_get_screen_resources_names_length(R:
                                                           *const xcb_randr_get_screen_resources_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_names_end(R:
                                                        *const xcb_randr_get_screen_resources_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_screen_resources_reply(c: *mut xcb_connection_t,
                                                cookie:
                                                    xcb_randr_get_screen_resources_cookie_t,
                                                e:
                                                    *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_screen_resources_reply_t;
    pub fn xcb_randr_get_output_info_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_output_info(c: *mut xcb_connection_t,
                                     output: xcb_randr_output_t,
                                     config_timestamp: xcb_timestamp_t)
     -> xcb_randr_get_output_info_cookie_t;
    pub fn xcb_randr_get_output_info_unchecked(c: *mut xcb_connection_t,
                                               output: xcb_randr_output_t,
                                               config_timestamp:
                                                   xcb_timestamp_t)
     -> xcb_randr_get_output_info_cookie_t;
    pub fn xcb_randr_get_output_info_crtcs(R:
                                               *const xcb_randr_get_output_info_reply_t)
     -> *mut xcb_randr_crtc_t;
    pub fn xcb_randr_get_output_info_crtcs_length(R:
                                                      *const xcb_randr_get_output_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_output_info_crtcs_end(R:
                                                   *const xcb_randr_get_output_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_output_info_modes(R:
                                               *const xcb_randr_get_output_info_reply_t)
     -> *mut xcb_randr_mode_t;
    pub fn xcb_randr_get_output_info_modes_length(R:
                                                      *const xcb_randr_get_output_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_output_info_modes_end(R:
                                                   *const xcb_randr_get_output_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_output_info_clones(R:
                                                *const xcb_randr_get_output_info_reply_t)
     -> *mut xcb_randr_output_t;
    pub fn xcb_randr_get_output_info_clones_length(R:
                                                       *const xcb_randr_get_output_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_output_info_clones_end(R:
                                                    *const xcb_randr_get_output_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_output_info_name(R:
                                              *const xcb_randr_get_output_info_reply_t)
     -> *mut uint8_t;
    pub fn xcb_randr_get_output_info_name_length(R:
                                                     *const xcb_randr_get_output_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_output_info_name_end(R:
                                                  *const xcb_randr_get_output_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_output_info_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_randr_get_output_info_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_output_info_reply_t;
    pub fn xcb_randr_list_output_properties_sizeof(_buffer:
                                                       *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_list_output_properties(c: *mut xcb_connection_t,
                                            output: xcb_randr_output_t)
     -> xcb_randr_list_output_properties_cookie_t;
    pub fn xcb_randr_list_output_properties_unchecked(c:
                                                          *mut xcb_connection_t,
                                                      output:
                                                          xcb_randr_output_t)
     -> xcb_randr_list_output_properties_cookie_t;
    pub fn xcb_randr_list_output_properties_atoms(R:
                                                      *const xcb_randr_list_output_properties_reply_t)
     -> *mut xcb_atom_t;
    pub fn xcb_randr_list_output_properties_atoms_length(R:
                                                             *const xcb_randr_list_output_properties_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_list_output_properties_atoms_end(R:
                                                          *const xcb_randr_list_output_properties_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_list_output_properties_reply(c: *mut xcb_connection_t,
                                                  cookie:
                                                      xcb_randr_list_output_properties_cookie_t,
                                                  e:
                                                      *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_list_output_properties_reply_t;
    pub fn xcb_randr_query_output_property_sizeof(_buffer:
                                                      *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_query_output_property(c: *mut xcb_connection_t,
                                           output: xcb_randr_output_t,
                                           property: xcb_atom_t)
     -> xcb_randr_query_output_property_cookie_t;
    pub fn xcb_randr_query_output_property_unchecked(c: *mut xcb_connection_t,
                                                     output:
                                                         xcb_randr_output_t,
                                                     property: xcb_atom_t)
     -> xcb_randr_query_output_property_cookie_t;
    pub fn xcb_randr_query_output_property_valid_values(R:
                                                            *const xcb_randr_query_output_property_reply_t)
     -> *mut int32_t;
    pub fn xcb_randr_query_output_property_valid_values_length(R:
                                                                   *const xcb_randr_query_output_property_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_query_output_property_valid_values_end(R:
                                                                *const xcb_randr_query_output_property_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_query_output_property_reply(c: *mut xcb_connection_t,
                                                 cookie:
                                                     xcb_randr_query_output_property_cookie_t,
                                                 e:
                                                     *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_query_output_property_reply_t;
    pub fn xcb_randr_configure_output_property_sizeof(_buffer:
                                                          *const ::libc::c_void,
                                                      values_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_randr_configure_output_property_checked(c:
                                                           *mut xcb_connection_t,
                                                       output:
                                                           xcb_randr_output_t,
                                                       property: xcb_atom_t,
                                                       pending: uint8_t,
                                                       range: uint8_t,
                                                       values_len: uint32_t,
                                                       values: *const int32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_configure_output_property(c: *mut xcb_connection_t,
                                               output: xcb_randr_output_t,
                                               property: xcb_atom_t,
                                               pending: uint8_t,
                                               range: uint8_t,
                                               values_len: uint32_t,
                                               values: *const int32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_change_output_property_sizeof(_buffer:
                                                       *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_change_output_property_checked(c: *mut xcb_connection_t,
                                                    output:
                                                        xcb_randr_output_t,
                                                    property: xcb_atom_t,
                                                    _type: xcb_atom_t,
                                                    format: uint8_t,
                                                    mode: uint8_t,
                                                    num_units: uint32_t,
                                                    data:
                                                        *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_change_output_property(c: *mut xcb_connection_t,
                                            output: xcb_randr_output_t,
                                            property: xcb_atom_t,
                                            _type: xcb_atom_t,
                                            format: uint8_t, mode: uint8_t,
                                            num_units: uint32_t,
                                            data: *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_delete_output_property_checked(c: *mut xcb_connection_t,
                                                    output:
                                                        xcb_randr_output_t,
                                                    property: xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_delete_output_property(c: *mut xcb_connection_t,
                                            output: xcb_randr_output_t,
                                            property: xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_get_output_property_sizeof(_buffer:
                                                    *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_output_property(c: *mut xcb_connection_t,
                                         output: xcb_randr_output_t,
                                         property: xcb_atom_t,
                                         _type: xcb_atom_t,
                                         long_offset: uint32_t,
                                         long_length: uint32_t,
                                         _delete: uint8_t, pending: uint8_t)
     -> xcb_randr_get_output_property_cookie_t;
    pub fn xcb_randr_get_output_property_unchecked(c: *mut xcb_connection_t,
                                                   output: xcb_randr_output_t,
                                                   property: xcb_atom_t,
                                                   _type: xcb_atom_t,
                                                   long_offset: uint32_t,
                                                   long_length: uint32_t,
                                                   _delete: uint8_t,
                                                   pending: uint8_t)
     -> xcb_randr_get_output_property_cookie_t;
    pub fn xcb_randr_get_output_property_data(R:
                                                  *const xcb_randr_get_output_property_reply_t)
     -> *mut uint8_t;
    pub fn xcb_randr_get_output_property_data_length(R:
                                                         *const xcb_randr_get_output_property_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_output_property_data_end(R:
                                                      *const xcb_randr_get_output_property_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_output_property_reply(c: *mut xcb_connection_t,
                                               cookie:
                                                   xcb_randr_get_output_property_cookie_t,
                                               e:
                                                   *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_output_property_reply_t;
    pub fn xcb_randr_create_mode_sizeof(_buffer: *const ::libc::c_void,
                                        name_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_randr_create_mode(c: *mut xcb_connection_t,
                                 window: xcb_window_t,
                                 mode_info: xcb_randr_mode_info_t,
                                 name_len: uint32_t,
                                 name: *const ::libc::c_char)
     -> xcb_randr_create_mode_cookie_t;
    pub fn xcb_randr_create_mode_unchecked(c: *mut xcb_connection_t,
                                           window: xcb_window_t,
                                           mode_info: xcb_randr_mode_info_t,
                                           name_len: uint32_t,
                                           name: *const ::libc::c_char)
     -> xcb_randr_create_mode_cookie_t;
    pub fn xcb_randr_create_mode_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_randr_create_mode_cookie_t,
                                       e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_create_mode_reply_t;
    pub fn xcb_randr_destroy_mode_checked(c: *mut xcb_connection_t,
                                          mode: xcb_randr_mode_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_destroy_mode(c: *mut xcb_connection_t,
                                  mode: xcb_randr_mode_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_add_output_mode_checked(c: *mut xcb_connection_t,
                                             output: xcb_randr_output_t,
                                             mode: xcb_randr_mode_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_add_output_mode(c: *mut xcb_connection_t,
                                     output: xcb_randr_output_t,
                                     mode: xcb_randr_mode_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_delete_output_mode_checked(c: *mut xcb_connection_t,
                                                output: xcb_randr_output_t,
                                                mode: xcb_randr_mode_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_delete_output_mode(c: *mut xcb_connection_t,
                                        output: xcb_randr_output_t,
                                        mode: xcb_randr_mode_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_get_crtc_info_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_info(c: *mut xcb_connection_t,
                                   crtc: xcb_randr_crtc_t,
                                   config_timestamp: xcb_timestamp_t)
     -> xcb_randr_get_crtc_info_cookie_t;
    pub fn xcb_randr_get_crtc_info_unchecked(c: *mut xcb_connection_t,
                                             crtc: xcb_randr_crtc_t,
                                             config_timestamp:
                                                 xcb_timestamp_t)
     -> xcb_randr_get_crtc_info_cookie_t;
    pub fn xcb_randr_get_crtc_info_outputs(R:
                                               *const xcb_randr_get_crtc_info_reply_t)
     -> *mut xcb_randr_output_t;
    pub fn xcb_randr_get_crtc_info_outputs_length(R:
                                                      *const xcb_randr_get_crtc_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_info_outputs_end(R:
                                                   *const xcb_randr_get_crtc_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_info_possible(R:
                                                *const xcb_randr_get_crtc_info_reply_t)
     -> *mut xcb_randr_output_t;
    pub fn xcb_randr_get_crtc_info_possible_length(R:
                                                       *const xcb_randr_get_crtc_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_info_possible_end(R:
                                                    *const xcb_randr_get_crtc_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_info_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_randr_get_crtc_info_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_crtc_info_reply_t;
    pub fn xcb_randr_set_crtc_config_sizeof(_buffer: *const ::libc::c_void,
                                            outputs_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_randr_set_crtc_config(c: *mut xcb_connection_t,
                                     crtc: xcb_randr_crtc_t,
                                     timestamp: xcb_timestamp_t,
                                     config_timestamp: xcb_timestamp_t,
                                     x: int16_t, y: int16_t,
                                     mode: xcb_randr_mode_t,
                                     rotation: uint16_t,
                                     outputs_len: uint32_t,
                                     outputs: *const xcb_randr_output_t)
     -> xcb_randr_set_crtc_config_cookie_t;
    pub fn xcb_randr_set_crtc_config_unchecked(c: *mut xcb_connection_t,
                                               crtc: xcb_randr_crtc_t,
                                               timestamp: xcb_timestamp_t,
                                               config_timestamp:
                                                   xcb_timestamp_t,
                                               x: int16_t, y: int16_t,
                                               mode: xcb_randr_mode_t,
                                               rotation: uint16_t,
                                               outputs_len: uint32_t,
                                               outputs:
                                                   *const xcb_randr_output_t)
     -> xcb_randr_set_crtc_config_cookie_t;
    pub fn xcb_randr_set_crtc_config_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_randr_set_crtc_config_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_set_crtc_config_reply_t;
    pub fn xcb_randr_get_crtc_gamma_size(c: *mut xcb_connection_t,
                                         crtc: xcb_randr_crtc_t)
     -> xcb_randr_get_crtc_gamma_size_cookie_t;
    pub fn xcb_randr_get_crtc_gamma_size_unchecked(c: *mut xcb_connection_t,
                                                   crtc: xcb_randr_crtc_t)
     -> xcb_randr_get_crtc_gamma_size_cookie_t;
    pub fn xcb_randr_get_crtc_gamma_size_reply(c: *mut xcb_connection_t,
                                               cookie:
                                                   xcb_randr_get_crtc_gamma_size_cookie_t,
                                               e:
                                                   *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_crtc_gamma_size_reply_t;
    pub fn xcb_randr_get_crtc_gamma_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_gamma(c: *mut xcb_connection_t,
                                    crtc: xcb_randr_crtc_t)
     -> xcb_randr_get_crtc_gamma_cookie_t;
    pub fn xcb_randr_get_crtc_gamma_unchecked(c: *mut xcb_connection_t,
                                              crtc: xcb_randr_crtc_t)
     -> xcb_randr_get_crtc_gamma_cookie_t;
    pub fn xcb_randr_get_crtc_gamma_red(R:
                                            *const xcb_randr_get_crtc_gamma_reply_t)
     -> *mut uint16_t;
    pub fn xcb_randr_get_crtc_gamma_red_length(R:
                                                   *const xcb_randr_get_crtc_gamma_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_gamma_red_end(R:
                                                *const xcb_randr_get_crtc_gamma_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_gamma_green(R:
                                              *const xcb_randr_get_crtc_gamma_reply_t)
     -> *mut uint16_t;
    pub fn xcb_randr_get_crtc_gamma_green_length(R:
                                                     *const xcb_randr_get_crtc_gamma_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_gamma_green_end(R:
                                                  *const xcb_randr_get_crtc_gamma_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_gamma_blue(R:
                                             *const xcb_randr_get_crtc_gamma_reply_t)
     -> *mut uint16_t;
    pub fn xcb_randr_get_crtc_gamma_blue_length(R:
                                                    *const xcb_randr_get_crtc_gamma_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_gamma_blue_end(R:
                                                 *const xcb_randr_get_crtc_gamma_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_gamma_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_randr_get_crtc_gamma_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_crtc_gamma_reply_t;
    pub fn xcb_randr_set_crtc_gamma_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_set_crtc_gamma_checked(c: *mut xcb_connection_t,
                                            crtc: xcb_randr_crtc_t,
                                            size: uint16_t,
                                            red: *const uint16_t,
                                            green: *const uint16_t,
                                            blue: *const uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_set_crtc_gamma(c: *mut xcb_connection_t,
                                    crtc: xcb_randr_crtc_t, size: uint16_t,
                                    red: *const uint16_t,
                                    green: *const uint16_t,
                                    blue: *const uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_get_screen_resources_current_sizeof(_buffer:
                                                             *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_current(c: *mut xcb_connection_t,
                                                  window: xcb_window_t)
     -> xcb_randr_get_screen_resources_current_cookie_t;
    pub fn xcb_randr_get_screen_resources_current_unchecked(c:
                                                                *mut xcb_connection_t,
                                                            window:
                                                                xcb_window_t)
     -> xcb_randr_get_screen_resources_current_cookie_t;
    pub fn xcb_randr_get_screen_resources_current_crtcs(R:
                                                            *const xcb_randr_get_screen_resources_current_reply_t)
     -> *mut xcb_randr_crtc_t;
    pub fn xcb_randr_get_screen_resources_current_crtcs_length(R:
                                                                   *const xcb_randr_get_screen_resources_current_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_current_crtcs_end(R:
                                                                *const xcb_randr_get_screen_resources_current_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_screen_resources_current_outputs(R:
                                                              *const xcb_randr_get_screen_resources_current_reply_t)
     -> *mut xcb_randr_output_t;
    pub fn xcb_randr_get_screen_resources_current_outputs_length(R:
                                                                     *const xcb_randr_get_screen_resources_current_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_current_outputs_end(R:
                                                                  *const xcb_randr_get_screen_resources_current_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_screen_resources_current_modes(R:
                                                            *const xcb_randr_get_screen_resources_current_reply_t)
     -> *mut xcb_randr_mode_info_t;
    pub fn xcb_randr_get_screen_resources_current_modes_length(R:
                                                                   *const xcb_randr_get_screen_resources_current_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_current_modes_iterator(R:
                                                                     *const xcb_randr_get_screen_resources_current_reply_t)
     -> xcb_randr_mode_info_iterator_t;
    pub fn xcb_randr_get_screen_resources_current_names(R:
                                                            *const xcb_randr_get_screen_resources_current_reply_t)
     -> *mut uint8_t;
    pub fn xcb_randr_get_screen_resources_current_names_length(R:
                                                                   *const xcb_randr_get_screen_resources_current_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_screen_resources_current_names_end(R:
                                                                *const xcb_randr_get_screen_resources_current_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_screen_resources_current_reply(c:
                                                            *mut xcb_connection_t,
                                                        cookie:
                                                            xcb_randr_get_screen_resources_current_cookie_t,
                                                        e:
                                                            *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_screen_resources_current_reply_t;
    pub fn xcb_randr_set_crtc_transform_sizeof(_buffer: *const ::libc::c_void,
                                               filter_params_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_randr_set_crtc_transform_checked(c: *mut xcb_connection_t,
                                                crtc: xcb_randr_crtc_t,
                                                transform:
                                                    xcb_render_transform_t,
                                                filter_len: uint16_t,
                                                filter_name:
                                                    *const ::libc::c_char,
                                                filter_params_len: uint32_t,
                                                filter_params:
                                                    *const xcb_render_fixed_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_set_crtc_transform(c: *mut xcb_connection_t,
                                        crtc: xcb_randr_crtc_t,
                                        transform: xcb_render_transform_t,
                                        filter_len: uint16_t,
                                        filter_name: *const ::libc::c_char,
                                        filter_params_len: uint32_t,
                                        filter_params:
                                            *const xcb_render_fixed_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_get_crtc_transform_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_transform(c: *mut xcb_connection_t,
                                        crtc: xcb_randr_crtc_t)
     -> xcb_randr_get_crtc_transform_cookie_t;
    pub fn xcb_randr_get_crtc_transform_unchecked(c: *mut xcb_connection_t,
                                                  crtc: xcb_randr_crtc_t)
     -> xcb_randr_get_crtc_transform_cookie_t;
    pub fn xcb_randr_get_crtc_transform_pending_filter_name(R:
                                                                *const xcb_randr_get_crtc_transform_reply_t)
     -> *mut ::libc::c_char;
    pub fn xcb_randr_get_crtc_transform_pending_filter_name_length(R:
                                                                       *const xcb_randr_get_crtc_transform_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_transform_pending_filter_name_end(R:
                                                                    *const xcb_randr_get_crtc_transform_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_transform_pending_params(R:
                                                           *const xcb_randr_get_crtc_transform_reply_t)
     -> *mut xcb_render_fixed_t;
    pub fn xcb_randr_get_crtc_transform_pending_params_length(R:
                                                                  *const xcb_randr_get_crtc_transform_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_transform_pending_params_end(R:
                                                               *const xcb_randr_get_crtc_transform_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_transform_current_filter_name(R:
                                                                *const xcb_randr_get_crtc_transform_reply_t)
     -> *mut ::libc::c_char;
    pub fn xcb_randr_get_crtc_transform_current_filter_name_length(R:
                                                                       *const xcb_randr_get_crtc_transform_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_transform_current_filter_name_end(R:
                                                                    *const xcb_randr_get_crtc_transform_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_transform_current_params(R:
                                                           *const xcb_randr_get_crtc_transform_reply_t)
     -> *mut xcb_render_fixed_t;
    pub fn xcb_randr_get_crtc_transform_current_params_length(R:
                                                                  *const xcb_randr_get_crtc_transform_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_crtc_transform_current_params_end(R:
                                                               *const xcb_randr_get_crtc_transform_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_crtc_transform_reply(c: *mut xcb_connection_t,
                                              cookie:
                                                  xcb_randr_get_crtc_transform_cookie_t,
                                              e:
                                                  *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_crtc_transform_reply_t;
    pub fn xcb_randr_get_panning(c: *mut xcb_connection_t,
                                 crtc: xcb_randr_crtc_t)
     -> xcb_randr_get_panning_cookie_t;
    pub fn xcb_randr_get_panning_unchecked(c: *mut xcb_connection_t,
                                           crtc: xcb_randr_crtc_t)
     -> xcb_randr_get_panning_cookie_t;
    pub fn xcb_randr_get_panning_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_randr_get_panning_cookie_t,
                                       e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_panning_reply_t;
    pub fn xcb_randr_set_panning(c: *mut xcb_connection_t,
                                 crtc: xcb_randr_crtc_t,
                                 timestamp: xcb_timestamp_t, left: uint16_t,
                                 top: uint16_t, width: uint16_t,
                                 height: uint16_t, track_left: uint16_t,
                                 track_top: uint16_t, track_width: uint16_t,
                                 track_height: uint16_t, border_left: int16_t,
                                 border_top: int16_t, border_right: int16_t,
                                 border_bottom: int16_t)
     -> xcb_randr_set_panning_cookie_t;
    pub fn xcb_randr_set_panning_unchecked(c: *mut xcb_connection_t,
                                           crtc: xcb_randr_crtc_t,
                                           timestamp: xcb_timestamp_t,
                                           left: uint16_t, top: uint16_t,
                                           width: uint16_t, height: uint16_t,
                                           track_left: uint16_t,
                                           track_top: uint16_t,
                                           track_width: uint16_t,
                                           track_height: uint16_t,
                                           border_left: int16_t,
                                           border_top: int16_t,
                                           border_right: int16_t,
                                           border_bottom: int16_t)
     -> xcb_randr_set_panning_cookie_t;
    pub fn xcb_randr_set_panning_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_randr_set_panning_cookie_t,
                                       e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_set_panning_reply_t;
    pub fn xcb_randr_set_output_primary_checked(c: *mut xcb_connection_t,
                                                window: xcb_window_t,
                                                output: xcb_randr_output_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_set_output_primary(c: *mut xcb_connection_t,
                                        window: xcb_window_t,
                                        output: xcb_randr_output_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_get_output_primary(c: *mut xcb_connection_t,
                                        window: xcb_window_t)
     -> xcb_randr_get_output_primary_cookie_t;
    pub fn xcb_randr_get_output_primary_unchecked(c: *mut xcb_connection_t,
                                                  window: xcb_window_t)
     -> xcb_randr_get_output_primary_cookie_t;
    pub fn xcb_randr_get_output_primary_reply(c: *mut xcb_connection_t,
                                              cookie:
                                                  xcb_randr_get_output_primary_cookie_t,
                                              e:
                                                  *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_output_primary_reply_t;
    pub fn xcb_randr_get_providers_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_providers(c: *mut xcb_connection_t,
                                   window: xcb_window_t)
     -> xcb_randr_get_providers_cookie_t;
    pub fn xcb_randr_get_providers_unchecked(c: *mut xcb_connection_t,
                                             window: xcb_window_t)
     -> xcb_randr_get_providers_cookie_t;
    pub fn xcb_randr_get_providers_providers(R:
                                                 *const xcb_randr_get_providers_reply_t)
     -> *mut xcb_randr_provider_t;
    pub fn xcb_randr_get_providers_providers_length(R:
                                                        *const xcb_randr_get_providers_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_providers_providers_end(R:
                                                     *const xcb_randr_get_providers_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_providers_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_randr_get_providers_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_providers_reply_t;
    pub fn xcb_randr_get_provider_info_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_provider_info(c: *mut xcb_connection_t,
                                       provider: xcb_randr_provider_t,
                                       config_timestamp: xcb_timestamp_t)
     -> xcb_randr_get_provider_info_cookie_t;
    pub fn xcb_randr_get_provider_info_unchecked(c: *mut xcb_connection_t,
                                                 provider:
                                                     xcb_randr_provider_t,
                                                 config_timestamp:
                                                     xcb_timestamp_t)
     -> xcb_randr_get_provider_info_cookie_t;
    pub fn xcb_randr_get_provider_info_crtcs(R:
                                                 *const xcb_randr_get_provider_info_reply_t)
     -> *mut xcb_randr_crtc_t;
    pub fn xcb_randr_get_provider_info_crtcs_length(R:
                                                        *const xcb_randr_get_provider_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_provider_info_crtcs_end(R:
                                                     *const xcb_randr_get_provider_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_provider_info_outputs(R:
                                                   *const xcb_randr_get_provider_info_reply_t)
     -> *mut xcb_randr_output_t;
    pub fn xcb_randr_get_provider_info_outputs_length(R:
                                                          *const xcb_randr_get_provider_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_provider_info_outputs_end(R:
                                                       *const xcb_randr_get_provider_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_provider_info_associated_providers(R:
                                                                *const xcb_randr_get_provider_info_reply_t)
     -> *mut xcb_randr_provider_t;
    pub fn xcb_randr_get_provider_info_associated_providers_length(R:
                                                                       *const xcb_randr_get_provider_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_provider_info_associated_providers_end(R:
                                                                    *const xcb_randr_get_provider_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_provider_info_associated_capability(R:
                                                                 *const xcb_randr_get_provider_info_reply_t)
     -> *mut uint32_t;
    pub fn xcb_randr_get_provider_info_associated_capability_length(R:
                                                                        *const xcb_randr_get_provider_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_provider_info_associated_capability_end(R:
                                                                     *const xcb_randr_get_provider_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_provider_info_name(R:
                                                *const xcb_randr_get_provider_info_reply_t)
     -> *mut ::libc::c_char;
    pub fn xcb_randr_get_provider_info_name_length(R:
                                                       *const xcb_randr_get_provider_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_provider_info_name_end(R:
                                                    *const xcb_randr_get_provider_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_provider_info_reply(c: *mut xcb_connection_t,
                                             cookie:
                                                 xcb_randr_get_provider_info_cookie_t,
                                             e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_provider_info_reply_t;
    pub fn xcb_randr_set_provider_offload_sink_checked(c:
                                                           *mut xcb_connection_t,
                                                       provider:
                                                           xcb_randr_provider_t,
                                                       sink_provider:
                                                           xcb_randr_provider_t,
                                                       config_timestamp:
                                                           xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_set_provider_offload_sink(c: *mut xcb_connection_t,
                                               provider: xcb_randr_provider_t,
                                               sink_provider:
                                                   xcb_randr_provider_t,
                                               config_timestamp:
                                                   xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_set_provider_output_source_checked(c:
                                                            *mut xcb_connection_t,
                                                        provider:
                                                            xcb_randr_provider_t,
                                                        source_provider:
                                                            xcb_randr_provider_t,
                                                        config_timestamp:
                                                            xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_set_provider_output_source(c: *mut xcb_connection_t,
                                                provider:
                                                    xcb_randr_provider_t,
                                                source_provider:
                                                    xcb_randr_provider_t,
                                                config_timestamp:
                                                    xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_list_provider_properties_sizeof(_buffer:
                                                         *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_list_provider_properties(c: *mut xcb_connection_t,
                                              provider: xcb_randr_provider_t)
     -> xcb_randr_list_provider_properties_cookie_t;
    pub fn xcb_randr_list_provider_properties_unchecked(c:
                                                            *mut xcb_connection_t,
                                                        provider:
                                                            xcb_randr_provider_t)
     -> xcb_randr_list_provider_properties_cookie_t;
    pub fn xcb_randr_list_provider_properties_atoms(R:
                                                        *const xcb_randr_list_provider_properties_reply_t)
     -> *mut xcb_atom_t;
    pub fn xcb_randr_list_provider_properties_atoms_length(R:
                                                               *const xcb_randr_list_provider_properties_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_list_provider_properties_atoms_end(R:
                                                            *const xcb_randr_list_provider_properties_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_list_provider_properties_reply(c: *mut xcb_connection_t,
                                                    cookie:
                                                        xcb_randr_list_provider_properties_cookie_t,
                                                    e:
                                                        *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_list_provider_properties_reply_t;
    pub fn xcb_randr_query_provider_property_sizeof(_buffer:
                                                        *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_query_provider_property(c: *mut xcb_connection_t,
                                             provider: xcb_randr_provider_t,
                                             property: xcb_atom_t)
     -> xcb_randr_query_provider_property_cookie_t;
    pub fn xcb_randr_query_provider_property_unchecked(c:
                                                           *mut xcb_connection_t,
                                                       provider:
                                                           xcb_randr_provider_t,
                                                       property: xcb_atom_t)
     -> xcb_randr_query_provider_property_cookie_t;
    pub fn xcb_randr_query_provider_property_valid_values(R:
                                                              *const xcb_randr_query_provider_property_reply_t)
     -> *mut int32_t;
    pub fn xcb_randr_query_provider_property_valid_values_length(R:
                                                                     *const xcb_randr_query_provider_property_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_query_provider_property_valid_values_end(R:
                                                                  *const xcb_randr_query_provider_property_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_query_provider_property_reply(c: *mut xcb_connection_t,
                                                   cookie:
                                                       xcb_randr_query_provider_property_cookie_t,
                                                   e:
                                                       *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_query_provider_property_reply_t;
    pub fn xcb_randr_configure_provider_property_sizeof(_buffer:
                                                            *const ::libc::c_void,
                                                        values_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_randr_configure_provider_property_checked(c:
                                                             *mut xcb_connection_t,
                                                         provider:
                                                             xcb_randr_provider_t,
                                                         property: xcb_atom_t,
                                                         pending: uint8_t,
                                                         range: uint8_t,
                                                         values_len: uint32_t,
                                                         values:
                                                             *const int32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_configure_provider_property(c: *mut xcb_connection_t,
                                                 provider:
                                                     xcb_randr_provider_t,
                                                 property: xcb_atom_t,
                                                 pending: uint8_t,
                                                 range: uint8_t,
                                                 values_len: uint32_t,
                                                 values: *const int32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_change_provider_property_sizeof(_buffer:
                                                         *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_change_provider_property_checked(c:
                                                          *mut xcb_connection_t,
                                                      provider:
                                                          xcb_randr_provider_t,
                                                      property: xcb_atom_t,
                                                      _type: xcb_atom_t,
                                                      format: uint8_t,
                                                      mode: uint8_t,
                                                      num_items: uint32_t,
                                                      data:
                                                          *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_change_provider_property(c: *mut xcb_connection_t,
                                              provider: xcb_randr_provider_t,
                                              property: xcb_atom_t,
                                              _type: xcb_atom_t,
                                              format: uint8_t, mode: uint8_t,
                                              num_items: uint32_t,
                                              data: *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_delete_provider_property_checked(c:
                                                          *mut xcb_connection_t,
                                                      provider:
                                                          xcb_randr_provider_t,
                                                      property: xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_delete_provider_property(c: *mut xcb_connection_t,
                                              provider: xcb_randr_provider_t,
                                              property: xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_randr_get_provider_property_sizeof(_buffer:
                                                      *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_randr_get_provider_property(c: *mut xcb_connection_t,
                                           provider: xcb_randr_provider_t,
                                           property: xcb_atom_t,
                                           _type: xcb_atom_t,
                                           long_offset: uint32_t,
                                           long_length: uint32_t,
                                           _delete: uint8_t, pending: uint8_t)
     -> xcb_randr_get_provider_property_cookie_t;
    pub fn xcb_randr_get_provider_property_unchecked(c: *mut xcb_connection_t,
                                                     provider:
                                                         xcb_randr_provider_t,
                                                     property: xcb_atom_t,
                                                     _type: xcb_atom_t,
                                                     long_offset: uint32_t,
                                                     long_length: uint32_t,
                                                     _delete: uint8_t,
                                                     pending: uint8_t)
     -> xcb_randr_get_provider_property_cookie_t;
    pub fn xcb_randr_get_provider_property_data(R:
                                                    *const xcb_randr_get_provider_property_reply_t)
     -> *mut ::libc::c_void;
    pub fn xcb_randr_get_provider_property_data_length(R:
                                                           *const xcb_randr_get_provider_property_reply_t)
     -> ::libc::c_int;
    pub fn xcb_randr_get_provider_property_data_end(R:
                                                        *const xcb_randr_get_provider_property_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_get_provider_property_reply(c: *mut xcb_connection_t,
                                                 cookie:
                                                     xcb_randr_get_provider_property_cookie_t,
                                                 e:
                                                     *mut *mut xcb_generic_error_t)
     -> *mut xcb_randr_get_provider_property_reply_t;
    pub fn xcb_randr_crtc_change_next(i:
                                          *mut xcb_randr_crtc_change_iterator_t)
     -> ();
    pub fn xcb_randr_crtc_change_end(i: xcb_randr_crtc_change_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_output_change_next(i:
                                            *mut xcb_randr_output_change_iterator_t)
     -> ();
    pub fn xcb_randr_output_change_end(i: xcb_randr_output_change_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_output_property_next(i:
                                              *mut xcb_randr_output_property_iterator_t)
     -> ();
    pub fn xcb_randr_output_property_end(i:
                                             xcb_randr_output_property_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_provider_change_next(i:
                                              *mut xcb_randr_provider_change_iterator_t)
     -> ();
    pub fn xcb_randr_provider_change_end(i:
                                             xcb_randr_provider_change_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_provider_property_next(i:
                                                *mut xcb_randr_provider_property_iterator_t)
     -> ();
    pub fn xcb_randr_provider_property_end(i:
                                               xcb_randr_provider_property_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_resource_change_next(i:
                                              *mut xcb_randr_resource_change_iterator_t)
     -> ();
    pub fn xcb_randr_resource_change_end(i:
                                             xcb_randr_resource_change_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_randr_notify_data_next(i:
                                          *mut xcb_randr_notify_data_iterator_t)
     -> ();
    pub fn xcb_randr_notify_data_end(i: xcb_randr_notify_data_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_atom_name_by_screen(base: *const ::libc::c_char,
                                   screen: uint8_t) -> *mut ::libc::c_char;
    pub fn xcb_atom_name_by_resource(base: *const ::libc::c_char,
                                     resource: uint32_t)
     -> *mut ::libc::c_char;
    pub fn xcb_atom_name_unique(base: *const ::libc::c_char, id: uint32_t)
     -> *mut ::libc::c_char;
    pub fn xcb_aux_get_depth(c: *mut xcb_connection_t,
                             screen: *mut xcb_screen_t) -> uint8_t;
    pub fn xcb_aux_get_depth_of_visual(screen: *mut xcb_screen_t,
                                       id: xcb_visualid_t) -> uint8_t;
    pub fn xcb_aux_get_screen(c: *mut xcb_connection_t, screen: ::libc::c_int)
     -> *mut xcb_screen_t;
    pub fn xcb_aux_get_visualtype(c: *mut xcb_connection_t,
                                  screen: ::libc::c_int, vid: xcb_visualid_t)
     -> *mut xcb_visualtype_t;
    pub fn xcb_aux_find_visual_by_id(screen: *mut xcb_screen_t,
                                     id: xcb_visualid_t)
     -> *mut xcb_visualtype_t;
    pub fn xcb_aux_find_visual_by_attrs(screen: *mut xcb_screen_t,
                                        class_: int8_t, depth: int8_t)
     -> *mut xcb_visualtype_t;
    pub fn xcb_aux_sync(c: *mut xcb_connection_t) -> ();
    pub fn xcb_aux_create_window(c: *mut xcb_connection_t, depth: uint8_t,
                                 wid: xcb_window_t, parent: xcb_window_t,
                                 x: int16_t, y: int16_t, width: uint16_t,
                                 height: uint16_t, border_width: uint16_t,
                                 class_: uint16_t, visual: xcb_visualid_t,
                                 mask: uint32_t,
                                 params: *const xcb_params_cw_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_create_window_checked(c: *mut xcb_connection_t,
                                         depth: uint8_t, wid: xcb_window_t,
                                         parent: xcb_window_t, x: int16_t,
                                         y: int16_t, width: uint16_t,
                                         height: uint16_t,
                                         border_width: uint16_t,
                                         class_: uint16_t,
                                         visual: xcb_visualid_t,
                                         mask: uint32_t,
                                         params: *const xcb_params_cw_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_change_window_attributes(c: *mut xcb_connection_t,
                                            window: xcb_window_t,
                                            mask: uint32_t,
                                            params: *const xcb_params_cw_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_change_window_attributes_checked(c: *mut xcb_connection_t,
                                                    window: xcb_window_t,
                                                    mask: uint32_t,
                                                    params:
                                                        *const xcb_params_cw_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_configure_window(c: *mut xcb_connection_t,
                                    window: xcb_window_t, mask: uint16_t,
                                    params:
                                        *const xcb_params_configure_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_create_gc(c: *mut xcb_connection_t, cid: xcb_gcontext_t,
                             drawable: xcb_drawable_t, mask: uint32_t,
                             params: *const xcb_params_gc_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_create_gc_checked(c: *mut xcb_connection_t,
                                     gid: xcb_gcontext_t,
                                     drawable: xcb_drawable_t, mask: uint32_t,
                                     params: *const xcb_params_gc_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_change_gc(c: *mut xcb_connection_t, gc: xcb_gcontext_t,
                             mask: uint32_t, params: *const xcb_params_gc_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_change_gc_checked(c: *mut xcb_connection_t,
                                     gc: xcb_gcontext_t, mask: uint32_t,
                                     params: *const xcb_params_gc_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_change_keyboard_control(c: *mut xcb_connection_t,
                                           mask: uint32_t,
                                           params:
                                               *const xcb_params_keyboard_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_parse_color(color_name: *const ::libc::c_char,
                               red: *mut uint16_t, green: *mut uint16_t,
                               blue: *mut uint16_t) -> ::libc::c_int;
    pub fn xcb_aux_set_line_attributes_checked(dpy: *mut xcb_connection_t,
                                               gc: xcb_gcontext_t,
                                               linewidth: uint16_t,
                                               linestyle: int32_t,
                                               capstyle: int32_t,
                                               joinstyle: int32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_aux_clear_window(dpy: *mut xcb_connection_t, w: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_event_get_label(_type: uint8_t) -> *const ::libc::c_char;
    pub fn xcb_event_get_error_label(_type: uint8_t) -> *const ::libc::c_char;
    pub fn xcb_event_get_request_label(_type: uint8_t)
     -> *const ::libc::c_char;
    pub fn xcb_shape_op_next(i: *mut xcb_shape_op_iterator_t) -> ();
    pub fn xcb_shape_op_end(i: xcb_shape_op_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_shape_kind_next(i: *mut xcb_shape_kind_iterator_t) -> ();
    pub fn xcb_shape_kind_end(i: xcb_shape_kind_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_shape_query_version(c: *mut xcb_connection_t)
     -> xcb_shape_query_version_cookie_t;
    pub fn xcb_shape_query_version_unchecked(c: *mut xcb_connection_t)
     -> xcb_shape_query_version_cookie_t;
    pub fn xcb_shape_query_version_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_shape_query_version_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_shape_query_version_reply_t;
    pub fn xcb_shape_rectangles_sizeof(_buffer: *const ::libc::c_void,
                                       rectangles_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_shape_rectangles_checked(c: *mut xcb_connection_t,
                                        operation: xcb_shape_op_t,
                                        destination_kind: xcb_shape_kind_t,
                                        ordering: uint8_t,
                                        destination_window: xcb_window_t,
                                        x_offset: int16_t, y_offset: int16_t,
                                        rectangles_len: uint32_t,
                                        rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_rectangles(c: *mut xcb_connection_t,
                                operation: xcb_shape_op_t,
                                destination_kind: xcb_shape_kind_t,
                                ordering: uint8_t,
                                destination_window: xcb_window_t,
                                x_offset: int16_t, y_offset: int16_t,
                                rectangles_len: uint32_t,
                                rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_mask_checked(c: *mut xcb_connection_t,
                                  operation: xcb_shape_op_t,
                                  destination_kind: xcb_shape_kind_t,
                                  destination_window: xcb_window_t,
                                  x_offset: int16_t, y_offset: int16_t,
                                  source_bitmap: xcb_pixmap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_mask(c: *mut xcb_connection_t, operation: xcb_shape_op_t,
                          destination_kind: xcb_shape_kind_t,
                          destination_window: xcb_window_t, x_offset: int16_t,
                          y_offset: int16_t, source_bitmap: xcb_pixmap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_combine_checked(c: *mut xcb_connection_t,
                                     operation: xcb_shape_op_t,
                                     destination_kind: xcb_shape_kind_t,
                                     source_kind: xcb_shape_kind_t,
                                     destination_window: xcb_window_t,
                                     x_offset: int16_t, y_offset: int16_t,
                                     source_window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_combine(c: *mut xcb_connection_t,
                             operation: xcb_shape_op_t,
                             destination_kind: xcb_shape_kind_t,
                             source_kind: xcb_shape_kind_t,
                             destination_window: xcb_window_t,
                             x_offset: int16_t, y_offset: int16_t,
                             source_window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_offset_checked(c: *mut xcb_connection_t,
                                    destination_kind: xcb_shape_kind_t,
                                    destination_window: xcb_window_t,
                                    x_offset: int16_t, y_offset: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_offset(c: *mut xcb_connection_t,
                            destination_kind: xcb_shape_kind_t,
                            destination_window: xcb_window_t,
                            x_offset: int16_t, y_offset: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_query_extents(c: *mut xcb_connection_t,
                                   destination_window: xcb_window_t)
     -> xcb_shape_query_extents_cookie_t;
    pub fn xcb_shape_query_extents_unchecked(c: *mut xcb_connection_t,
                                             destination_window: xcb_window_t)
     -> xcb_shape_query_extents_cookie_t;
    pub fn xcb_shape_query_extents_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_shape_query_extents_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_shape_query_extents_reply_t;
    pub fn xcb_shape_select_input_checked(c: *mut xcb_connection_t,
                                          destination_window: xcb_window_t,
                                          enable: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_shape_select_input(c: *mut xcb_connection_t,
                                  destination_window: xcb_window_t,
                                  enable: uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_shape_input_selected(c: *mut xcb_connection_t,
                                    destination_window: xcb_window_t)
     -> xcb_shape_input_selected_cookie_t;
    pub fn xcb_shape_input_selected_unchecked(c: *mut xcb_connection_t,
                                              destination_window:
                                                  xcb_window_t)
     -> xcb_shape_input_selected_cookie_t;
    pub fn xcb_shape_input_selected_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_shape_input_selected_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_shape_input_selected_reply_t;
    pub fn xcb_shape_get_rectangles_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_shape_get_rectangles(c: *mut xcb_connection_t,
                                    window: xcb_window_t,
                                    source_kind: xcb_shape_kind_t)
     -> xcb_shape_get_rectangles_cookie_t;
    pub fn xcb_shape_get_rectangles_unchecked(c: *mut xcb_connection_t,
                                              window: xcb_window_t,
                                              source_kind: xcb_shape_kind_t)
     -> xcb_shape_get_rectangles_cookie_t;
    pub fn xcb_shape_get_rectangles_rectangles(R:
                                                   *const xcb_shape_get_rectangles_reply_t)
     -> *mut xcb_rectangle_t;
    pub fn xcb_shape_get_rectangles_rectangles_length(R:
                                                          *const xcb_shape_get_rectangles_reply_t)
     -> ::libc::c_int;
    pub fn xcb_shape_get_rectangles_rectangles_iterator(R:
                                                            *const xcb_shape_get_rectangles_reply_t)
     -> xcb_rectangle_iterator_t;
    pub fn xcb_shape_get_rectangles_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_shape_get_rectangles_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_shape_get_rectangles_reply_t;
    pub fn xcb_xfixes_query_version(c: *mut xcb_connection_t,
                                    client_major_version: uint32_t,
                                    client_minor_version: uint32_t)
     -> xcb_xfixes_query_version_cookie_t;
    pub fn xcb_xfixes_query_version_unchecked(c: *mut xcb_connection_t,
                                              client_major_version: uint32_t,
                                              client_minor_version: uint32_t)
     -> xcb_xfixes_query_version_cookie_t;
    pub fn xcb_xfixes_query_version_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_xfixes_query_version_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_xfixes_query_version_reply_t;
    pub fn xcb_xfixes_change_save_set_checked(c: *mut xcb_connection_t,
                                              mode: uint8_t, target: uint8_t,
                                              map: uint8_t,
                                              window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_change_save_set(c: *mut xcb_connection_t, mode: uint8_t,
                                      target: uint8_t, map: uint8_t,
                                      window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_select_selection_input_checked(c: *mut xcb_connection_t,
                                                     window: xcb_window_t,
                                                     selection: xcb_atom_t,
                                                     event_mask: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_select_selection_input(c: *mut xcb_connection_t,
                                             window: xcb_window_t,
                                             selection: xcb_atom_t,
                                             event_mask: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_select_cursor_input_checked(c: *mut xcb_connection_t,
                                                  window: xcb_window_t,
                                                  event_mask: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_select_cursor_input(c: *mut xcb_connection_t,
                                          window: xcb_window_t,
                                          event_mask: uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_get_cursor_image_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_xfixes_get_cursor_image(c: *mut xcb_connection_t)
     -> xcb_xfixes_get_cursor_image_cookie_t;
    pub fn xcb_xfixes_get_cursor_image_unchecked(c: *mut xcb_connection_t)
     -> xcb_xfixes_get_cursor_image_cookie_t;
    pub fn xcb_xfixes_get_cursor_image_cursor_image(R:
                                                        *const xcb_xfixes_get_cursor_image_reply_t)
     -> *mut uint32_t;
    pub fn xcb_xfixes_get_cursor_image_cursor_image_length(R:
                                                               *const xcb_xfixes_get_cursor_image_reply_t)
     -> ::libc::c_int;
    pub fn xcb_xfixes_get_cursor_image_cursor_image_end(R:
                                                            *const xcb_xfixes_get_cursor_image_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_xfixes_get_cursor_image_reply(c: *mut xcb_connection_t,
                                             cookie:
                                                 xcb_xfixes_get_cursor_image_cookie_t,
                                             e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_xfixes_get_cursor_image_reply_t;
    pub fn xcb_xfixes_region_next(i: *mut xcb_xfixes_region_iterator_t) -> ();
    pub fn xcb_xfixes_region_end(i: xcb_xfixes_region_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_xfixes_create_region_sizeof(_buffer: *const ::libc::c_void,
                                           rectangles_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_xfixes_create_region_checked(c: *mut xcb_connection_t,
                                            region: xcb_xfixes_region_t,
                                            rectangles_len: uint32_t,
                                            rectangles:
                                                *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region(c: *mut xcb_connection_t,
                                    region: xcb_xfixes_region_t,
                                    rectangles_len: uint32_t,
                                    rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region_from_bitmap_checked(c:
                                                            *mut xcb_connection_t,
                                                        region:
                                                            xcb_xfixes_region_t,
                                                        bitmap: xcb_pixmap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region_from_bitmap(c: *mut xcb_connection_t,
                                                region: xcb_xfixes_region_t,
                                                bitmap: xcb_pixmap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region_from_window_checked(c:
                                                            *mut xcb_connection_t,
                                                        region:
                                                            xcb_xfixes_region_t,
                                                        window: xcb_window_t,
                                                        kind:
                                                            xcb_shape_kind_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region_from_window(c: *mut xcb_connection_t,
                                                region: xcb_xfixes_region_t,
                                                window: xcb_window_t,
                                                kind: xcb_shape_kind_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region_from_gc_checked(c: *mut xcb_connection_t,
                                                    region:
                                                        xcb_xfixes_region_t,
                                                    gc: xcb_gcontext_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region_from_gc(c: *mut xcb_connection_t,
                                            region: xcb_xfixes_region_t,
                                            gc: xcb_gcontext_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region_from_picture_checked(c:
                                                             *mut xcb_connection_t,
                                                         region:
                                                             xcb_xfixes_region_t,
                                                         picture:
                                                             xcb_render_picture_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_region_from_picture(c: *mut xcb_connection_t,
                                                 region: xcb_xfixes_region_t,
                                                 picture:
                                                     xcb_render_picture_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_destroy_region_checked(c: *mut xcb_connection_t,
                                             region: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_destroy_region(c: *mut xcb_connection_t,
                                     region: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_region_sizeof(_buffer: *const ::libc::c_void,
                                        rectangles_len: uint32_t)
     -> ::libc::c_int;
    pub fn xcb_xfixes_set_region_checked(c: *mut xcb_connection_t,
                                         region: xcb_xfixes_region_t,
                                         rectangles_len: uint32_t,
                                         rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_region(c: *mut xcb_connection_t,
                                 region: xcb_xfixes_region_t,
                                 rectangles_len: uint32_t,
                                 rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_copy_region_checked(c: *mut xcb_connection_t,
                                          source: xcb_xfixes_region_t,
                                          destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_copy_region(c: *mut xcb_connection_t,
                                  source: xcb_xfixes_region_t,
                                  destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_union_region_checked(c: *mut xcb_connection_t,
                                           source1: xcb_xfixes_region_t,
                                           source2: xcb_xfixes_region_t,
                                           destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_union_region(c: *mut xcb_connection_t,
                                   source1: xcb_xfixes_region_t,
                                   source2: xcb_xfixes_region_t,
                                   destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_intersect_region_checked(c: *mut xcb_connection_t,
                                               source1: xcb_xfixes_region_t,
                                               source2: xcb_xfixes_region_t,
                                               destination:
                                                   xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_intersect_region(c: *mut xcb_connection_t,
                                       source1: xcb_xfixes_region_t,
                                       source2: xcb_xfixes_region_t,
                                       destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_subtract_region_checked(c: *mut xcb_connection_t,
                                              source1: xcb_xfixes_region_t,
                                              source2: xcb_xfixes_region_t,
                                              destination:
                                                  xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_subtract_region(c: *mut xcb_connection_t,
                                      source1: xcb_xfixes_region_t,
                                      source2: xcb_xfixes_region_t,
                                      destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_invert_region_checked(c: *mut xcb_connection_t,
                                            source: xcb_xfixes_region_t,
                                            bounds: xcb_rectangle_t,
                                            destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_invert_region(c: *mut xcb_connection_t,
                                    source: xcb_xfixes_region_t,
                                    bounds: xcb_rectangle_t,
                                    destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_translate_region_checked(c: *mut xcb_connection_t,
                                               region: xcb_xfixes_region_t,
                                               dx: int16_t, dy: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_translate_region(c: *mut xcb_connection_t,
                                       region: xcb_xfixes_region_t,
                                       dx: int16_t, dy: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_region_extents_checked(c: *mut xcb_connection_t,
                                             source: xcb_xfixes_region_t,
                                             destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_region_extents(c: *mut xcb_connection_t,
                                     source: xcb_xfixes_region_t,
                                     destination: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_fetch_region_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_xfixes_fetch_region(c: *mut xcb_connection_t,
                                   region: xcb_xfixes_region_t)
     -> xcb_xfixes_fetch_region_cookie_t;
    pub fn xcb_xfixes_fetch_region_unchecked(c: *mut xcb_connection_t,
                                             region: xcb_xfixes_region_t)
     -> xcb_xfixes_fetch_region_cookie_t;
    pub fn xcb_xfixes_fetch_region_rectangles(R:
                                                  *const xcb_xfixes_fetch_region_reply_t)
     -> *mut xcb_rectangle_t;
    pub fn xcb_xfixes_fetch_region_rectangles_length(R:
                                                         *const xcb_xfixes_fetch_region_reply_t)
     -> ::libc::c_int;
    pub fn xcb_xfixes_fetch_region_rectangles_iterator(R:
                                                           *const xcb_xfixes_fetch_region_reply_t)
     -> xcb_rectangle_iterator_t;
    pub fn xcb_xfixes_fetch_region_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_xfixes_fetch_region_cookie_t,
                                         e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_xfixes_fetch_region_reply_t;
    pub fn xcb_xfixes_set_gc_clip_region_checked(c: *mut xcb_connection_t,
                                                 gc: xcb_gcontext_t,
                                                 region: xcb_xfixes_region_t,
                                                 x_origin: int16_t,
                                                 y_origin: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_gc_clip_region(c: *mut xcb_connection_t,
                                         gc: xcb_gcontext_t,
                                         region: xcb_xfixes_region_t,
                                         x_origin: int16_t, y_origin: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_window_shape_region_checked(c:
                                                          *mut xcb_connection_t,
                                                      dest: xcb_window_t,
                                                      dest_kind:
                                                          xcb_shape_kind_t,
                                                      x_offset: int16_t,
                                                      y_offset: int16_t,
                                                      region:
                                                          xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_window_shape_region(c: *mut xcb_connection_t,
                                              dest: xcb_window_t,
                                              dest_kind: xcb_shape_kind_t,
                                              x_offset: int16_t,
                                              y_offset: int16_t,
                                              region: xcb_xfixes_region_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_picture_clip_region_checked(c:
                                                          *mut xcb_connection_t,
                                                      picture:
                                                          xcb_render_picture_t,
                                                      region:
                                                          xcb_xfixes_region_t,
                                                      x_origin: int16_t,
                                                      y_origin: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_picture_clip_region(c: *mut xcb_connection_t,
                                              picture: xcb_render_picture_t,
                                              region: xcb_xfixes_region_t,
                                              x_origin: int16_t,
                                              y_origin: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_cursor_name_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_xfixes_set_cursor_name_checked(c: *mut xcb_connection_t,
                                              cursor: xcb_cursor_t,
                                              nbytes: uint16_t,
                                              name: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_set_cursor_name(c: *mut xcb_connection_t,
                                      cursor: xcb_cursor_t, nbytes: uint16_t,
                                      name: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_get_cursor_name_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_xfixes_get_cursor_name(c: *mut xcb_connection_t,
                                      cursor: xcb_cursor_t)
     -> xcb_xfixes_get_cursor_name_cookie_t;
    pub fn xcb_xfixes_get_cursor_name_unchecked(c: *mut xcb_connection_t,
                                                cursor: xcb_cursor_t)
     -> xcb_xfixes_get_cursor_name_cookie_t;
    pub fn xcb_xfixes_get_cursor_name_name(R:
                                               *const xcb_xfixes_get_cursor_name_reply_t)
     -> *mut ::libc::c_char;
    pub fn xcb_xfixes_get_cursor_name_name_length(R:
                                                      *const xcb_xfixes_get_cursor_name_reply_t)
     -> ::libc::c_int;
    pub fn xcb_xfixes_get_cursor_name_name_end(R:
                                                   *const xcb_xfixes_get_cursor_name_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_xfixes_get_cursor_name_reply(c: *mut xcb_connection_t,
                                            cookie:
                                                xcb_xfixes_get_cursor_name_cookie_t,
                                            e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_xfixes_get_cursor_name_reply_t;
    pub fn xcb_xfixes_get_cursor_image_and_name_sizeof(_buffer:
                                                           *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_xfixes_get_cursor_image_and_name(c: *mut xcb_connection_t)
     -> xcb_xfixes_get_cursor_image_and_name_cookie_t;
    pub fn xcb_xfixes_get_cursor_image_and_name_unchecked(c:
                                                              *mut xcb_connection_t)
     -> xcb_xfixes_get_cursor_image_and_name_cookie_t;
    pub fn xcb_xfixes_get_cursor_image_and_name_name(R:
                                                         *const xcb_xfixes_get_cursor_image_and_name_reply_t)
     -> *mut ::libc::c_char;
    pub fn xcb_xfixes_get_cursor_image_and_name_name_length(R:
                                                                *const xcb_xfixes_get_cursor_image_and_name_reply_t)
     -> ::libc::c_int;
    pub fn xcb_xfixes_get_cursor_image_and_name_name_end(R:
                                                             *const xcb_xfixes_get_cursor_image_and_name_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_xfixes_get_cursor_image_and_name_cursor_image(R:
                                                                 *const xcb_xfixes_get_cursor_image_and_name_reply_t)
     -> *mut uint32_t;
    pub fn xcb_xfixes_get_cursor_image_and_name_cursor_image_length(R:
                                                                        *const xcb_xfixes_get_cursor_image_and_name_reply_t)
     -> ::libc::c_int;
    pub fn xcb_xfixes_get_cursor_image_and_name_cursor_image_end(R:
                                                                     *const xcb_xfixes_get_cursor_image_and_name_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_xfixes_get_cursor_image_and_name_reply(c:
                                                          *mut xcb_connection_t,
                                                      cookie:
                                                          xcb_xfixes_get_cursor_image_and_name_cookie_t,
                                                      e:
                                                          *mut *mut xcb_generic_error_t)
     -> *mut xcb_xfixes_get_cursor_image_and_name_reply_t;
    pub fn xcb_xfixes_change_cursor_checked(c: *mut xcb_connection_t,
                                            source: xcb_cursor_t,
                                            destination: xcb_cursor_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_change_cursor(c: *mut xcb_connection_t,
                                    source: xcb_cursor_t,
                                    destination: xcb_cursor_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_change_cursor_by_name_sizeof(_buffer:
                                                       *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_xfixes_change_cursor_by_name_checked(c: *mut xcb_connection_t,
                                                    src: xcb_cursor_t,
                                                    nbytes: uint16_t,
                                                    name:
                                                        *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_change_cursor_by_name(c: *mut xcb_connection_t,
                                            src: xcb_cursor_t,
                                            nbytes: uint16_t,
                                            name: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_expand_region_checked(c: *mut xcb_connection_t,
                                            source: xcb_xfixes_region_t,
                                            destination: xcb_xfixes_region_t,
                                            left: uint16_t, right: uint16_t,
                                            top: uint16_t, bottom: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_expand_region(c: *mut xcb_connection_t,
                                    source: xcb_xfixes_region_t,
                                    destination: xcb_xfixes_region_t,
                                    left: uint16_t, right: uint16_t,
                                    top: uint16_t, bottom: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_hide_cursor_checked(c: *mut xcb_connection_t,
                                          window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_hide_cursor(c: *mut xcb_connection_t,
                                  window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_xfixes_show_cursor_checked(c: *mut xcb_connection_t,
                                          window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_show_cursor(c: *mut xcb_connection_t,
                                  window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_xfixes_barrier_next(i: *mut xcb_xfixes_barrier_iterator_t)
     -> ();
    pub fn xcb_xfixes_barrier_end(i: xcb_xfixes_barrier_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_xfixes_create_pointer_barrier_sizeof(_buffer:
                                                        *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_xfixes_create_pointer_barrier_checked(c: *mut xcb_connection_t,
                                                     barrier:
                                                         xcb_xfixes_barrier_t,
                                                     window: xcb_window_t,
                                                     x1: uint16_t,
                                                     y1: uint16_t,
                                                     x2: uint16_t,
                                                     y2: uint16_t,
                                                     directions: uint32_t,
                                                     num_devices: uint16_t,
                                                     devices: *const uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_create_pointer_barrier(c: *mut xcb_connection_t,
                                             barrier: xcb_xfixes_barrier_t,
                                             window: xcb_window_t,
                                             x1: uint16_t, y1: uint16_t,
                                             x2: uint16_t, y2: uint16_t,
                                             directions: uint32_t,
                                             num_devices: uint16_t,
                                             devices: *const uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_delete_pointer_barrier_checked(c: *mut xcb_connection_t,
                                                     barrier:
                                                         xcb_xfixes_barrier_t)
     -> xcb_void_cookie_t;
    pub fn xcb_xfixes_delete_pointer_barrier(c: *mut xcb_connection_t,
                                             barrier: xcb_xfixes_barrier_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_event_class_next(i:
                                          *mut xcb_input_event_class_iterator_t)
     -> ();
    pub fn xcb_input_event_class_end(i: xcb_input_event_class_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_key_code_next(i: *mut xcb_input_key_code_iterator_t)
     -> ();
    pub fn xcb_input_key_code_end(i: xcb_input_key_code_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_id_next(i: *mut xcb_input_device_id_iterator_t)
     -> ();
    pub fn xcb_input_device_id_end(i: xcb_input_device_id_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_fp1616_next(i: *mut xcb_input_fp1616_iterator_t) -> ();
    pub fn xcb_input_fp1616_end(i: xcb_input_fp1616_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_fp3232_next(i: *mut xcb_input_fp3232_iterator_t) -> ();
    pub fn xcb_input_fp3232_end(i: xcb_input_fp3232_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_extension_version_sizeof(_buffer:
                                                      *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_get_extension_version(c: *mut xcb_connection_t,
                                           name_len: uint16_t,
                                           name: *const ::libc::c_char)
     -> xcb_input_get_extension_version_cookie_t;
    pub fn xcb_input_get_extension_version_unchecked(c: *mut xcb_connection_t,
                                                     name_len: uint16_t,
                                                     name:
                                                         *const ::libc::c_char)
     -> xcb_input_get_extension_version_cookie_t;
    pub fn xcb_input_get_extension_version_reply(c: *mut xcb_connection_t,
                                                 cookie:
                                                     xcb_input_get_extension_version_cookie_t,
                                                 e:
                                                     *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_extension_version_reply_t;
    pub fn xcb_input_device_info_next(i:
                                          *mut xcb_input_device_info_iterator_t)
     -> ();
    pub fn xcb_input_device_info_end(i: xcb_input_device_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_key_info_next(i: *mut xcb_input_key_info_iterator_t)
     -> ();
    pub fn xcb_input_key_info_end(i: xcb_input_key_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_button_info_next(i:
                                          *mut xcb_input_button_info_iterator_t)
     -> ();
    pub fn xcb_input_button_info_end(i: xcb_input_button_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_axis_info_next(i: *mut xcb_input_axis_info_iterator_t)
     -> ();
    pub fn xcb_input_axis_info_end(i: xcb_input_axis_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_valuator_info_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_valuator_info_axes(R: *const xcb_input_valuator_info_t)
     -> *mut xcb_input_axis_info_t;
    pub fn xcb_input_valuator_info_axes_length(R:
                                                   *const xcb_input_valuator_info_t)
     -> ::libc::c_int;
    pub fn xcb_input_valuator_info_axes_iterator(R:
                                                     *const xcb_input_valuator_info_t)
     -> xcb_input_axis_info_iterator_t;
    pub fn xcb_input_valuator_info_next(i:
                                            *mut xcb_input_valuator_info_iterator_t)
     -> ();
    pub fn xcb_input_valuator_info_end(i: xcb_input_valuator_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_input_info_next(i: *mut xcb_input_input_info_iterator_t)
     -> ();
    pub fn xcb_input_input_info_end(i: xcb_input_input_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_name_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_device_name_string(R: *const xcb_input_device_name_t)
     -> *mut ::libc::c_char;
    pub fn xcb_input_device_name_string_length(R:
                                                   *const xcb_input_device_name_t)
     -> ::libc::c_int;
    pub fn xcb_input_device_name_string_end(R: *const xcb_input_device_name_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_name_next(i:
                                          *mut xcb_input_device_name_iterator_t)
     -> ();
    pub fn xcb_input_device_name_end(i: xcb_input_device_name_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_list_input_devices_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_list_input_devices(c: *mut xcb_connection_t)
     -> xcb_input_list_input_devices_cookie_t;
    pub fn xcb_input_list_input_devices_unchecked(c: *mut xcb_connection_t)
     -> xcb_input_list_input_devices_cookie_t;
    pub fn xcb_input_list_input_devices_devices(R:
                                                    *const xcb_input_list_input_devices_reply_t)
     -> *mut xcb_input_device_info_t;
    pub fn xcb_input_list_input_devices_devices_length(R:
                                                           *const xcb_input_list_input_devices_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_list_input_devices_devices_iterator(R:
                                                             *const xcb_input_list_input_devices_reply_t)
     -> xcb_input_device_info_iterator_t;
    pub fn xcb_input_list_input_devices_reply(c: *mut xcb_connection_t,
                                              cookie:
                                                  xcb_input_list_input_devices_cookie_t,
                                              e:
                                                  *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_list_input_devices_reply_t;
    pub fn xcb_input_input_class_info_next(i:
                                               *mut xcb_input_input_class_info_iterator_t)
     -> ();
    pub fn xcb_input_input_class_info_end(i:
                                              xcb_input_input_class_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_open_device_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_open_device(c: *mut xcb_connection_t, device_id: uint8_t)
     -> xcb_input_open_device_cookie_t;
    pub fn xcb_input_open_device_unchecked(c: *mut xcb_connection_t,
                                           device_id: uint8_t)
     -> xcb_input_open_device_cookie_t;
    pub fn xcb_input_open_device_class_info(R:
                                                *const xcb_input_open_device_reply_t)
     -> *mut xcb_input_input_class_info_t;
    pub fn xcb_input_open_device_class_info_length(R:
                                                       *const xcb_input_open_device_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_open_device_class_info_iterator(R:
                                                         *const xcb_input_open_device_reply_t)
     -> xcb_input_input_class_info_iterator_t;
    pub fn xcb_input_open_device_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_input_open_device_cookie_t,
                                       e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_open_device_reply_t;
    pub fn xcb_input_close_device_checked(c: *mut xcb_connection_t,
                                          device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_close_device(c: *mut xcb_connection_t,
                                  device_id: uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_input_set_device_mode(c: *mut xcb_connection_t,
                                     device_id: uint8_t, mode: uint8_t)
     -> xcb_input_set_device_mode_cookie_t;
    pub fn xcb_input_set_device_mode_unchecked(c: *mut xcb_connection_t,
                                               device_id: uint8_t,
                                               mode: uint8_t)
     -> xcb_input_set_device_mode_cookie_t;
    pub fn xcb_input_set_device_mode_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_input_set_device_mode_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_set_device_mode_reply_t;
    pub fn xcb_input_select_extension_event_sizeof(_buffer:
                                                       *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_select_extension_event_checked(c: *mut xcb_connection_t,
                                                    window: xcb_window_t,
                                                    num_classes: uint16_t,
                                                    classes:
                                                        *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_select_extension_event(c: *mut xcb_connection_t,
                                            window: xcb_window_t,
                                            num_classes: uint16_t,
                                            classes:
                                                *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_get_selected_extension_events_sizeof(_buffer:
                                                              *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_get_selected_extension_events(c: *mut xcb_connection_t,
                                                   window: xcb_window_t)
     -> xcb_input_get_selected_extension_events_cookie_t;
    pub fn xcb_input_get_selected_extension_events_unchecked(c:
                                                                 *mut xcb_connection_t,
                                                             window:
                                                                 xcb_window_t)
     -> xcb_input_get_selected_extension_events_cookie_t;
    pub fn xcb_input_get_selected_extension_events_this_classes(R:
                                                                    *const xcb_input_get_selected_extension_events_reply_t)
     -> *mut xcb_input_event_class_t;
    pub fn xcb_input_get_selected_extension_events_this_classes_length(R:
                                                                           *const xcb_input_get_selected_extension_events_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_selected_extension_events_this_classes_end(R:
                                                                        *const xcb_input_get_selected_extension_events_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_selected_extension_events_all_classes(R:
                                                                   *const xcb_input_get_selected_extension_events_reply_t)
     -> *mut xcb_input_event_class_t;
    pub fn xcb_input_get_selected_extension_events_all_classes_length(R:
                                                                          *const xcb_input_get_selected_extension_events_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_selected_extension_events_all_classes_end(R:
                                                                       *const xcb_input_get_selected_extension_events_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_selected_extension_events_reply(c:
                                                             *mut xcb_connection_t,
                                                         cookie:
                                                             xcb_input_get_selected_extension_events_cookie_t,
                                                         e:
                                                             *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_selected_extension_events_reply_t;
    pub fn xcb_input_change_device_dont_propagate_list_sizeof(_buffer:
                                                                  *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_dont_propagate_list_checked(c:
                                                                   *mut xcb_connection_t,
                                                               window:
                                                                   xcb_window_t,
                                                               num_classes:
                                                                   uint16_t,
                                                               mode: uint8_t,
                                                               classes:
                                                                   *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_change_device_dont_propagate_list(c:
                                                           *mut xcb_connection_t,
                                                       window: xcb_window_t,
                                                       num_classes: uint16_t,
                                                       mode: uint8_t,
                                                       classes:
                                                           *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_get_device_dont_propagate_list_sizeof(_buffer:
                                                               *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_dont_propagate_list(c: *mut xcb_connection_t,
                                                    window: xcb_window_t)
     -> xcb_input_get_device_dont_propagate_list_cookie_t;
    pub fn xcb_input_get_device_dont_propagate_list_unchecked(c:
                                                                  *mut xcb_connection_t,
                                                              window:
                                                                  xcb_window_t)
     -> xcb_input_get_device_dont_propagate_list_cookie_t;
    pub fn xcb_input_get_device_dont_propagate_list_classes(R:
                                                                *const xcb_input_get_device_dont_propagate_list_reply_t)
     -> *mut xcb_input_event_class_t;
    pub fn xcb_input_get_device_dont_propagate_list_classes_length(R:
                                                                       *const xcb_input_get_device_dont_propagate_list_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_dont_propagate_list_classes_end(R:
                                                                    *const xcb_input_get_device_dont_propagate_list_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_dont_propagate_list_reply(c:
                                                              *mut xcb_connection_t,
                                                          cookie:
                                                              xcb_input_get_device_dont_propagate_list_cookie_t,
                                                          e:
                                                              *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_device_dont_propagate_list_reply_t;
    pub fn xcb_input_device_time_coord_next(i:
                                                *mut xcb_input_device_time_coord_iterator_t)
     -> ();
    pub fn xcb_input_device_time_coord_end(i:
                                               xcb_input_device_time_coord_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_motion_events(c: *mut xcb_connection_t,
                                              start: xcb_timestamp_t,
                                              stop: xcb_timestamp_t,
                                              device_id: uint8_t)
     -> xcb_input_get_device_motion_events_cookie_t;
    pub fn xcb_input_get_device_motion_events_unchecked(c:
                                                            *mut xcb_connection_t,
                                                        start:
                                                            xcb_timestamp_t,
                                                        stop: xcb_timestamp_t,
                                                        device_id: uint8_t)
     -> xcb_input_get_device_motion_events_cookie_t;
    pub fn xcb_input_get_device_motion_events_reply(c: *mut xcb_connection_t,
                                                    cookie:
                                                        xcb_input_get_device_motion_events_cookie_t,
                                                    e:
                                                        *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_device_motion_events_reply_t;
    pub fn xcb_input_change_keyboard_device(c: *mut xcb_connection_t,
                                            device_id: uint8_t)
     -> xcb_input_change_keyboard_device_cookie_t;
    pub fn xcb_input_change_keyboard_device_unchecked(c:
                                                          *mut xcb_connection_t,
                                                      device_id: uint8_t)
     -> xcb_input_change_keyboard_device_cookie_t;
    pub fn xcb_input_change_keyboard_device_reply(c: *mut xcb_connection_t,
                                                  cookie:
                                                      xcb_input_change_keyboard_device_cookie_t,
                                                  e:
                                                      *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_change_keyboard_device_reply_t;
    pub fn xcb_input_change_pointer_device(c: *mut xcb_connection_t,
                                           x_axis: uint8_t, y_axis: uint8_t,
                                           device_id: uint8_t)
     -> xcb_input_change_pointer_device_cookie_t;
    pub fn xcb_input_change_pointer_device_unchecked(c: *mut xcb_connection_t,
                                                     x_axis: uint8_t,
                                                     y_axis: uint8_t,
                                                     device_id: uint8_t)
     -> xcb_input_change_pointer_device_cookie_t;
    pub fn xcb_input_change_pointer_device_reply(c: *mut xcb_connection_t,
                                                 cookie:
                                                     xcb_input_change_pointer_device_cookie_t,
                                                 e:
                                                     *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_change_pointer_device_reply_t;
    pub fn xcb_input_grab_device_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_grab_device(c: *mut xcb_connection_t,
                                 grab_window: xcb_window_t,
                                 time: xcb_timestamp_t, num_classes: uint16_t,
                                 this_device_mode: uint8_t,
                                 other_device_mode: uint8_t,
                                 owner_events: uint8_t, device_id: uint8_t,
                                 classes: *const xcb_input_event_class_t)
     -> xcb_input_grab_device_cookie_t;
    pub fn xcb_input_grab_device_unchecked(c: *mut xcb_connection_t,
                                           grab_window: xcb_window_t,
                                           time: xcb_timestamp_t,
                                           num_classes: uint16_t,
                                           this_device_mode: uint8_t,
                                           other_device_mode: uint8_t,
                                           owner_events: uint8_t,
                                           device_id: uint8_t,
                                           classes:
                                               *const xcb_input_event_class_t)
     -> xcb_input_grab_device_cookie_t;
    pub fn xcb_input_grab_device_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_input_grab_device_cookie_t,
                                       e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_grab_device_reply_t;
    pub fn xcb_input_ungrab_device_checked(c: *mut xcb_connection_t,
                                           time: xcb_timestamp_t,
                                           device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_ungrab_device(c: *mut xcb_connection_t,
                                   time: xcb_timestamp_t, device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_grab_device_key_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_grab_device_key_checked(c: *mut xcb_connection_t,
                                             grab_window: xcb_window_t,
                                             num_classes: uint16_t,
                                             modifiers: uint16_t,
                                             modifier_device: uint8_t,
                                             grabbed_device: uint8_t,
                                             key: uint8_t,
                                             this_device_mode: uint8_t,
                                             other_device_mode: uint8_t,
                                             owner_events: uint8_t,
                                             classes:
                                                 *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_grab_device_key(c: *mut xcb_connection_t,
                                     grab_window: xcb_window_t,
                                     num_classes: uint16_t,
                                     modifiers: uint16_t,
                                     modifier_device: uint8_t,
                                     grabbed_device: uint8_t, key: uint8_t,
                                     this_device_mode: uint8_t,
                                     other_device_mode: uint8_t,
                                     owner_events: uint8_t,
                                     classes: *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_ungrab_device_key_checked(c: *mut xcb_connection_t,
                                               grabWindow: xcb_window_t,
                                               modifiers: uint16_t,
                                               modifier_device: uint8_t,
                                               key: uint8_t,
                                               grabbed_device: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_ungrab_device_key(c: *mut xcb_connection_t,
                                       grabWindow: xcb_window_t,
                                       modifiers: uint16_t,
                                       modifier_device: uint8_t, key: uint8_t,
                                       grabbed_device: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_grab_device_button_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_grab_device_button_checked(c: *mut xcb_connection_t,
                                                grab_window: xcb_window_t,
                                                grabbed_device: uint8_t,
                                                modifier_device: uint8_t,
                                                num_classes: uint16_t,
                                                modifiers: uint16_t,
                                                this_device_mode: uint8_t,
                                                other_device_mode: uint8_t,
                                                button: uint8_t,
                                                owner_events: uint8_t,
                                                classes:
                                                    *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_grab_device_button(c: *mut xcb_connection_t,
                                        grab_window: xcb_window_t,
                                        grabbed_device: uint8_t,
                                        modifier_device: uint8_t,
                                        num_classes: uint16_t,
                                        modifiers: uint16_t,
                                        this_device_mode: uint8_t,
                                        other_device_mode: uint8_t,
                                        button: uint8_t,
                                        owner_events: uint8_t,
                                        classes:
                                            *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_ungrab_device_button_checked(c: *mut xcb_connection_t,
                                                  grab_window: xcb_window_t,
                                                  modifiers: uint16_t,
                                                  modifier_device: uint8_t,
                                                  button: uint8_t,
                                                  grabbed_device: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_ungrab_device_button(c: *mut xcb_connection_t,
                                          grab_window: xcb_window_t,
                                          modifiers: uint16_t,
                                          modifier_device: uint8_t,
                                          button: uint8_t,
                                          grabbed_device: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_allow_device_events_checked(c: *mut xcb_connection_t,
                                                 time: xcb_timestamp_t,
                                                 mode: uint8_t,
                                                 device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_allow_device_events(c: *mut xcb_connection_t,
                                         time: xcb_timestamp_t, mode: uint8_t,
                                         device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_get_device_focus(c: *mut xcb_connection_t,
                                      device_id: uint8_t)
     -> xcb_input_get_device_focus_cookie_t;
    pub fn xcb_input_get_device_focus_unchecked(c: *mut xcb_connection_t,
                                                device_id: uint8_t)
     -> xcb_input_get_device_focus_cookie_t;
    pub fn xcb_input_get_device_focus_reply(c: *mut xcb_connection_t,
                                            cookie:
                                                xcb_input_get_device_focus_cookie_t,
                                            e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_device_focus_reply_t;
    pub fn xcb_input_set_device_focus_checked(c: *mut xcb_connection_t,
                                              focus: xcb_window_t,
                                              time: xcb_timestamp_t,
                                              revert_to: uint8_t,
                                              device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_set_device_focus(c: *mut xcb_connection_t,
                                      focus: xcb_window_t,
                                      time: xcb_timestamp_t,
                                      revert_to: uint8_t, device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_kbd_feedback_state_next(i:
                                                 *mut xcb_input_kbd_feedback_state_iterator_t)
     -> ();
    pub fn xcb_input_kbd_feedback_state_end(i:
                                                xcb_input_kbd_feedback_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_ptr_feedback_state_next(i:
                                                 *mut xcb_input_ptr_feedback_state_iterator_t)
     -> ();
    pub fn xcb_input_ptr_feedback_state_end(i:
                                                xcb_input_ptr_feedback_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_integer_feedback_state_next(i:
                                                     *mut xcb_input_integer_feedback_state_iterator_t)
     -> ();
    pub fn xcb_input_integer_feedback_state_end(i:
                                                    xcb_input_integer_feedback_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_string_feedback_state_sizeof(_buffer:
                                                      *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_string_feedback_state_keysyms(R:
                                                       *const xcb_input_string_feedback_state_t)
     -> *mut xcb_keysym_t;
    pub fn xcb_input_string_feedback_state_keysyms_length(R:
                                                              *const xcb_input_string_feedback_state_t)
     -> ::libc::c_int;
    pub fn xcb_input_string_feedback_state_keysyms_end(R:
                                                           *const xcb_input_string_feedback_state_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_string_feedback_state_next(i:
                                                    *mut xcb_input_string_feedback_state_iterator_t)
     -> ();
    pub fn xcb_input_string_feedback_state_end(i:
                                                   xcb_input_string_feedback_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_bell_feedback_state_next(i:
                                                  *mut xcb_input_bell_feedback_state_iterator_t)
     -> ();
    pub fn xcb_input_bell_feedback_state_end(i:
                                                 xcb_input_bell_feedback_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_led_feedback_state_next(i:
                                                 *mut xcb_input_led_feedback_state_iterator_t)
     -> ();
    pub fn xcb_input_led_feedback_state_end(i:
                                                xcb_input_led_feedback_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_feedback_state_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_feedback_state_uninterpreted_data(R:
                                                           *const xcb_input_feedback_state_t)
     -> *mut uint8_t;
    pub fn xcb_input_feedback_state_uninterpreted_data_length(R:
                                                                  *const xcb_input_feedback_state_t)
     -> ::libc::c_int;
    pub fn xcb_input_feedback_state_uninterpreted_data_end(R:
                                                               *const xcb_input_feedback_state_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_feedback_state_next(i:
                                             *mut xcb_input_feedback_state_iterator_t)
     -> ();
    pub fn xcb_input_feedback_state_end(i:
                                            xcb_input_feedback_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_feedback_control_sizeof(_buffer:
                                                     *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_get_feedback_control(c: *mut xcb_connection_t,
                                          device_id: uint8_t)
     -> xcb_input_get_feedback_control_cookie_t;
    pub fn xcb_input_get_feedback_control_unchecked(c: *mut xcb_connection_t,
                                                    device_id: uint8_t)
     -> xcb_input_get_feedback_control_cookie_t;
    pub fn xcb_input_get_feedback_control_feedbacks_length(R:
                                                               *const xcb_input_get_feedback_control_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_feedback_control_feedbacks_iterator(R:
                                                                 *const xcb_input_get_feedback_control_reply_t)
     -> xcb_input_feedback_state_iterator_t;
    pub fn xcb_input_get_feedback_control_reply(c: *mut xcb_connection_t,
                                                cookie:
                                                    xcb_input_get_feedback_control_cookie_t,
                                                e:
                                                    *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_feedback_control_reply_t;
    pub fn xcb_input_kbd_feedback_ctl_next(i:
                                               *mut xcb_input_kbd_feedback_ctl_iterator_t)
     -> ();
    pub fn xcb_input_kbd_feedback_ctl_end(i:
                                              xcb_input_kbd_feedback_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_ptr_feedback_ctl_next(i:
                                               *mut xcb_input_ptr_feedback_ctl_iterator_t)
     -> ();
    pub fn xcb_input_ptr_feedback_ctl_end(i:
                                              xcb_input_ptr_feedback_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_integer_feedback_ctl_next(i:
                                                   *mut xcb_input_integer_feedback_ctl_iterator_t)
     -> ();
    pub fn xcb_input_integer_feedback_ctl_end(i:
                                                  xcb_input_integer_feedback_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_string_feedback_ctl_sizeof(_buffer:
                                                    *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_string_feedback_ctl_keysyms(R:
                                                     *const xcb_input_string_feedback_ctl_t)
     -> *mut xcb_keysym_t;
    pub fn xcb_input_string_feedback_ctl_keysyms_length(R:
                                                            *const xcb_input_string_feedback_ctl_t)
     -> ::libc::c_int;
    pub fn xcb_input_string_feedback_ctl_keysyms_end(R:
                                                         *const xcb_input_string_feedback_ctl_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_string_feedback_ctl_next(i:
                                                  *mut xcb_input_string_feedback_ctl_iterator_t)
     -> ();
    pub fn xcb_input_string_feedback_ctl_end(i:
                                                 xcb_input_string_feedback_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_bell_feedback_ctl_next(i:
                                                *mut xcb_input_bell_feedback_ctl_iterator_t)
     -> ();
    pub fn xcb_input_bell_feedback_ctl_end(i:
                                               xcb_input_bell_feedback_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_led_feedback_ctl_next(i:
                                               *mut xcb_input_led_feedback_ctl_iterator_t)
     -> ();
    pub fn xcb_input_led_feedback_ctl_end(i:
                                              xcb_input_led_feedback_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_feedback_ctl_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_feedback_ctl_uninterpreted_data(R:
                                                         *const xcb_input_feedback_ctl_t)
     -> *mut uint8_t;
    pub fn xcb_input_feedback_ctl_uninterpreted_data_length(R:
                                                                *const xcb_input_feedback_ctl_t)
     -> ::libc::c_int;
    pub fn xcb_input_feedback_ctl_uninterpreted_data_end(R:
                                                             *const xcb_input_feedback_ctl_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_feedback_ctl_next(i:
                                           *mut xcb_input_feedback_ctl_iterator_t)
     -> ();
    pub fn xcb_input_feedback_ctl_end(i: xcb_input_feedback_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_change_feedback_control_sizeof(_buffer:
                                                        *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_change_feedback_control_checked(c: *mut xcb_connection_t,
                                                     mask: uint32_t,
                                                     device_id: uint8_t,
                                                     feedback_id: uint8_t,
                                                     feedback:
                                                         *mut xcb_input_feedback_ctl_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_change_feedback_control(c: *mut xcb_connection_t,
                                             mask: uint32_t,
                                             device_id: uint8_t,
                                             feedback_id: uint8_t,
                                             feedback:
                                                 *mut xcb_input_feedback_ctl_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_get_device_key_mapping_sizeof(_buffer:
                                                       *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_key_mapping(c: *mut xcb_connection_t,
                                            device_id: uint8_t,
                                            first_keycode:
                                                xcb_input_key_code_t,
                                            count: uint8_t)
     -> xcb_input_get_device_key_mapping_cookie_t;
    pub fn xcb_input_get_device_key_mapping_unchecked(c:
                                                          *mut xcb_connection_t,
                                                      device_id: uint8_t,
                                                      first_keycode:
                                                          xcb_input_key_code_t,
                                                      count: uint8_t)
     -> xcb_input_get_device_key_mapping_cookie_t;
    pub fn xcb_input_get_device_key_mapping_keysyms(R:
                                                        *const xcb_input_get_device_key_mapping_reply_t)
     -> *mut xcb_keysym_t;
    pub fn xcb_input_get_device_key_mapping_keysyms_length(R:
                                                               *const xcb_input_get_device_key_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_key_mapping_keysyms_end(R:
                                                            *const xcb_input_get_device_key_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_key_mapping_reply(c: *mut xcb_connection_t,
                                                  cookie:
                                                      xcb_input_get_device_key_mapping_cookie_t,
                                                  e:
                                                      *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_device_key_mapping_reply_t;
    pub fn xcb_input_change_device_key_mapping_sizeof(_buffer:
                                                          *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_key_mapping_checked(c:
                                                           *mut xcb_connection_t,
                                                       device_id: uint8_t,
                                                       first_keycode:
                                                           xcb_input_key_code_t,
                                                       keysyms_per_keycode:
                                                           uint8_t,
                                                       keycode_count: uint8_t,
                                                       keysyms:
                                                           *const xcb_keysym_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_change_device_key_mapping(c: *mut xcb_connection_t,
                                               device_id: uint8_t,
                                               first_keycode:
                                                   xcb_input_key_code_t,
                                               keysyms_per_keycode: uint8_t,
                                               keycode_count: uint8_t,
                                               keysyms: *const xcb_keysym_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_get_device_modifier_mapping_sizeof(_buffer:
                                                            *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_modifier_mapping(c: *mut xcb_connection_t,
                                                 device_id: uint8_t)
     -> xcb_input_get_device_modifier_mapping_cookie_t;
    pub fn xcb_input_get_device_modifier_mapping_unchecked(c:
                                                               *mut xcb_connection_t,
                                                           device_id: uint8_t)
     -> xcb_input_get_device_modifier_mapping_cookie_t;
    pub fn xcb_input_get_device_modifier_mapping_keymaps(R:
                                                             *const xcb_input_get_device_modifier_mapping_reply_t)
     -> *mut uint8_t;
    pub fn xcb_input_get_device_modifier_mapping_keymaps_length(R:
                                                                    *const xcb_input_get_device_modifier_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_modifier_mapping_keymaps_end(R:
                                                                 *const xcb_input_get_device_modifier_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_modifier_mapping_reply(c:
                                                           *mut xcb_connection_t,
                                                       cookie:
                                                           xcb_input_get_device_modifier_mapping_cookie_t,
                                                       e:
                                                           *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_device_modifier_mapping_reply_t;
    pub fn xcb_input_set_device_modifier_mapping_sizeof(_buffer:
                                                            *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_set_device_modifier_mapping(c: *mut xcb_connection_t,
                                                 device_id: uint8_t,
                                                 keycodes_per_modifier:
                                                     uint8_t,
                                                 keymaps: *const uint8_t)
     -> xcb_input_set_device_modifier_mapping_cookie_t;
    pub fn xcb_input_set_device_modifier_mapping_unchecked(c:
                                                               *mut xcb_connection_t,
                                                           device_id: uint8_t,
                                                           keycodes_per_modifier:
                                                               uint8_t,
                                                           keymaps:
                                                               *const uint8_t)
     -> xcb_input_set_device_modifier_mapping_cookie_t;
    pub fn xcb_input_set_device_modifier_mapping_reply(c:
                                                           *mut xcb_connection_t,
                                                       cookie:
                                                           xcb_input_set_device_modifier_mapping_cookie_t,
                                                       e:
                                                           *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_set_device_modifier_mapping_reply_t;
    pub fn xcb_input_get_device_button_mapping_sizeof(_buffer:
                                                          *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_button_mapping(c: *mut xcb_connection_t,
                                               device_id: uint8_t)
     -> xcb_input_get_device_button_mapping_cookie_t;
    pub fn xcb_input_get_device_button_mapping_unchecked(c:
                                                             *mut xcb_connection_t,
                                                         device_id: uint8_t)
     -> xcb_input_get_device_button_mapping_cookie_t;
    pub fn xcb_input_get_device_button_mapping_map(R:
                                                       *const xcb_input_get_device_button_mapping_reply_t)
     -> *mut uint8_t;
    pub fn xcb_input_get_device_button_mapping_map_length(R:
                                                              *const xcb_input_get_device_button_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_button_mapping_map_end(R:
                                                           *const xcb_input_get_device_button_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_button_mapping_reply(c: *mut xcb_connection_t,
                                                     cookie:
                                                         xcb_input_get_device_button_mapping_cookie_t,
                                                     e:
                                                         *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_device_button_mapping_reply_t;
    pub fn xcb_input_set_device_button_mapping_sizeof(_buffer:
                                                          *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_set_device_button_mapping(c: *mut xcb_connection_t,
                                               device_id: uint8_t,
                                               map_size: uint8_t,
                                               map: *const uint8_t)
     -> xcb_input_set_device_button_mapping_cookie_t;
    pub fn xcb_input_set_device_button_mapping_unchecked(c:
                                                             *mut xcb_connection_t,
                                                         device_id: uint8_t,
                                                         map_size: uint8_t,
                                                         map: *const uint8_t)
     -> xcb_input_set_device_button_mapping_cookie_t;
    pub fn xcb_input_set_device_button_mapping_reply(c: *mut xcb_connection_t,
                                                     cookie:
                                                         xcb_input_set_device_button_mapping_cookie_t,
                                                     e:
                                                         *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_set_device_button_mapping_reply_t;
    pub fn xcb_input_key_state_next(i: *mut xcb_input_key_state_iterator_t)
     -> ();
    pub fn xcb_input_key_state_end(i: xcb_input_key_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_button_state_next(i:
                                           *mut xcb_input_button_state_iterator_t)
     -> ();
    pub fn xcb_input_button_state_end(i: xcb_input_button_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_valuator_state_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_valuator_state_valuators(R:
                                                  *const xcb_input_valuator_state_t)
     -> *mut uint32_t;
    pub fn xcb_input_valuator_state_valuators_length(R:
                                                         *const xcb_input_valuator_state_t)
     -> ::libc::c_int;
    pub fn xcb_input_valuator_state_valuators_end(R:
                                                      *const xcb_input_valuator_state_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_valuator_state_next(i:
                                             *mut xcb_input_valuator_state_iterator_t)
     -> ();
    pub fn xcb_input_valuator_state_end(i:
                                            xcb_input_valuator_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_input_state_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_input_state_uninterpreted_data(R:
                                                        *const xcb_input_input_state_t)
     -> *mut uint8_t;
    pub fn xcb_input_input_state_uninterpreted_data_length(R:
                                                               *const xcb_input_input_state_t)
     -> ::libc::c_int;
    pub fn xcb_input_input_state_uninterpreted_data_end(R:
                                                            *const xcb_input_input_state_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_input_state_next(i:
                                          *mut xcb_input_input_state_iterator_t)
     -> ();
    pub fn xcb_input_input_state_end(i: xcb_input_input_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_query_device_state_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_query_device_state(c: *mut xcb_connection_t,
                                        device_id: uint8_t)
     -> xcb_input_query_device_state_cookie_t;
    pub fn xcb_input_query_device_state_unchecked(c: *mut xcb_connection_t,
                                                  device_id: uint8_t)
     -> xcb_input_query_device_state_cookie_t;
    pub fn xcb_input_query_device_state_classes_length(R:
                                                           *const xcb_input_query_device_state_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_query_device_state_classes_iterator(R:
                                                             *const xcb_input_query_device_state_reply_t)
     -> xcb_input_input_state_iterator_t;
    pub fn xcb_input_query_device_state_reply(c: *mut xcb_connection_t,
                                              cookie:
                                                  xcb_input_query_device_state_cookie_t,
                                              e:
                                                  *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_query_device_state_reply_t;
    pub fn xcb_input_send_extension_event_sizeof(_buffer:
                                                     *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_send_extension_event_checked(c: *mut xcb_connection_t,
                                                  destination: xcb_window_t,
                                                  device_id: uint8_t,
                                                  propagate: uint8_t,
                                                  num_classes: uint16_t,
                                                  num_events: uint8_t,
                                                  events: *const uint8_t,
                                                  classes:
                                                      *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_send_extension_event(c: *mut xcb_connection_t,
                                          destination: xcb_window_t,
                                          device_id: uint8_t,
                                          propagate: uint8_t,
                                          num_classes: uint16_t,
                                          num_events: uint8_t,
                                          events: *const uint8_t,
                                          classes:
                                              *const xcb_input_event_class_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_device_bell_checked(c: *mut xcb_connection_t,
                                         device_id: uint8_t,
                                         feedback_id: uint8_t,
                                         feedback_class: uint8_t,
                                         percent: int8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_device_bell(c: *mut xcb_connection_t, device_id: uint8_t,
                                 feedback_id: uint8_t,
                                 feedback_class: uint8_t, percent: int8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_set_device_valuators_sizeof(_buffer:
                                                     *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_set_device_valuators(c: *mut xcb_connection_t,
                                          device_id: uint8_t,
                                          first_valuator: uint8_t,
                                          num_valuators: uint8_t,
                                          valuators: *const int32_t)
     -> xcb_input_set_device_valuators_cookie_t;
    pub fn xcb_input_set_device_valuators_unchecked(c: *mut xcb_connection_t,
                                                    device_id: uint8_t,
                                                    first_valuator: uint8_t,
                                                    num_valuators: uint8_t,
                                                    valuators: *const int32_t)
     -> xcb_input_set_device_valuators_cookie_t;
    pub fn xcb_input_set_device_valuators_reply(c: *mut xcb_connection_t,
                                                cookie:
                                                    xcb_input_set_device_valuators_cookie_t,
                                                e:
                                                    *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_set_device_valuators_reply_t;
    pub fn xcb_input_device_resolution_state_sizeof(_buffer:
                                                        *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_device_resolution_state_resolution_values(R:
                                                                   *const xcb_input_device_resolution_state_t)
     -> *mut uint32_t;
    pub fn xcb_input_device_resolution_state_resolution_values_length(R:
                                                                          *const xcb_input_device_resolution_state_t)
     -> ::libc::c_int;
    pub fn xcb_input_device_resolution_state_resolution_values_end(R:
                                                                       *const xcb_input_device_resolution_state_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_resolution_state_resolution_min(R:
                                                                *const xcb_input_device_resolution_state_t)
     -> *mut uint32_t;
    pub fn xcb_input_device_resolution_state_resolution_min_length(R:
                                                                       *const xcb_input_device_resolution_state_t)
     -> ::libc::c_int;
    pub fn xcb_input_device_resolution_state_resolution_min_end(R:
                                                                    *const xcb_input_device_resolution_state_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_resolution_state_resolution_max(R:
                                                                *const xcb_input_device_resolution_state_t)
     -> *mut uint32_t;
    pub fn xcb_input_device_resolution_state_resolution_max_length(R:
                                                                       *const xcb_input_device_resolution_state_t)
     -> ::libc::c_int;
    pub fn xcb_input_device_resolution_state_resolution_max_end(R:
                                                                    *const xcb_input_device_resolution_state_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_resolution_state_next(i:
                                                      *mut xcb_input_device_resolution_state_iterator_t)
     -> ();
    pub fn xcb_input_device_resolution_state_end(i:
                                                     xcb_input_device_resolution_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_abs_calib_state_next(i:
                                                     *mut xcb_input_device_abs_calib_state_iterator_t)
     -> ();
    pub fn xcb_input_device_abs_calib_state_end(i:
                                                    xcb_input_device_abs_calib_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_abs_area_state_next(i:
                                                    *mut xcb_input_device_abs_area_state_iterator_t)
     -> ();
    pub fn xcb_input_device_abs_area_state_end(i:
                                                   xcb_input_device_abs_area_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_core_state_next(i:
                                                *mut xcb_input_device_core_state_iterator_t)
     -> ();
    pub fn xcb_input_device_core_state_end(i:
                                               xcb_input_device_core_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_enable_state_next(i:
                                                  *mut xcb_input_device_enable_state_iterator_t)
     -> ();
    pub fn xcb_input_device_enable_state_end(i:
                                                 xcb_input_device_enable_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_state_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_device_state_uninterpreted_data(R:
                                                         *const xcb_input_device_state_t)
     -> *mut uint8_t;
    pub fn xcb_input_device_state_uninterpreted_data_length(R:
                                                                *const xcb_input_device_state_t)
     -> ::libc::c_int;
    pub fn xcb_input_device_state_uninterpreted_data_end(R:
                                                             *const xcb_input_device_state_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_state_next(i:
                                           *mut xcb_input_device_state_iterator_t)
     -> ();
    pub fn xcb_input_device_state_end(i: xcb_input_device_state_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_control_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_control(c: *mut xcb_connection_t,
                                        control_id: uint16_t,
                                        device_id: uint8_t)
     -> xcb_input_get_device_control_cookie_t;
    pub fn xcb_input_get_device_control_unchecked(c: *mut xcb_connection_t,
                                                  control_id: uint16_t,
                                                  device_id: uint8_t)
     -> xcb_input_get_device_control_cookie_t;
    pub fn xcb_input_get_device_control_control(R:
                                                    *const xcb_input_get_device_control_reply_t)
     -> *mut xcb_input_device_state_t;
    pub fn xcb_input_get_device_control_reply(c: *mut xcb_connection_t,
                                              cookie:
                                                  xcb_input_get_device_control_cookie_t,
                                              e:
                                                  *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_device_control_reply_t;
    pub fn xcb_input_device_resolution_ctl_sizeof(_buffer:
                                                      *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_device_resolution_ctl_resolution_values(R:
                                                                 *const xcb_input_device_resolution_ctl_t)
     -> *mut uint32_t;
    pub fn xcb_input_device_resolution_ctl_resolution_values_length(R:
                                                                        *const xcb_input_device_resolution_ctl_t)
     -> ::libc::c_int;
    pub fn xcb_input_device_resolution_ctl_resolution_values_end(R:
                                                                     *const xcb_input_device_resolution_ctl_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_resolution_ctl_next(i:
                                                    *mut xcb_input_device_resolution_ctl_iterator_t)
     -> ();
    pub fn xcb_input_device_resolution_ctl_end(i:
                                                   xcb_input_device_resolution_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_abs_calib_ctl_next(i:
                                                   *mut xcb_input_device_abs_calib_ctl_iterator_t)
     -> ();
    pub fn xcb_input_device_abs_calib_ctl_end(i:
                                                  xcb_input_device_abs_calib_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_abs_area_ctrl_next(i:
                                                   *mut xcb_input_device_abs_area_ctrl_iterator_t)
     -> ();
    pub fn xcb_input_device_abs_area_ctrl_end(i:
                                                  xcb_input_device_abs_area_ctrl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_core_ctrl_next(i:
                                               *mut xcb_input_device_core_ctrl_iterator_t)
     -> ();
    pub fn xcb_input_device_core_ctrl_end(i:
                                              xcb_input_device_core_ctrl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_enable_ctrl_next(i:
                                                 *mut xcb_input_device_enable_ctrl_iterator_t)
     -> ();
    pub fn xcb_input_device_enable_ctrl_end(i:
                                                xcb_input_device_enable_ctrl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_ctl_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_device_ctl_uninterpreted_data(R:
                                                       *const xcb_input_device_ctl_t)
     -> *mut uint8_t;
    pub fn xcb_input_device_ctl_uninterpreted_data_length(R:
                                                              *const xcb_input_device_ctl_t)
     -> ::libc::c_int;
    pub fn xcb_input_device_ctl_uninterpreted_data_end(R:
                                                           *const xcb_input_device_ctl_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_ctl_next(i: *mut xcb_input_device_ctl_iterator_t)
     -> ();
    pub fn xcb_input_device_ctl_end(i: xcb_input_device_ctl_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_change_device_control_sizeof(_buffer:
                                                      *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_control(c: *mut xcb_connection_t,
                                           control_id: uint16_t,
                                           device_id: uint8_t,
                                           control:
                                               *mut xcb_input_device_ctl_t)
     -> xcb_input_change_device_control_cookie_t;
    pub fn xcb_input_change_device_control_unchecked(c: *mut xcb_connection_t,
                                                     control_id: uint16_t,
                                                     device_id: uint8_t,
                                                     control:
                                                         *mut xcb_input_device_ctl_t)
     -> xcb_input_change_device_control_cookie_t;
    pub fn xcb_input_change_device_control_reply(c: *mut xcb_connection_t,
                                                 cookie:
                                                     xcb_input_change_device_control_cookie_t,
                                                 e:
                                                     *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_change_device_control_reply_t;
    pub fn xcb_input_list_device_properties_sizeof(_buffer:
                                                       *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_list_device_properties(c: *mut xcb_connection_t,
                                            device_id: uint8_t)
     -> xcb_input_list_device_properties_cookie_t;
    pub fn xcb_input_list_device_properties_unchecked(c:
                                                          *mut xcb_connection_t,
                                                      device_id: uint8_t)
     -> xcb_input_list_device_properties_cookie_t;
    pub fn xcb_input_list_device_properties_atoms(R:
                                                      *const xcb_input_list_device_properties_reply_t)
     -> *mut xcb_atom_t;
    pub fn xcb_input_list_device_properties_atoms_length(R:
                                                             *const xcb_input_list_device_properties_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_list_device_properties_atoms_end(R:
                                                          *const xcb_input_list_device_properties_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_list_device_properties_reply(c: *mut xcb_connection_t,
                                                  cookie:
                                                      xcb_input_list_device_properties_cookie_t,
                                                  e:
                                                      *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_list_device_properties_reply_t;
    pub fn xcb_input_change_device_property_items_data_8(S:
                                                             *const xcb_input_change_device_property_items_t)
     -> *mut uint8_t;
    pub fn xcb_input_change_device_property_items_data_8_length(R:
                                                                    *const xcb_input_change_device_property_request_t,
                                                                S:
                                                                    *const xcb_input_change_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_property_items_data_8_end(R:
                                                                 *const xcb_input_change_device_property_request_t,
                                                             S:
                                                                 *const xcb_input_change_device_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_change_device_property_items_data_16(S:
                                                              *const xcb_input_change_device_property_items_t)
     -> *mut uint16_t;
    pub fn xcb_input_change_device_property_items_data_16_length(R:
                                                                     *const xcb_input_change_device_property_request_t,
                                                                 S:
                                                                     *const xcb_input_change_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_property_items_data_16_end(R:
                                                                  *const xcb_input_change_device_property_request_t,
                                                              S:
                                                                  *const xcb_input_change_device_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_change_device_property_items_data_32(S:
                                                              *const xcb_input_change_device_property_items_t)
     -> *mut uint32_t;
    pub fn xcb_input_change_device_property_items_data_32_length(R:
                                                                     *const xcb_input_change_device_property_request_t,
                                                                 S:
                                                                     *const xcb_input_change_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_property_items_data_32_end(R:
                                                                  *const xcb_input_change_device_property_request_t,
                                                              S:
                                                                  *const xcb_input_change_device_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_change_device_property_items_serialize(_buffer:
                                                                *mut *mut ::libc::c_void,
                                                            num_items:
                                                                uint32_t,
                                                            format: uint8_t,
                                                            _aux:
                                                                *const xcb_input_change_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_property_items_unpack(_buffer:
                                                             *const ::libc::c_void,
                                                         num_items: uint32_t,
                                                         format: uint8_t,
                                                         _aux:
                                                             *mut xcb_input_change_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_property_items_sizeof(_buffer:
                                                             *const ::libc::c_void,
                                                         num_items: uint32_t,
                                                         format: uint8_t)
     -> ::libc::c_int;
    pub fn xcb_input_change_device_property_checked(c: *mut xcb_connection_t,
                                                    property: xcb_atom_t,
                                                    _type: xcb_atom_t,
                                                    device_id: uint8_t,
                                                    format: uint8_t,
                                                    mode: uint8_t,
                                                    num_items: uint32_t,
                                                    items:
                                                        *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_input_change_device_property(c: *mut xcb_connection_t,
                                            property: xcb_atom_t,
                                            _type: xcb_atom_t,
                                            device_id: uint8_t,
                                            format: uint8_t, mode: uint8_t,
                                            num_items: uint32_t,
                                            items: *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_input_change_device_property_aux_checked(c:
                                                            *mut xcb_connection_t,
                                                        property: xcb_atom_t,
                                                        _type: xcb_atom_t,
                                                        device_id: uint8_t,
                                                        format: uint8_t,
                                                        mode: uint8_t,
                                                        num_items: uint32_t,
                                                        items:
                                                            *const xcb_input_change_device_property_items_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_change_device_property_aux(c: *mut xcb_connection_t,
                                                property: xcb_atom_t,
                                                _type: xcb_atom_t,
                                                device_id: uint8_t,
                                                format: uint8_t,
                                                mode: uint8_t,
                                                num_items: uint32_t,
                                                items:
                                                    *const xcb_input_change_device_property_items_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_delete_device_property_checked(c: *mut xcb_connection_t,
                                                    property: xcb_atom_t,
                                                    device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_delete_device_property(c: *mut xcb_connection_t,
                                            property: xcb_atom_t,
                                            device_id: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_get_device_property_items_data_8(S:
                                                          *const xcb_input_get_device_property_items_t)
     -> *mut uint8_t;
    pub fn xcb_input_get_device_property_items_data_8_length(R:
                                                                 *const xcb_input_get_device_property_reply_t,
                                                             S:
                                                                 *const xcb_input_get_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_property_items_data_8_end(R:
                                                              *const xcb_input_get_device_property_reply_t,
                                                          S:
                                                              *const xcb_input_get_device_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_property_items_data_16(S:
                                                           *const xcb_input_get_device_property_items_t)
     -> *mut uint16_t;
    pub fn xcb_input_get_device_property_items_data_16_length(R:
                                                                  *const xcb_input_get_device_property_reply_t,
                                                              S:
                                                                  *const xcb_input_get_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_property_items_data_16_end(R:
                                                               *const xcb_input_get_device_property_reply_t,
                                                           S:
                                                               *const xcb_input_get_device_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_property_items_data_32(S:
                                                           *const xcb_input_get_device_property_items_t)
     -> *mut uint32_t;
    pub fn xcb_input_get_device_property_items_data_32_length(R:
                                                                  *const xcb_input_get_device_property_reply_t,
                                                              S:
                                                                  *const xcb_input_get_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_property_items_data_32_end(R:
                                                               *const xcb_input_get_device_property_reply_t,
                                                           S:
                                                               *const xcb_input_get_device_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_get_device_property_items_serialize(_buffer:
                                                             *mut *mut ::libc::c_void,
                                                         num_items: uint32_t,
                                                         format: uint8_t,
                                                         _aux:
                                                             *const xcb_input_get_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_property_items_unpack(_buffer:
                                                          *const ::libc::c_void,
                                                      num_items: uint32_t,
                                                      format: uint8_t,
                                                      _aux:
                                                          *mut xcb_input_get_device_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_property_items_sizeof(_buffer:
                                                          *const ::libc::c_void,
                                                      num_items: uint32_t,
                                                      format: uint8_t)
     -> ::libc::c_int;
    pub fn xcb_input_get_device_property(c: *mut xcb_connection_t,
                                         property: xcb_atom_t,
                                         _type: xcb_atom_t, offset: uint32_t,
                                         len: uint32_t, device_id: uint8_t,
                                         _delete: uint8_t)
     -> xcb_input_get_device_property_cookie_t;
    pub fn xcb_input_get_device_property_unchecked(c: *mut xcb_connection_t,
                                                   property: xcb_atom_t,
                                                   _type: xcb_atom_t,
                                                   offset: uint32_t,
                                                   len: uint32_t,
                                                   device_id: uint8_t,
                                                   _delete: uint8_t)
     -> xcb_input_get_device_property_cookie_t;
    pub fn xcb_input_get_device_property_items(R:
                                                   *const xcb_input_get_device_property_reply_t)
     -> *mut ::libc::c_void;
    pub fn xcb_input_get_device_property_reply(c: *mut xcb_connection_t,
                                               cookie:
                                                   xcb_input_get_device_property_cookie_t,
                                               e:
                                                   *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_get_device_property_reply_t;
    pub fn xcb_input_group_info_next(i: *mut xcb_input_group_info_iterator_t)
     -> ();
    pub fn xcb_input_group_info_end(i: xcb_input_group_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_modifier_info_next(i:
                                            *mut xcb_input_modifier_info_iterator_t)
     -> ();
    pub fn xcb_input_modifier_info_end(i: xcb_input_modifier_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_query_pointer_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_query_pointer(c: *mut xcb_connection_t,
                                      window: xcb_window_t,
                                      deviceid: xcb_input_device_id_t)
     -> xcb_input_xi_query_pointer_cookie_t;
    pub fn xcb_input_xi_query_pointer_unchecked(c: *mut xcb_connection_t,
                                                window: xcb_window_t,
                                                deviceid:
                                                    xcb_input_device_id_t)
     -> xcb_input_xi_query_pointer_cookie_t;
    pub fn xcb_input_xi_query_pointer_buttons(R:
                                                  *const xcb_input_xi_query_pointer_reply_t)
     -> *mut uint32_t;
    pub fn xcb_input_xi_query_pointer_buttons_length(R:
                                                         *const xcb_input_xi_query_pointer_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_query_pointer_buttons_end(R:
                                                      *const xcb_input_xi_query_pointer_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_query_pointer_reply(c: *mut xcb_connection_t,
                                            cookie:
                                                xcb_input_xi_query_pointer_cookie_t,
                                            e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_query_pointer_reply_t;
    pub fn xcb_input_xi_warp_pointer_checked(c: *mut xcb_connection_t,
                                             src_win: xcb_window_t,
                                             dst_win: xcb_window_t,
                                             src_x: xcb_input_fp1616_t,
                                             src_y: xcb_input_fp1616_t,
                                             src_width: uint16_t,
                                             src_height: uint16_t,
                                             dst_x: xcb_input_fp1616_t,
                                             dst_y: xcb_input_fp1616_t,
                                             deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_warp_pointer(c: *mut xcb_connection_t,
                                     src_win: xcb_window_t,
                                     dst_win: xcb_window_t,
                                     src_x: xcb_input_fp1616_t,
                                     src_y: xcb_input_fp1616_t,
                                     src_width: uint16_t,
                                     src_height: uint16_t,
                                     dst_x: xcb_input_fp1616_t,
                                     dst_y: xcb_input_fp1616_t,
                                     deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_change_cursor_checked(c: *mut xcb_connection_t,
                                              window: xcb_window_t,
                                              cursor: xcb_cursor_t,
                                              deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_change_cursor(c: *mut xcb_connection_t,
                                      window: xcb_window_t,
                                      cursor: xcb_cursor_t,
                                      deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_add_master_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_add_master_name(R: *const xcb_input_add_master_t)
     -> *mut ::libc::c_char;
    pub fn xcb_input_add_master_name_length(R: *const xcb_input_add_master_t)
     -> ::libc::c_int;
    pub fn xcb_input_add_master_name_end(R: *const xcb_input_add_master_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_add_master_next(i: *mut xcb_input_add_master_iterator_t)
     -> ();
    pub fn xcb_input_add_master_end(i: xcb_input_add_master_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_remove_master_next(i:
                                            *mut xcb_input_remove_master_iterator_t)
     -> ();
    pub fn xcb_input_remove_master_end(i: xcb_input_remove_master_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_attach_slave_next(i:
                                           *mut xcb_input_attach_slave_iterator_t)
     -> ();
    pub fn xcb_input_attach_slave_end(i: xcb_input_attach_slave_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_detach_slave_next(i:
                                           *mut xcb_input_detach_slave_iterator_t)
     -> ();
    pub fn xcb_input_detach_slave_end(i: xcb_input_detach_slave_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_hierarchy_change_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_hierarchy_change_uninterpreted_data(R:
                                                             *const xcb_input_hierarchy_change_t)
     -> *mut uint8_t;
    pub fn xcb_input_hierarchy_change_uninterpreted_data_length(R:
                                                                    *const xcb_input_hierarchy_change_t)
     -> ::libc::c_int;
    pub fn xcb_input_hierarchy_change_uninterpreted_data_end(R:
                                                                 *const xcb_input_hierarchy_change_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_hierarchy_change_next(i:
                                               *mut xcb_input_hierarchy_change_iterator_t)
     -> ();
    pub fn xcb_input_hierarchy_change_end(i:
                                              xcb_input_hierarchy_change_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_change_hierarchy_sizeof(_buffer:
                                                    *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_change_hierarchy_checked(c: *mut xcb_connection_t,
                                                 num_changes: uint8_t,
                                                 changes:
                                                     *const xcb_input_hierarchy_change_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_change_hierarchy(c: *mut xcb_connection_t,
                                         num_changes: uint8_t,
                                         changes:
                                             *const xcb_input_hierarchy_change_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_set_client_pointer_checked(c: *mut xcb_connection_t,
                                                   window: xcb_window_t,
                                                   deviceid:
                                                       xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_set_client_pointer(c: *mut xcb_connection_t,
                                           window: xcb_window_t,
                                           deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_get_client_pointer(c: *mut xcb_connection_t,
                                           window: xcb_window_t)
     -> xcb_input_xi_get_client_pointer_cookie_t;
    pub fn xcb_input_xi_get_client_pointer_unchecked(c: *mut xcb_connection_t,
                                                     window: xcb_window_t)
     -> xcb_input_xi_get_client_pointer_cookie_t;
    pub fn xcb_input_xi_get_client_pointer_reply(c: *mut xcb_connection_t,
                                                 cookie:
                                                     xcb_input_xi_get_client_pointer_cookie_t,
                                                 e:
                                                     *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_get_client_pointer_reply_t;
    pub fn xcb_input_event_mask_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_event_mask_mask(R: *const xcb_input_event_mask_t)
     -> *mut uint32_t;
    pub fn xcb_input_event_mask_mask_length(R: *const xcb_input_event_mask_t)
     -> ::libc::c_int;
    pub fn xcb_input_event_mask_mask_end(R: *const xcb_input_event_mask_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_event_mask_next(i: *mut xcb_input_event_mask_iterator_t)
     -> ();
    pub fn xcb_input_event_mask_end(i: xcb_input_event_mask_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_select_events_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_select_events_checked(c: *mut xcb_connection_t,
                                              window: xcb_window_t,
                                              num_mask: uint16_t,
                                              masks:
                                                  *const xcb_input_event_mask_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_select_events(c: *mut xcb_connection_t,
                                      window: xcb_window_t,
                                      num_mask: uint16_t,
                                      masks: *const xcb_input_event_mask_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_query_version(c: *mut xcb_connection_t,
                                      major_version: uint16_t,
                                      minor_version: uint16_t)
     -> xcb_input_xi_query_version_cookie_t;
    pub fn xcb_input_xi_query_version_unchecked(c: *mut xcb_connection_t,
                                                major_version: uint16_t,
                                                minor_version: uint16_t)
     -> xcb_input_xi_query_version_cookie_t;
    pub fn xcb_input_xi_query_version_reply(c: *mut xcb_connection_t,
                                            cookie:
                                                xcb_input_xi_query_version_cookie_t,
                                            e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_query_version_reply_t;
    pub fn xcb_input_button_class_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_button_class_state(R: *const xcb_input_button_class_t)
     -> *mut uint32_t;
    pub fn xcb_input_button_class_state_length(R:
                                                   *const xcb_input_button_class_t)
     -> ::libc::c_int;
    pub fn xcb_input_button_class_state_end(R:
                                                *const xcb_input_button_class_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_button_class_labels(R: *const xcb_input_button_class_t)
     -> *mut xcb_atom_t;
    pub fn xcb_input_button_class_labels_length(R:
                                                    *const xcb_input_button_class_t)
     -> ::libc::c_int;
    pub fn xcb_input_button_class_labels_end(R:
                                                 *const xcb_input_button_class_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_button_class_next(i:
                                           *mut xcb_input_button_class_iterator_t)
     -> ();
    pub fn xcb_input_button_class_end(i: xcb_input_button_class_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_key_class_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_key_class_keys(R: *const xcb_input_key_class_t)
     -> *mut uint32_t;
    pub fn xcb_input_key_class_keys_length(R: *const xcb_input_key_class_t)
     -> ::libc::c_int;
    pub fn xcb_input_key_class_keys_end(R: *const xcb_input_key_class_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_key_class_next(i: *mut xcb_input_key_class_iterator_t)
     -> ();
    pub fn xcb_input_key_class_end(i: xcb_input_key_class_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_scroll_class_next(i:
                                           *mut xcb_input_scroll_class_iterator_t)
     -> ();
    pub fn xcb_input_scroll_class_end(i: xcb_input_scroll_class_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_touch_class_next(i:
                                          *mut xcb_input_touch_class_iterator_t)
     -> ();
    pub fn xcb_input_touch_class_end(i: xcb_input_touch_class_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_valuator_class_next(i:
                                             *mut xcb_input_valuator_class_iterator_t)
     -> ();
    pub fn xcb_input_valuator_class_end(i:
                                            xcb_input_valuator_class_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_class_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_device_class_uninterpreted_data(R:
                                                         *const xcb_input_device_class_t)
     -> *mut uint8_t;
    pub fn xcb_input_device_class_uninterpreted_data_length(R:
                                                                *const xcb_input_device_class_t)
     -> ::libc::c_int;
    pub fn xcb_input_device_class_uninterpreted_data_end(R:
                                                             *const xcb_input_device_class_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_device_class_next(i:
                                           *mut xcb_input_device_class_iterator_t)
     -> ();
    pub fn xcb_input_device_class_end(i: xcb_input_device_class_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_device_info_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_device_info_name(R: *const xcb_input_xi_device_info_t)
     -> *mut ::libc::c_char;
    pub fn xcb_input_xi_device_info_name_length(R:
                                                    *const xcb_input_xi_device_info_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_device_info_name_end(R:
                                                 *const xcb_input_xi_device_info_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_device_info_classes_length(R:
                                                       *const xcb_input_xi_device_info_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_device_info_classes_iterator(R:
                                                         *const xcb_input_xi_device_info_t)
     -> xcb_input_device_class_iterator_t;
    pub fn xcb_input_xi_device_info_next(i:
                                             *mut xcb_input_xi_device_info_iterator_t)
     -> ();
    pub fn xcb_input_xi_device_info_end(i:
                                            xcb_input_xi_device_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_query_device_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_query_device(c: *mut xcb_connection_t,
                                     deviceid: xcb_input_device_id_t)
     -> xcb_input_xi_query_device_cookie_t;
    pub fn xcb_input_xi_query_device_unchecked(c: *mut xcb_connection_t,
                                               deviceid:
                                                   xcb_input_device_id_t)
     -> xcb_input_xi_query_device_cookie_t;
    pub fn xcb_input_xi_query_device_infos_length(R:
                                                      *const xcb_input_xi_query_device_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_query_device_infos_iterator(R:
                                                        *const xcb_input_xi_query_device_reply_t)
     -> xcb_input_xi_device_info_iterator_t;
    pub fn xcb_input_xi_query_device_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_input_xi_query_device_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_query_device_reply_t;
    pub fn xcb_input_xi_set_focus_checked(c: *mut xcb_connection_t,
                                          window: xcb_window_t,
                                          time: xcb_timestamp_t,
                                          deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_set_focus(c: *mut xcb_connection_t,
                                  window: xcb_window_t, time: xcb_timestamp_t,
                                  deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_get_focus(c: *mut xcb_connection_t,
                                  deviceid: xcb_input_device_id_t)
     -> xcb_input_xi_get_focus_cookie_t;
    pub fn xcb_input_xi_get_focus_unchecked(c: *mut xcb_connection_t,
                                            deviceid: xcb_input_device_id_t)
     -> xcb_input_xi_get_focus_cookie_t;
    pub fn xcb_input_xi_get_focus_reply(c: *mut xcb_connection_t,
                                        cookie:
                                            xcb_input_xi_get_focus_cookie_t,
                                        e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_get_focus_reply_t;
    pub fn xcb_input_xi_grab_device_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_grab_device(c: *mut xcb_connection_t,
                                    window: xcb_window_t,
                                    time: xcb_timestamp_t,
                                    cursor: xcb_cursor_t,
                                    deviceid: xcb_input_device_id_t,
                                    mode: uint8_t,
                                    paired_device_mode: uint8_t,
                                    owner_events: uint8_t, mask_len: uint16_t,
                                    mask: *const uint32_t)
     -> xcb_input_xi_grab_device_cookie_t;
    pub fn xcb_input_xi_grab_device_unchecked(c: *mut xcb_connection_t,
                                              window: xcb_window_t,
                                              time: xcb_timestamp_t,
                                              cursor: xcb_cursor_t,
                                              deviceid: xcb_input_device_id_t,
                                              mode: uint8_t,
                                              paired_device_mode: uint8_t,
                                              owner_events: uint8_t,
                                              mask_len: uint16_t,
                                              mask: *const uint32_t)
     -> xcb_input_xi_grab_device_cookie_t;
    pub fn xcb_input_xi_grab_device_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_input_xi_grab_device_cookie_t,
                                          e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_grab_device_reply_t;
    pub fn xcb_input_xi_ungrab_device_checked(c: *mut xcb_connection_t,
                                              time: xcb_timestamp_t,
                                              deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_ungrab_device(c: *mut xcb_connection_t,
                                      time: xcb_timestamp_t,
                                      deviceid: xcb_input_device_id_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_allow_events_checked(c: *mut xcb_connection_t,
                                             time: xcb_timestamp_t,
                                             deviceid: xcb_input_device_id_t,
                                             event_mode: uint8_t,
                                             touchid: uint32_t,
                                             grab_window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_allow_events(c: *mut xcb_connection_t,
                                     time: xcb_timestamp_t,
                                     deviceid: xcb_input_device_id_t,
                                     event_mode: uint8_t, touchid: uint32_t,
                                     grab_window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_grab_modifier_info_next(i:
                                                 *mut xcb_input_grab_modifier_info_iterator_t)
     -> ();
    pub fn xcb_input_grab_modifier_info_end(i:
                                                xcb_input_grab_modifier_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_passive_grab_device_sizeof(_buffer:
                                                       *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_passive_grab_device(c: *mut xcb_connection_t,
                                            time: xcb_timestamp_t,
                                            grab_window: xcb_window_t,
                                            cursor: xcb_cursor_t,
                                            detail: uint32_t,
                                            deviceid: xcb_input_device_id_t,
                                            num_modifiers: uint16_t,
                                            mask_len: uint16_t,
                                            grab_type: uint8_t,
                                            grab_mode: uint8_t,
                                            paired_device_mode: uint8_t,
                                            owner_events: uint8_t,
                                            mask: *const uint32_t,
                                            modifiers: *const uint32_t)
     -> xcb_input_xi_passive_grab_device_cookie_t;
    pub fn xcb_input_xi_passive_grab_device_unchecked(c:
                                                          *mut xcb_connection_t,
                                                      time: xcb_timestamp_t,
                                                      grab_window:
                                                          xcb_window_t,
                                                      cursor: xcb_cursor_t,
                                                      detail: uint32_t,
                                                      deviceid:
                                                          xcb_input_device_id_t,
                                                      num_modifiers: uint16_t,
                                                      mask_len: uint16_t,
                                                      grab_type: uint8_t,
                                                      grab_mode: uint8_t,
                                                      paired_device_mode:
                                                          uint8_t,
                                                      owner_events: uint8_t,
                                                      mask: *const uint32_t,
                                                      modifiers:
                                                          *const uint32_t)
     -> xcb_input_xi_passive_grab_device_cookie_t;
    pub fn xcb_input_xi_passive_grab_device_modifiers(R:
                                                          *const xcb_input_xi_passive_grab_device_reply_t)
     -> *mut xcb_input_grab_modifier_info_t;
    pub fn xcb_input_xi_passive_grab_device_modifiers_length(R:
                                                                 *const xcb_input_xi_passive_grab_device_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_passive_grab_device_modifiers_iterator(R:
                                                                   *const xcb_input_xi_passive_grab_device_reply_t)
     -> xcb_input_grab_modifier_info_iterator_t;
    pub fn xcb_input_xi_passive_grab_device_reply(c: *mut xcb_connection_t,
                                                  cookie:
                                                      xcb_input_xi_passive_grab_device_cookie_t,
                                                  e:
                                                      *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_passive_grab_device_reply_t;
    pub fn xcb_input_xi_passive_ungrab_device_sizeof(_buffer:
                                                         *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_passive_ungrab_device_checked(c:
                                                          *mut xcb_connection_t,
                                                      grab_window:
                                                          xcb_window_t,
                                                      detail: uint32_t,
                                                      deviceid:
                                                          xcb_input_device_id_t,
                                                      num_modifiers: uint16_t,
                                                      grab_type: uint8_t,
                                                      modifiers:
                                                          *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_passive_ungrab_device(c: *mut xcb_connection_t,
                                              grab_window: xcb_window_t,
                                              detail: uint32_t,
                                              deviceid: xcb_input_device_id_t,
                                              num_modifiers: uint16_t,
                                              grab_type: uint8_t,
                                              modifiers: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_list_properties_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_list_properties(c: *mut xcb_connection_t,
                                        deviceid: xcb_input_device_id_t)
     -> xcb_input_xi_list_properties_cookie_t;
    pub fn xcb_input_xi_list_properties_unchecked(c: *mut xcb_connection_t,
                                                  deviceid:
                                                      xcb_input_device_id_t)
     -> xcb_input_xi_list_properties_cookie_t;
    pub fn xcb_input_xi_list_properties_properties(R:
                                                       *const xcb_input_xi_list_properties_reply_t)
     -> *mut xcb_atom_t;
    pub fn xcb_input_xi_list_properties_properties_length(R:
                                                              *const xcb_input_xi_list_properties_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_list_properties_properties_end(R:
                                                           *const xcb_input_xi_list_properties_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_list_properties_reply(c: *mut xcb_connection_t,
                                              cookie:
                                                  xcb_input_xi_list_properties_cookie_t,
                                              e:
                                                  *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_list_properties_reply_t;
    pub fn xcb_input_xi_change_property_items_data_8(S:
                                                         *const xcb_input_xi_change_property_items_t)
     -> *mut uint8_t;
    pub fn xcb_input_xi_change_property_items_data_8_length(R:
                                                                *const xcb_input_xi_change_property_request_t,
                                                            S:
                                                                *const xcb_input_xi_change_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_change_property_items_data_8_end(R:
                                                             *const xcb_input_xi_change_property_request_t,
                                                         S:
                                                             *const xcb_input_xi_change_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_change_property_items_data_16(S:
                                                          *const xcb_input_xi_change_property_items_t)
     -> *mut uint16_t;
    pub fn xcb_input_xi_change_property_items_data_16_length(R:
                                                                 *const xcb_input_xi_change_property_request_t,
                                                             S:
                                                                 *const xcb_input_xi_change_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_change_property_items_data_16_end(R:
                                                              *const xcb_input_xi_change_property_request_t,
                                                          S:
                                                              *const xcb_input_xi_change_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_change_property_items_data_32(S:
                                                          *const xcb_input_xi_change_property_items_t)
     -> *mut uint32_t;
    pub fn xcb_input_xi_change_property_items_data_32_length(R:
                                                                 *const xcb_input_xi_change_property_request_t,
                                                             S:
                                                                 *const xcb_input_xi_change_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_change_property_items_data_32_end(R:
                                                              *const xcb_input_xi_change_property_request_t,
                                                          S:
                                                              *const xcb_input_xi_change_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_change_property_items_serialize(_buffer:
                                                            *mut *mut ::libc::c_void,
                                                        num_items: uint32_t,
                                                        format: uint8_t,
                                                        _aux:
                                                            *const xcb_input_xi_change_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_change_property_items_unpack(_buffer:
                                                         *const ::libc::c_void,
                                                     num_items: uint32_t,
                                                     format: uint8_t,
                                                     _aux:
                                                         *mut xcb_input_xi_change_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_change_property_items_sizeof(_buffer:
                                                         *const ::libc::c_void,
                                                     num_items: uint32_t,
                                                     format: uint8_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_change_property_checked(c: *mut xcb_connection_t,
                                                deviceid:
                                                    xcb_input_device_id_t,
                                                mode: uint8_t,
                                                format: uint8_t,
                                                property: xcb_atom_t,
                                                _type: xcb_atom_t,
                                                num_items: uint32_t,
                                                items: *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_change_property(c: *mut xcb_connection_t,
                                        deviceid: xcb_input_device_id_t,
                                        mode: uint8_t, format: uint8_t,
                                        property: xcb_atom_t,
                                        _type: xcb_atom_t,
                                        num_items: uint32_t,
                                        items: *const ::libc::c_void)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_change_property_aux_checked(c: *mut xcb_connection_t,
                                                    deviceid:
                                                        xcb_input_device_id_t,
                                                    mode: uint8_t,
                                                    format: uint8_t,
                                                    property: xcb_atom_t,
                                                    _type: xcb_atom_t,
                                                    num_items: uint32_t,
                                                    items:
                                                        *const xcb_input_xi_change_property_items_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_change_property_aux(c: *mut xcb_connection_t,
                                            deviceid: xcb_input_device_id_t,
                                            mode: uint8_t, format: uint8_t,
                                            property: xcb_atom_t,
                                            _type: xcb_atom_t,
                                            num_items: uint32_t,
                                            items:
                                                *const xcb_input_xi_change_property_items_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_delete_property_checked(c: *mut xcb_connection_t,
                                                deviceid:
                                                    xcb_input_device_id_t,
                                                property: xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_delete_property(c: *mut xcb_connection_t,
                                        deviceid: xcb_input_device_id_t,
                                        property: xcb_atom_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_get_property_items_data_8(S:
                                                      *const xcb_input_xi_get_property_items_t)
     -> *mut uint8_t;
    pub fn xcb_input_xi_get_property_items_data_8_length(R:
                                                             *const xcb_input_xi_get_property_reply_t,
                                                         S:
                                                             *const xcb_input_xi_get_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_get_property_items_data_8_end(R:
                                                          *const xcb_input_xi_get_property_reply_t,
                                                      S:
                                                          *const xcb_input_xi_get_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_get_property_items_data_16(S:
                                                       *const xcb_input_xi_get_property_items_t)
     -> *mut uint16_t;
    pub fn xcb_input_xi_get_property_items_data_16_length(R:
                                                              *const xcb_input_xi_get_property_reply_t,
                                                          S:
                                                              *const xcb_input_xi_get_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_get_property_items_data_16_end(R:
                                                           *const xcb_input_xi_get_property_reply_t,
                                                       S:
                                                           *const xcb_input_xi_get_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_get_property_items_data_32(S:
                                                       *const xcb_input_xi_get_property_items_t)
     -> *mut uint32_t;
    pub fn xcb_input_xi_get_property_items_data_32_length(R:
                                                              *const xcb_input_xi_get_property_reply_t,
                                                          S:
                                                              *const xcb_input_xi_get_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_get_property_items_data_32_end(R:
                                                           *const xcb_input_xi_get_property_reply_t,
                                                       S:
                                                           *const xcb_input_xi_get_property_items_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_get_property_items_serialize(_buffer:
                                                         *mut *mut ::libc::c_void,
                                                     num_items: uint32_t,
                                                     format: uint8_t,
                                                     _aux:
                                                         *const xcb_input_xi_get_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_get_property_items_unpack(_buffer:
                                                      *const ::libc::c_void,
                                                  num_items: uint32_t,
                                                  format: uint8_t,
                                                  _aux:
                                                      *mut xcb_input_xi_get_property_items_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_get_property_items_sizeof(_buffer:
                                                      *const ::libc::c_void,
                                                  num_items: uint32_t,
                                                  format: uint8_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_get_property(c: *mut xcb_connection_t,
                                     deviceid: xcb_input_device_id_t,
                                     _delete: uint8_t, property: xcb_atom_t,
                                     _type: xcb_atom_t, offset: uint32_t,
                                     len: uint32_t)
     -> xcb_input_xi_get_property_cookie_t;
    pub fn xcb_input_xi_get_property_unchecked(c: *mut xcb_connection_t,
                                               deviceid:
                                                   xcb_input_device_id_t,
                                               _delete: uint8_t,
                                               property: xcb_atom_t,
                                               _type: xcb_atom_t,
                                               offset: uint32_t,
                                               len: uint32_t)
     -> xcb_input_xi_get_property_cookie_t;
    pub fn xcb_input_xi_get_property_items(R:
                                               *const xcb_input_xi_get_property_reply_t)
     -> *mut ::libc::c_void;
    pub fn xcb_input_xi_get_property_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_input_xi_get_property_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_get_property_reply_t;
    pub fn xcb_input_xi_get_selected_events_sizeof(_buffer:
                                                       *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_get_selected_events(c: *mut xcb_connection_t,
                                            window: xcb_window_t)
     -> xcb_input_xi_get_selected_events_cookie_t;
    pub fn xcb_input_xi_get_selected_events_unchecked(c:
                                                          *mut xcb_connection_t,
                                                      window: xcb_window_t)
     -> xcb_input_xi_get_selected_events_cookie_t;
    pub fn xcb_input_xi_get_selected_events_masks_length(R:
                                                             *const xcb_input_xi_get_selected_events_reply_t)
     -> ::libc::c_int;
    pub fn xcb_input_xi_get_selected_events_masks_iterator(R:
                                                               *const xcb_input_xi_get_selected_events_reply_t)
     -> xcb_input_event_mask_iterator_t;
    pub fn xcb_input_xi_get_selected_events_reply(c: *mut xcb_connection_t,
                                                  cookie:
                                                      xcb_input_xi_get_selected_events_cookie_t,
                                                  e:
                                                      *mut *mut xcb_generic_error_t)
     -> *mut xcb_input_xi_get_selected_events_reply_t;
    pub fn xcb_input_barrier_release_pointer_info_next(i:
                                                           *mut xcb_input_barrier_release_pointer_info_iterator_t)
     -> ();
    pub fn xcb_input_barrier_release_pointer_info_end(i:
                                                          xcb_input_barrier_release_pointer_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_xi_barrier_release_pointer_sizeof(_buffer:
                                                           *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_xi_barrier_release_pointer_checked(c:
                                                            *mut xcb_connection_t,
                                                        num_barriers:
                                                            uint32_t,
                                                        barriers:
                                                            *const xcb_input_barrier_release_pointer_info_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_xi_barrier_release_pointer(c: *mut xcb_connection_t,
                                                num_barriers: uint32_t,
                                                barriers:
                                                    *const xcb_input_barrier_release_pointer_info_t)
     -> xcb_void_cookie_t;
    pub fn xcb_input_device_changed_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_key_press_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_key_release_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_button_press_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_button_release_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_motion_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_enter_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_leave_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_focus_in_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_focus_out_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_hierarchy_info_next(i:
                                             *mut xcb_input_hierarchy_info_iterator_t)
     -> ();
    pub fn xcb_input_hierarchy_info_end(i:
                                            xcb_input_hierarchy_info_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_input_hierarchy_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_raw_key_press_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_raw_key_release_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_raw_button_press_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_raw_button_release_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_raw_motion_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_touch_begin_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_touch_update_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_touch_end_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_raw_touch_begin_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_raw_touch_update_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_input_raw_touch_end_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
}
